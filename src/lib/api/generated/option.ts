// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createQuery } from "@tanstack/svelte-query";
import type {
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type { DTOOptionDTO, DTOOptionGroupBasicDTO, InternalErrorResponse } from "./api.schemas";
import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType } from "../mutator/customInstance.svelte";

export const optionItems = (id: number) => {
	return customInstance<DTOOptionDTO[]>({ url: `/option/${id}`, method: "GET" });
};

export const getOptionItemsQueryKey = (id: number) => {
	return [`/option/${id}`] as const;
};

export const getOptionItemsQueryOptions = <
	TData = Awaited<ReturnType<typeof optionItems>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof optionItems>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getOptionItemsQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof optionItems>>> = () => optionItems(id);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof optionItems>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type OptionItemsQueryResult = NonNullable<Awaited<ReturnType<typeof optionItems>>>;
export type OptionItemsQueryError = ErrorType<void | InternalErrorResponse>;

export function createOptionItems<
	TData = Awaited<ReturnType<typeof optionItems>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof optionItems>>, TError, TData>>;
	}
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getOptionItemsQueryOptions(id, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const optionGroup = () => {
	return customInstance<DTOOptionGroupBasicDTO[]>({ url: `/option`, method: "GET" });
};

export const getOptionGroupQueryKey = () => {
	return [`/option`] as const;
};

export const getOptionGroupQueryOptions = <
	TData = Awaited<ReturnType<typeof optionGroup>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(options?: {
	query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof optionGroup>>, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getOptionGroupQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof optionGroup>>> = () => optionGroup();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof optionGroup>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type OptionGroupQueryResult = NonNullable<Awaited<ReturnType<typeof optionGroup>>>;
export type OptionGroupQueryError = ErrorType<void | InternalErrorResponse>;

export function createOptionGroup<
	TData = Awaited<ReturnType<typeof optionGroup>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(options?: {
	query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof optionGroup>>, TError, TData>>;
}): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getOptionGroupQueryOptions(options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
