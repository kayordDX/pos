// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";

import type {
	EntitiesDivision,
	EntitiesRole,
	EntitiesRoleType,
	InternalErrorResponse,
	RoleCreateRequest,
	RoleDivisionCreateRequest,
	RoleUpdateRequest,
	UserCreateRoleRequest,
} from "./api.schemas";

import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const userCreateRole = (userCreateRoleRequest: BodyType<UserCreateRoleRequest>) => {
	return customInstance<void>({
		url: `/role/createRole`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: userCreateRoleRequest,
	});
};

export const getUserCreateRoleMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof userCreateRole>>,
		TError,
		{ data: BodyType<UserCreateRoleRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof userCreateRole>>,
	TError,
	{ data: BodyType<UserCreateRoleRequest> },
	TContext
> => {
	const mutationKey = ["userCreateRole"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userCreateRole>>,
		{ data: BodyType<UserCreateRoleRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return userCreateRole(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserCreateRoleMutationResult = NonNullable<Awaited<ReturnType<typeof userCreateRole>>>;
export type UserCreateRoleMutationBody = BodyType<UserCreateRoleRequest>;
export type UserCreateRoleMutationError = ErrorType<void | InternalErrorResponse>;

export const createUserCreateRole = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof userCreateRole>>,
			TError,
			{ data: BodyType<UserCreateRoleRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof userCreateRole>>,
	TError,
	{ data: BodyType<UserCreateRoleRequest> },
	TContext
> => {
	const mutationOptions = getUserCreateRoleMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const roleUpdate = (id: number, roleUpdateRequest: BodyType<RoleUpdateRequest>) => {
	return customInstance<EntitiesRole>({
		url: `/role/${id}`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: roleUpdateRequest,
	});
};

export const getRoleUpdateMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof roleUpdate>>,
		TError,
		{ id: number; data: BodyType<RoleUpdateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof roleUpdate>>,
	TError,
	{ id: number; data: BodyType<RoleUpdateRequest> },
	TContext
> => {
	const mutationKey = ["roleUpdate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof roleUpdate>>,
		{ id: number; data: BodyType<RoleUpdateRequest> }
	> = (props) => {
		const { id, data } = props ?? {};

		return roleUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type RoleUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof roleUpdate>>>;
export type RoleUpdateMutationBody = BodyType<RoleUpdateRequest>;
export type RoleUpdateMutationError = ErrorType<void | InternalErrorResponse>;

export const createRoleUpdate = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof roleUpdate>>,
			TError,
			{ id: number; data: BodyType<RoleUpdateRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof roleUpdate>>,
	TError,
	{ id: number; data: BodyType<RoleUpdateRequest> },
	TContext
> => {
	const mutationOptions = getRoleUpdateMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const roleTypeGetAll = (outletId: number) => {
	return customInstance<EntitiesRoleType[]>({ url: `/role/type/${outletId}`, method: "GET" });
};

export const getRoleTypeGetAllQueryKey = (outletId: number) => {
	return [`/role/type/${outletId}`] as const;
};

export const getRoleTypeGetAllQueryOptions = <
	TData = Awaited<ReturnType<typeof roleTypeGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	outletId: number,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof roleTypeGetAll>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getRoleTypeGetAllQueryKey(outletId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof roleTypeGetAll>>> = () =>
		roleTypeGetAll(outletId);

	return { queryKey, queryFn, enabled: !!outletId, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof roleTypeGetAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RoleTypeGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof roleTypeGetAll>>>;
export type RoleTypeGetAllQueryError = ErrorType<void | InternalErrorResponse>;

export function createRoleTypeGetAll<
	TData = Awaited<ReturnType<typeof roleTypeGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	outletId: number,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof roleTypeGetAll>>, TError, TData>>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getRoleTypeGetAllQueryOptions(outletId, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const roleGetAll = (outletId: number) => {
	return customInstance<EntitiesRole[]>({ url: `/role/${outletId}`, method: "GET" });
};

export const getRoleGetAllQueryKey = (outletId: number) => {
	return [`/role/${outletId}`] as const;
};

export const getRoleGetAllQueryOptions = <
	TData = Awaited<ReturnType<typeof roleGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	outletId: number,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof roleGetAll>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getRoleGetAllQueryKey(outletId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof roleGetAll>>> = () => roleGetAll(outletId);

	return { queryKey, queryFn, enabled: !!outletId, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof roleGetAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RoleGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof roleGetAll>>>;
export type RoleGetAllQueryError = ErrorType<void | InternalErrorResponse>;

export function createRoleGetAll<
	TData = Awaited<ReturnType<typeof roleGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	outletId: number,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof roleGetAll>>, TError, TData>>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getRoleGetAllQueryOptions(outletId, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const roleDivisionGetAll = (divisionid: number) => {
	return customInstance<EntitiesRole[]>({ url: `/role/division/${divisionid}`, method: "GET" });
};

export const getRoleDivisionGetAllQueryKey = (divisionid: number) => {
	return [`/role/division/${divisionid}`] as const;
};

export const getRoleDivisionGetAllQueryOptions = <
	TData = Awaited<ReturnType<typeof roleDivisionGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	divisionid: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof roleDivisionGetAll>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getRoleDivisionGetAllQueryKey(divisionid);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof roleDivisionGetAll>>> = () =>
		roleDivisionGetAll(divisionid);

	return { queryKey, queryFn, enabled: !!divisionid, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof roleDivisionGetAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RoleDivisionGetAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof roleDivisionGetAll>>
>;
export type RoleDivisionGetAllQueryError = ErrorType<void | InternalErrorResponse>;

export function createRoleDivisionGetAll<
	TData = Awaited<ReturnType<typeof roleDivisionGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	divisionid: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof roleDivisionGetAll>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getRoleDivisionGetAllQueryOptions(divisionid, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const roleDivisionDelete = (roleId: number, divisionId: number) => {
	return customInstance<void>({ url: `/role/division/${roleId}/${divisionId}`, method: "DELETE" });
};

export const getRoleDivisionDeleteMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof roleDivisionDelete>>,
		TError,
		{ roleId: number; divisionId: number },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof roleDivisionDelete>>,
	TError,
	{ roleId: number; divisionId: number },
	TContext
> => {
	const mutationKey = ["roleDivisionDelete"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof roleDivisionDelete>>,
		{ roleId: number; divisionId: number }
	> = (props) => {
		const { roleId, divisionId } = props ?? {};

		return roleDivisionDelete(roleId, divisionId);
	};

	return { mutationFn, ...mutationOptions };
};

export type RoleDivisionDeleteMutationResult = NonNullable<
	Awaited<ReturnType<typeof roleDivisionDelete>>
>;

export type RoleDivisionDeleteMutationError = ErrorType<void | InternalErrorResponse>;

export const createRoleDivisionDelete = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof roleDivisionDelete>>,
			TError,
			{ roleId: number; divisionId: number },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof roleDivisionDelete>>,
	TError,
	{ roleId: number; divisionId: number },
	TContext
> => {
	const mutationOptions = getRoleDivisionDeleteMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const roleDivisionCreate = (
	roleDivisionCreateRequest: BodyType<RoleDivisionCreateRequest>
) => {
	return customInstance<EntitiesDivision>({
		url: `/role/division`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: roleDivisionCreateRequest,
	});
};

export const getRoleDivisionCreateMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof roleDivisionCreate>>,
		TError,
		{ data: BodyType<RoleDivisionCreateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof roleDivisionCreate>>,
	TError,
	{ data: BodyType<RoleDivisionCreateRequest> },
	TContext
> => {
	const mutationKey = ["roleDivisionCreate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof roleDivisionCreate>>,
		{ data: BodyType<RoleDivisionCreateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return roleDivisionCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type RoleDivisionCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof roleDivisionCreate>>
>;
export type RoleDivisionCreateMutationBody = BodyType<RoleDivisionCreateRequest>;
export type RoleDivisionCreateMutationError = ErrorType<void | InternalErrorResponse>;

export const createRoleDivisionCreate = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof roleDivisionCreate>>,
			TError,
			{ data: BodyType<RoleDivisionCreateRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof roleDivisionCreate>>,
	TError,
	{ data: BodyType<RoleDivisionCreateRequest> },
	TContext
> => {
	const mutationOptions = getRoleDivisionCreateMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const roleCreate = (roleCreateRequest: BodyType<RoleCreateRequest>) => {
	return customInstance<EntitiesRole>({
		url: `/role`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: roleCreateRequest,
	});
};

export const getRoleCreateMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof roleCreate>>,
		TError,
		{ data: BodyType<RoleCreateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof roleCreate>>,
	TError,
	{ data: BodyType<RoleCreateRequest> },
	TContext
> => {
	const mutationKey = ["roleCreate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof roleCreate>>,
		{ data: BodyType<RoleCreateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return roleCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type RoleCreateMutationResult = NonNullable<Awaited<ReturnType<typeof roleCreate>>>;
export type RoleCreateMutationBody = BodyType<RoleCreateRequest>;
export type RoleCreateMutationError = ErrorType<void | InternalErrorResponse>;

export const createRoleCreate = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof roleCreate>>,
			TError,
			{ data: BodyType<RoleCreateRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof roleCreate>>,
	TError,
	{ data: BodyType<RoleCreateRequest> },
	TContext
> => {
	const mutationOptions = getRoleCreateMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
