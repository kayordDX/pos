// @ts-nocheck
/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type {
	EntitiesRole,
	InternalErrorResponse,
	RoleAddUserInRoleRequest,
	RoleCreateRequest,
} from "./api.schemas";
import { useCustomClient } from "../mutator/useCustomClient";
import type { ErrorType, BodyType } from "../mutator/useCustomClient";

export const useRoleCreateHook = () => {
	const roleCreate = useCustomClient<unknown>();

	return (roleCreateRequest: BodyType<RoleCreateRequest>) => {
		return roleCreate({
			url: `/role/createRole`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: roleCreateRequest,
		});
	};
};

export const useRoleCreateMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useRoleCreateHook>>>,
		TError,
		{ data: BodyType<RoleCreateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useRoleCreateHook>>>,
	TError,
	{ data: BodyType<RoleCreateRequest> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const roleCreate = useRoleCreateHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useRoleCreateHook>>>,
		{ data: BodyType<RoleCreateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return roleCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type RoleCreateMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useRoleCreateHook>>>
>;
export type RoleCreateMutationBody = BodyType<RoleCreateRequest>;
export type RoleCreateMutationError = ErrorType<InternalErrorResponse>;

export const createRoleCreate = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useRoleCreateHook>>>,
		TError,
		{ data: BodyType<RoleCreateRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<ReturnType<typeof useRoleCreateHook>>>,
	TError,
	{ data: BodyType<RoleCreateRequest> },
	TContext
> => {
	const mutationOptions = useRoleCreateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const useRoleAddUserInRoleHook = () => {
	const roleAddUserInRole = useCustomClient<unknown>();

	return (roleAddUserInRoleRequest: BodyType<RoleAddUserInRoleRequest>) => {
		return roleAddUserInRole({
			url: `/role/addUserInRole`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: roleAddUserInRoleRequest,
		});
	};
};

export const useRoleAddUserInRoleMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useRoleAddUserInRoleHook>>>,
		TError,
		{ data: BodyType<RoleAddUserInRoleRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useRoleAddUserInRoleHook>>>,
	TError,
	{ data: BodyType<RoleAddUserInRoleRequest> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const roleAddUserInRole = useRoleAddUserInRoleHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useRoleAddUserInRoleHook>>>,
		{ data: BodyType<RoleAddUserInRoleRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return roleAddUserInRole(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type RoleAddUserInRoleMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useRoleAddUserInRoleHook>>>
>;
export type RoleAddUserInRoleMutationBody = BodyType<RoleAddUserInRoleRequest>;
export type RoleAddUserInRoleMutationError = ErrorType<InternalErrorResponse>;

export const createRoleAddUserInRole = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useRoleAddUserInRoleHook>>>,
		TError,
		{ data: BodyType<RoleAddUserInRoleRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<ReturnType<typeof useRoleAddUserInRoleHook>>>,
	TError,
	{ data: BodyType<RoleAddUserInRoleRequest> },
	TContext
> => {
	const mutationOptions = useRoleAddUserInRoleMutationOptions(options);

	return createMutation(mutationOptions);
};
export const useRoleGetAllHook = () => {
	const roleGetAll = useCustomClient<EntitiesRole[]>();

	return () => {
		return roleGetAll({ url: `/role`, method: "GET" });
	};
};

export const getRoleGetAllQueryKey = () => {
	return [`/role`] as const;
};

export const useRoleGetAllQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useRoleGetAllHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(options?: {
	query?: Partial<
		CreateQueryOptions<Awaited<ReturnType<ReturnType<typeof useRoleGetAllHook>>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getRoleGetAllQueryKey();

	const roleGetAll = useRoleGetAllHook();

	const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useRoleGetAllHook>>>> = () =>
		roleGetAll();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useRoleGetAllHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type RoleGetAllQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useRoleGetAllHook>>>
>;
export type RoleGetAllQueryError = ErrorType<void | InternalErrorResponse>;

export const createRoleGetAll = <
	TData = Awaited<ReturnType<ReturnType<typeof useRoleGetAllHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(options?: {
	query?: Partial<
		CreateQueryOptions<Awaited<ReturnType<ReturnType<typeof useRoleGetAllHook>>>, TError, TData>
	>;
}): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useRoleGetAllQueryOptions(options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};
