// @ts-nocheck
/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation } from "@tanstack/svelte-query";
import type { CreateMutationOptions, MutationFunction } from "@tanstack/svelte-query";
import type { InternalErrorResponse, Request4, Request5 } from "./api.schemas";
import { useCustomClient } from "../mutator/useCustomClient";
import type { ErrorType, BodyType } from "../mutator/useCustomClient";

export const useRoleCreateHook = () => {
	const roleCreate = useCustomClient<unknown>();

	return (request4: BodyType<Request4>) => {
		return roleCreate({
			url: `/role/createRole`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: request4,
		});
	};
};

export const useRoleCreateMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useRoleCreateHook>>>,
		TError,
		{ data: BodyType<Request4> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useRoleCreateHook>>>,
	TError,
	{ data: BodyType<Request4> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const roleCreate = useRoleCreateHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useRoleCreateHook>>>,
		{ data: BodyType<Request4> }
	> = (props) => {
		const { data } = props ?? {};

		return roleCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type RoleCreateMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useRoleCreateHook>>>
>;
export type RoleCreateMutationBody = BodyType<Request4>;
export type RoleCreateMutationError = ErrorType<InternalErrorResponse>;

export const createRoleCreate = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useRoleCreateHook>>>,
		TError,
		{ data: BodyType<Request4> },
		TContext
	>;
}) => {
	const mutationOptions = useRoleCreateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const useRoleAddUserInRoleHook = () => {
	const roleAddUserInRole = useCustomClient<unknown>();

	return (request5: BodyType<Request5>) => {
		return roleAddUserInRole({
			url: `/role/addUserInRole`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: request5,
		});
	};
};

export const useRoleAddUserInRoleMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useRoleAddUserInRoleHook>>>,
		TError,
		{ data: BodyType<Request5> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useRoleAddUserInRoleHook>>>,
	TError,
	{ data: BodyType<Request5> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const roleAddUserInRole = useRoleAddUserInRoleHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useRoleAddUserInRoleHook>>>,
		{ data: BodyType<Request5> }
	> = (props) => {
		const { data } = props ?? {};

		return roleAddUserInRole(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type RoleAddUserInRoleMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useRoleAddUserInRoleHook>>>
>;
export type RoleAddUserInRoleMutationBody = BodyType<Request5>;
export type RoleAddUserInRoleMutationError = ErrorType<InternalErrorResponse>;

export const createRoleAddUserInRole = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useRoleAddUserInRoleHook>>>,
		TError,
		{ data: BodyType<Request5> },
		TContext
	>;
}) => {
	const mutationOptions = useRoleAddUserInRoleMutationOptions(options);

	return createMutation(mutationOptions);
};
