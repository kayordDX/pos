// @ts-nocheck
/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateQueryOptions,
	CreateQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type {
	EntitiesOrderItem,
	InternalErrorResponse,
	OrderAddItemsRequest,
	OrderClearBasketRequest,
	OrderRemoveItemRequest,
	TableOrderGetBillParams,
	TableOrderGetBillResponse,
} from "./api.schemas";
import { useCustomClient } from "../mutator/useCustomClient";
import type { ErrorType, BodyType } from "../mutator/useCustomClient";

export const useTableOrderGetBillHook = () => {
	const tableOrderGetBill = useCustomClient<TableOrderGetBillResponse>();

	return (params: TableOrderGetBillParams) => {
		return tableOrderGetBill({ url: `/order/getBill`, method: "GET", params });
	};
};

export const getTableOrderGetBillQueryKey = (params: TableOrderGetBillParams) => {
	return [`/order/getBill`, ...(params ? [params] : [])] as const;
};

export const useTableOrderGetBillQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useTableOrderGetBillHook>>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: TableOrderGetBillParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useTableOrderGetBillHook>>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTableOrderGetBillQueryKey(params);

	const tableOrderGetBill = useTableOrderGetBillHook();

	const queryFn: QueryFunction<
		Awaited<ReturnType<ReturnType<typeof useTableOrderGetBillHook>>>
	> = () => tableOrderGetBill(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useTableOrderGetBillHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type TableOrderGetBillQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useTableOrderGetBillHook>>>
>;
export type TableOrderGetBillQueryError = ErrorType<InternalErrorResponse>;

export const createTableOrderGetBill = <
	TData = Awaited<ReturnType<ReturnType<typeof useTableOrderGetBillHook>>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: TableOrderGetBillParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useTableOrderGetBillHook>>>,
				TError,
				TData
			>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useTableOrderGetBillQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const useOrderRemoveItemHook = () => {
	const orderRemoveItem = useCustomClient<EntitiesOrderItem>();

	return (orderRemoveItemRequest: BodyType<OrderRemoveItemRequest>) => {
		return orderRemoveItem({
			url: `/order/removeItem`,
			method: "DELETE",
			headers: { "Content-Type": "*/*" },
			data: orderRemoveItemRequest,
		});
	};
};

export const useOrderRemoveItemMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useOrderRemoveItemHook>>>,
		TError,
		{ data: BodyType<OrderRemoveItemRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useOrderRemoveItemHook>>>,
	TError,
	{ data: BodyType<OrderRemoveItemRequest> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const orderRemoveItem = useOrderRemoveItemHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useOrderRemoveItemHook>>>,
		{ data: BodyType<OrderRemoveItemRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return orderRemoveItem(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type OrderRemoveItemMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useOrderRemoveItemHook>>>
>;
export type OrderRemoveItemMutationBody = BodyType<OrderRemoveItemRequest>;
export type OrderRemoveItemMutationError = ErrorType<void | InternalErrorResponse>;

export const createOrderRemoveItem = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useOrderRemoveItemHook>>>,
		TError,
		{ data: BodyType<OrderRemoveItemRequest> },
		TContext
	>;
}) => {
	const mutationOptions = useOrderRemoveItemMutationOptions(options);

	return createMutation(mutationOptions);
};
export const useOrderClearBasketHook = () => {
	const orderClearBasket = useCustomClient<EntitiesOrderItem>();

	return (orderClearBasketRequest: BodyType<OrderClearBasketRequest>) => {
		return orderClearBasket({
			url: `/order/clearBasket`,
			method: "DELETE",
			headers: { "Content-Type": "*/*" },
			data: orderClearBasketRequest,
		});
	};
};

export const useOrderClearBasketMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useOrderClearBasketHook>>>,
		TError,
		{ data: BodyType<OrderClearBasketRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useOrderClearBasketHook>>>,
	TError,
	{ data: BodyType<OrderClearBasketRequest> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const orderClearBasket = useOrderClearBasketHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useOrderClearBasketHook>>>,
		{ data: BodyType<OrderClearBasketRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return orderClearBasket(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type OrderClearBasketMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useOrderClearBasketHook>>>
>;
export type OrderClearBasketMutationBody = BodyType<OrderClearBasketRequest>;
export type OrderClearBasketMutationError = ErrorType<void | InternalErrorResponse>;

export const createOrderClearBasket = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useOrderClearBasketHook>>>,
		TError,
		{ data: BodyType<OrderClearBasketRequest> },
		TContext
	>;
}) => {
	const mutationOptions = useOrderClearBasketMutationOptions(options);

	return createMutation(mutationOptions);
};
export const useOrderAddItemsHook = () => {
	const orderAddItems = useCustomClient<EntitiesOrderItem>();

	return (orderAddItemsRequest: BodyType<OrderAddItemsRequest>) => {
		return orderAddItems({
			url: `/order/addItems`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: orderAddItemsRequest,
		});
	};
};

export const useOrderAddItemsMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useOrderAddItemsHook>>>,
		TError,
		{ data: BodyType<OrderAddItemsRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useOrderAddItemsHook>>>,
	TError,
	{ data: BodyType<OrderAddItemsRequest> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const orderAddItems = useOrderAddItemsHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useOrderAddItemsHook>>>,
		{ data: BodyType<OrderAddItemsRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return orderAddItems(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type OrderAddItemsMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useOrderAddItemsHook>>>
>;
export type OrderAddItemsMutationBody = BodyType<OrderAddItemsRequest>;
export type OrderAddItemsMutationError = ErrorType<void | InternalErrorResponse>;

export const createOrderAddItems = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useOrderAddItemsHook>>>,
		TError,
		{ data: BodyType<OrderAddItemsRequest> },
		TContext
	>;
}) => {
	const mutationOptions = useOrderAddItemsMutationOptions(options);

	return createMutation(mutationOptions);
};
