// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * Generated by orval v7.1.0 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createQuery } from "@tanstack/svelte-query";
import type {
	CreateQueryOptions,
	CreateQueryResult,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type { InternalErrorResponse, ServicesWhatsappStatus } from "./api.schemas";
import { customInstance } from "../mutator/customInstance";
import type { ErrorType } from "../mutator/customInstance";

export const test = () => {
	return customInstance<boolean>({ url: `/test`, method: "GET" });
};

export const getTestQueryKey = () => {
	return [`/test`] as const;
};

export const getTestQueryOptions = <
	TData = Awaited<ReturnType<typeof test>>,
	TError = ErrorType<InternalErrorResponse>,
>(options?: {
	query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof test>>, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTestQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof test>>> = () => test();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof test>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type TestQueryResult = NonNullable<Awaited<ReturnType<typeof test>>>;
export type TestQueryError = ErrorType<InternalErrorResponse>;

export function createTest<
	TData = Awaited<ReturnType<typeof test>>,
	TError = ErrorType<InternalErrorResponse>,
>(options?: {
	query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof test>>, TError, TData>>;
}): CreateQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getTestQueryOptions(options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const testWhatsAppTest = () => {
	return customInstance<ServicesWhatsappStatus>({ url: `/test/whatsapp`, method: "GET" });
};

export const getTestWhatsAppTestQueryKey = () => {
	return [`/test/whatsapp`] as const;
};

export const getTestWhatsAppTestQueryOptions = <
	TData = Awaited<ReturnType<typeof testWhatsAppTest>>,
	TError = ErrorType<InternalErrorResponse>,
>(options?: {
	query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof testWhatsAppTest>>, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTestWhatsAppTestQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof testWhatsAppTest>>> = () =>
		testWhatsAppTest();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof testWhatsAppTest>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type TestWhatsAppTestQueryResult = NonNullable<Awaited<ReturnType<typeof testWhatsAppTest>>>;
export type TestWhatsAppTestQueryError = ErrorType<InternalErrorResponse>;

export function createTestWhatsAppTest<
	TData = Awaited<ReturnType<typeof testWhatsAppTest>>,
	TError = ErrorType<InternalErrorResponse>,
>(options?: {
	query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof testWhatsAppTest>>, TError, TData>>;
}): CreateQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getTestWhatsAppTestQueryOptions(options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
