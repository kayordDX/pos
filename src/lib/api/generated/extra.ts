// @ts-nocheck
/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createQuery } from "@tanstack/svelte-query";
import type {
	CreateQueryOptions,
	CreateQueryResult,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type { EntitiesExtra, InternalErrorResponse } from "./api.schemas";
import { customInstance } from "../mutator/customInstance";
import type { ErrorType } from "../mutator/customInstance";

export const extraGetAll = () => {
	return customInstance<EntitiesExtra[]>({ url: `/extra/all`, method: "GET" });
};

export const getExtraGetAllQueryKey = () => {
	return [`/extra/all`] as const;
};

export const getExtraGetAllQueryOptions = <
	TData = Awaited<ReturnType<typeof extraGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(options?: {
	query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof extraGetAll>>, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getExtraGetAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof extraGetAll>>> = () => extraGetAll();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof extraGetAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type ExtraGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof extraGetAll>>>;
export type ExtraGetAllQueryError = ErrorType<void | InternalErrorResponse>;

export const createExtraGetAll = <
	TData = Awaited<ReturnType<typeof extraGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(options?: {
	query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof extraGetAll>>, TError, TData>>;
}): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getExtraGetAllQueryOptions(options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};
