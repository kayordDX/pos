// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";

import type {
	CommonModelsPaginatedListOfMenuItemAdminDTO,
	EntitiesMenuItem,
	EntitiesMenuSection,
	ErrorResponse,
	InternalErrorResponse,
	MenuItemCreateRequest,
	MenuItemGetAllParams,
	MenuItemUpdateRequest,
} from "./api.schemas";

import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const menuItemUpdate = (menuItemUpdateRequest: BodyType<MenuItemUpdateRequest>) => {
	return customInstance<EntitiesMenuItem>({
		url: `/menuItem`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: menuItemUpdateRequest,
	});
};

export const getMenuItemUpdateMutationOptions = <
	TError = ErrorType<null | null | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof menuItemUpdate>>,
		TError,
		{ data: BodyType<MenuItemUpdateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof menuItemUpdate>>,
	TError,
	{ data: BodyType<MenuItemUpdateRequest> },
	TContext
> => {
	const mutationKey = ["menuItemUpdate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof menuItemUpdate>>,
		{ data: BodyType<MenuItemUpdateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return menuItemUpdate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type MenuItemUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof menuItemUpdate>>>;
export type MenuItemUpdateMutationBody = BodyType<MenuItemUpdateRequest>;
export type MenuItemUpdateMutationError = ErrorType<null | null | InternalErrorResponse>;

export const createMenuItemUpdate = <
	TError = ErrorType<null | null | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof menuItemUpdate>>,
			TError,
			{ data: BodyType<MenuItemUpdateRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof menuItemUpdate>>,
	TError,
	{ data: BodyType<MenuItemUpdateRequest> },
	TContext
> => {
	const mutationOptions = getMenuItemUpdateMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const menuItemGetAll = (params?: MenuItemGetAllParams) => {
	return customInstance<CommonModelsPaginatedListOfMenuItemAdminDTO>({
		url: `/menuItem`,
		method: "GET",
		params,
	});
};

export const getMenuItemGetAllQueryKey = (params?: MenuItemGetAllParams) => {
	return [`/menuItem`, ...(params ? [params] : [])] as const;
};

export const getMenuItemGetAllQueryOptions = <
	TData = Awaited<ReturnType<typeof menuItemGetAll>>,
	TError = ErrorType<null | InternalErrorResponse>,
>(
	params?: MenuItemGetAllParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof menuItemGetAll>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMenuItemGetAllQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof menuItemGetAll>>> = () =>
		menuItemGetAll(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof menuItemGetAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MenuItemGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof menuItemGetAll>>>;
export type MenuItemGetAllQueryError = ErrorType<null | InternalErrorResponse>;

export function createMenuItemGetAll<
	TData = Awaited<ReturnType<typeof menuItemGetAll>>,
	TError = ErrorType<null | InternalErrorResponse>,
>(
	params?: MenuItemGetAllParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof menuItemGetAll>>, TError, TData>>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getMenuItemGetAllQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const menuItemCreate = (menuItemCreateRequest: BodyType<MenuItemCreateRequest>) => {
	return customInstance<EntitiesMenuItem>({
		url: `/menuItem`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: menuItemCreateRequest,
	});
};

export const getMenuItemCreateMutationOptions = <
	TError = ErrorType<null | null | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof menuItemCreate>>,
		TError,
		{ data: BodyType<MenuItemCreateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof menuItemCreate>>,
	TError,
	{ data: BodyType<MenuItemCreateRequest> },
	TContext
> => {
	const mutationKey = ["menuItemCreate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof menuItemCreate>>,
		{ data: BodyType<MenuItemCreateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return menuItemCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type MenuItemCreateMutationResult = NonNullable<Awaited<ReturnType<typeof menuItemCreate>>>;
export type MenuItemCreateMutationBody = BodyType<MenuItemCreateRequest>;
export type MenuItemCreateMutationError = ErrorType<null | null | InternalErrorResponse>;

export const createMenuItemCreate = <
	TError = ErrorType<null | null | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof menuItemCreate>>,
			TError,
			{ data: BodyType<MenuItemCreateRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof menuItemCreate>>,
	TError,
	{ data: BodyType<MenuItemCreateRequest> },
	TContext
> => {
	const mutationOptions = getMenuItemCreateMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const menuItemDelete = (id: number) => {
	return customInstance<EntitiesMenuSection>({ url: `/menuItem/${id}`, method: "DELETE" });
};

export const getMenuItemDeleteMutationOptions = <
	TError = ErrorType<ErrorResponse | null | null | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof menuItemDelete>>,
		TError,
		{ id: number },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof menuItemDelete>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationKey = ["menuItemDelete"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof menuItemDelete>>, { id: number }> = (
		props
	) => {
		const { id } = props ?? {};

		return menuItemDelete(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type MenuItemDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof menuItemDelete>>>;

export type MenuItemDeleteMutationError = ErrorType<
	ErrorResponse | null | null | InternalErrorResponse
>;

export const createMenuItemDelete = <
	TError = ErrorType<ErrorResponse | null | null | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof menuItemDelete>>,
			TError,
			{ id: number },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof menuItemDelete>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationOptions = getMenuItemDeleteMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
