// @ts-nocheck
/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	MutationFunction,
} from "@tanstack/svelte-query";
import type {
	InternalErrorResponse,
	NotificationTestRequest,
	NotificationUserRequest,
} from "./api.schemas";
import { useCustomClient } from "../mutator/useCustomClient";
import type { ErrorType, BodyType } from "../mutator/useCustomClient";

export const useNotificationUserHook = () => {
	const notificationUser = useCustomClient<boolean>();

	return (notificationUserRequest: BodyType<NotificationUserRequest>) => {
		return notificationUser({
			url: `/notification/user`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: notificationUserRequest,
		});
	};
};

export const useNotificationUserMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useNotificationUserHook>>>,
		TError,
		{ data: BodyType<NotificationUserRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useNotificationUserHook>>>,
	TError,
	{ data: BodyType<NotificationUserRequest> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const notificationUser = useNotificationUserHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useNotificationUserHook>>>,
		{ data: BodyType<NotificationUserRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return notificationUser(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type NotificationUserMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useNotificationUserHook>>>
>;
export type NotificationUserMutationBody = BodyType<NotificationUserRequest>;
export type NotificationUserMutationError = ErrorType<InternalErrorResponse>;

export const createNotificationUser = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useNotificationUserHook>>>,
		TError,
		{ data: BodyType<NotificationUserRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<ReturnType<typeof useNotificationUserHook>>>,
	TError,
	{ data: BodyType<NotificationUserRequest> },
	TContext
> => {
	const mutationOptions = useNotificationUserMutationOptions(options);

	return createMutation(mutationOptions);
};
export const useNotificationTestHook = () => {
	const notificationTest = useCustomClient<boolean>();

	return (notificationTestRequest: BodyType<NotificationTestRequest>) => {
		return notificationTest({
			url: `/notification/test`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: notificationTestRequest,
		});
	};
};

export const useNotificationTestMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useNotificationTestHook>>>,
		TError,
		{ data: BodyType<NotificationTestRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useNotificationTestHook>>>,
	TError,
	{ data: BodyType<NotificationTestRequest> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const notificationTest = useNotificationTestHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useNotificationTestHook>>>,
		{ data: BodyType<NotificationTestRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return notificationTest(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type NotificationTestMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useNotificationTestHook>>>
>;
export type NotificationTestMutationBody = BodyType<NotificationTestRequest>;
export type NotificationTestMutationError = ErrorType<InternalErrorResponse>;

export const createNotificationTest = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useNotificationTestHook>>>,
		TError,
		{ data: BodyType<NotificationTestRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<ReturnType<typeof useNotificationTestHook>>>,
	TError,
	{ data: BodyType<NotificationTestRequest> },
	TContext
> => {
	const mutationOptions = useNotificationTestMutationOptions(options);

	return createMutation(mutationOptions);
};
