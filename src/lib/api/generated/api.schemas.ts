// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
export type CashUpUserDetailParams = {
	cashUpUserId: number;
};

export type CashUpUserItemTypeParams = {
	isAuto: boolean;
};

export type ClockListParams = {
	outletId: number;
	statusId: number;
};

export type ManagerOrderViewParams = {
	roleIds?: string | null;
};

export type MenuGetItemGetMenuItemsParams = {
	id: number;
};

export type MenuGetItemsGetMenuItemsParams = {
	menuId: number;
	sectionId: number;
	search?: string | null;
};

export type MenuGetOutletMenuGetOutletMenusParams = {
	outletId: number;
};

export type MenuGetSectionsGetMenusSectionsParams = {
	menuId: number;
	sectionId: number;
};

export type MenuListParams = {
	outletId: number;
};

export type MenuItemGetAllParams = {
	sorts?: string | null;
	filters?: string | null;
	page?: number | null;
	pageSize?: number | null;
};

export type PayGetLinkParams = {
	amount: number;
	tableBookingId: number;
};

export type SalesPeriodCashUpParams = {
	salesPeriodId: number;
	userId: string;
};

export type SalesPeriodCreateCashUpParams = {
	cashUpTotal: number;
	tableCount: number;
	cashUpBalance: number;
	cashUpTotalPayments: number;
	salesPeriodId: number;
	userId: string;
	signOffUserId: string;
	signOffDate?: string | null;
};

export type SectionListParams = {
	outletId: number;
};

export type StockGetAllGetMenuItemsParams = {
	outletId: number;
	sorts?: string | null;
	filters?: string | null;
	page?: number | null;
	pageSize?: number | null;
};

export type StockLocationGetAllParams = {
	outletId: number;
};

export type StockOrderGetAllParams = {
	outletId: number;
	sorts?: string | null;
	filters?: string | null;
	page?: number | null;
	pageSize?: number | null;
};

export type SupplierGetAllParams = {
	outletId: number;
};

export type TableGetAvailableParams = {
	outletId: number;
};

export type TableGetMyBookedParams = {
	outletId: number;
	myBooking: boolean;
};

export type TableBookingHistoryParams = {
	tableBookingId: number;
};

export type TableBookingHistoryUserParams = {
	cashUpUserId: number;
	tableBookingId: number;
	outletId: number;
};

export type TableBookingPeriodHistoryParams = {
	tableBookingId: number;
};

export type TableOrderGetBasketParams = {
	tableBookingId: number;
};

export type TableOrderGetBillParams = {
	tableBookingId: number;
};

export type TableOrderOfficeOrderBasedBackParams = {
	roleIds?: string | null;
	complete: boolean;
};

export type TableOrderBackOfficeParams = {
	roleIds?: string | null;
};

export type TableOrderFrontOfficeParams = {
	roleIds?: string | null;
};

export type UserGetRolesParams = {
	userId: string;
};

export type UserUnassignedUsersParams = {
	sorts?: string | null;
	filters?: string | null;
	page?: number | null;
	pageSize?: number | null;
};

export type UserUsersParams = {
	sorts?: string | null;
	filters?: string | null;
	page?: number | null;
	pageSize?: number | null;
};

export interface AdjustmentCreateRequest {
	tableBookingId: number;
	adjustmentTypeId: number;
	amount: number;
	/** @nullable */
	note?: string | null;
}

export interface AdjustmentGetAllRequest {
	[key: string]: unknown;
}

export interface GenerateRequest {
	prompt: string;
}

export interface ServicesAIUsageMetadata {
	promptTokenCount: number;
	totalTokenCount: number;
}

export interface ServicesAIPart {
	text: string;
}

export interface ServicesAIContent {
	parts: ServicesAIPart[];
	role: string;
}

export interface ServicesAICandidate {
	content: ServicesAIContent;
}

/**
 * @nullable
 */
export type ServicesAIGenerateResponseUsageMetadata = ServicesAIUsageMetadata | null;

export interface ServicesAIGenerateResponse {
	candidates: ServicesAICandidate[];
	/** @nullable */
	usageMetadata?: ServicesAIGenerateResponseUsageMetadata;
	modelVersion: string;
}

export interface BillDownloadBillRequest {
	[key: string]: unknown;
}

export interface BillEmailBillRequest {
	tableBookingId: number;
	email: string;
	name: string;
}

export interface BillPrintBillRequest {
	tableBookingId: number;
	printerId: number;
}

export interface BillWhatsappBillRequest {
	tableBookingId: number;
	name: string;
	/** @nullable */
	countryCode?: string | null;
	phoneNumber: string;
}

export interface BusinessCreateRequest {
	/**
	 * @minLength 1
	 */
	name: string;
}

export interface BusinessDeleteRequest {
	/**
	 * @minLength 1
	 */
	id: number;
}

export interface BusinessEditRequest {
	/**
	 * @minLength 1
	 */
	id: number;
	/**
	 * @minLength 1
	 */
	name: string;
}

export interface BusinessGetRequest {
	[key: string]: unknown;
}

export interface CashUpUserCloseRequest {
	outletId: number;
	userId: string;
}

export interface CashUpUserCreateRequest {
	cashUpUserId: number;
	userId: string;
	outletId: number;
	cashUpUserItemTypeId: number;
	value: number;
}

export interface CashUpUserDeleteRequest {
	[key: string]: unknown;
}

export interface CashUpUserDetailRequest {
	[key: string]: unknown;
}

/**
 * @nullable
 */
export type DTOCashUpUserItemTypeDTOCashupConfig = EntitiesCashUpConfig | null;

/**
 * @nullable
 */
export type DTOCashUpUserItemTypeDTOAdjustmentType = EntitiesAdjustmentType | null;

/**
 * @nullable
 */
export type DTOCashUpUserItemTypeDTOPaymentType = EntitiesPaymentType | null;

export interface DTOCashUpUserItemTypeDTO {
	id: number;
	itemType: string;
	outletId: number;
	isAuto: boolean;
	affectsGrossBalance: boolean;
	position: number;
	cashUpUserItemRule: CommonEnumsCashUpUserItemRule;
	/** @nullable */
	paymentTypeId?: number | null;
	/** @nullable */
	paymentType?: DTOCashUpUserItemTypeDTOPaymentType;
	/** @nullable */
	adjustmentTypeId?: number | null;
	/** @nullable */
	adjustmentType?: DTOCashUpUserItemTypeDTOAdjustmentType;
	/** @nullable */
	cashupConfigId?: number | null;
	/** @nullable */
	cashupConfig?: DTOCashUpUserItemTypeDTOCashupConfig;
}

/**
 * @nullable
 */
export type DTOCashUpUserItemDTOCashUpUserItemType = DTOCashUpUserItemTypeDTO | null;

export interface DTOCashUpUserItemDTO {
	id: number;
	cashUpUserId: number;
	userId: string;
	outletId: number;
	cashUpUserItemTypeId: number;
	/** @nullable */
	cashUpUserItemType?: DTOCashUpUserItemDTOCashUpUserItemType;
	value: number;
}

export interface CashUpUserDetailResponse {
	userId: string;
	user: DTOUserDTO;
	cashUpUserId: number;
	cashUpUserItems: DTOCashUpUserItemDTO[];
	openingBalance: number;
	grossBalance: number;
	netBalance: number;
	isCashedUp: boolean;
}

export interface CashUpUserGetRequest {
	[key: string]: unknown;
}

export interface CashUpUserGetItems {
	userId: string;
	user: EntitiesUser;
	sales: number;
	tips: number;
	payments: number;
	openTableCount: number;
	cashUpUserId: number;
}

export interface CashUpUserGetResponse {
	items: CashUpUserGetItems[];
	totalSales: number;
	totalTips: number;
	totalPayments: number;
}

export interface CashUpUserItemTypeRequest {
	[key: string]: unknown;
}

export interface ClockClockInRequest {
	outletId: number;
}

export interface ClockClockOutRequest {
	outletId: number;
}

export interface EntitiesClock {
	id: number;
	userId: string;
	user: EntitiesUser;
	startDate: string;
	/** @nullable */
	endDate?: string | null;
	outletId: number;
	outlet: EntitiesOutlet;
}

export interface ClockListRequest {
	[key: string]: unknown;
}

export interface ExtraCreateRequest {
	name: string;
	positionId: number;
	price: number;
	extraGroupId: number;
	outletId: number;
}

export interface ExtraDeleteRequest {
	[key: string]: unknown;
}

export interface DTOExtraGroupAdminDTO {
	extraGroupId: number;
	name: string;
	isGlobal: boolean;
}

export interface ExtraGroupCreateRequest {
	name: string;
	isGlobal: boolean;
}

export interface ExtraGroupDeleteRequest {
	[key: string]: unknown;
}

export interface ExtraGroupUpdateRequest {
	extraGroupId: number;
	isGlobal: boolean;
	name: string;
}

export interface ExtraItemsRequest {
	[key: string]: unknown;
}

export interface ExtraUpdateRequest {
	extraId: number;
	name: string;
	positionId: number;
	price: number;
	extraGroupId: number;
	outletId: number;
}

export interface ManagerOrderViewRequest {
	[key: string]: unknown;
}

export interface ManagerOrderViewOrderItemStatusDTO {
	orderItemStatusId: number;
	status: string;
}

export interface ManagerOrderViewMenuItemDTO {
	menuItemId: number;
	name: string;
	description: string;
	price: number;
	position: number;
	/** @nullable */
	divisionId?: number | null;
}

export interface ManagerOrderViewOrderItemDTO {
	orderItemId: number;
	tableBookingId: number;
	menuItem: ManagerOrderViewMenuItemDTO;
	divisionId: number;
	/** @nullable */
	note?: string | null;
	orderReceived: string;
	orderUpdated: string;
	orderReceivedFormatted: string;
	orderUpdatedFormatted: string;
	orderItemStatusId: number;
	orderItemStatus: ManagerOrderViewOrderItemStatusDTO;
	/** @nullable */
	orderItemOptions?: DTOOrderItemOptionDTO[] | null;
	/** @nullable */
	orderItemExtras?: DTOOrderItemExtraDTO[] | null;
}

export interface ManagerOrderViewTableBookingDTO {
	id: number;
	tableId: number;
	table: ManagerOrderViewTableDTO;
	/** @nullable */
	orderItems?: ManagerOrderViewOrderItemDTO[] | null;
	bookingName: string;
	bookingDate: string;
	/** @nullable */
	closeDate?: string | null;
	user: DTOUserDTO;
}

export interface ManagerOrderViewResponse {
	divisionId: number;
	division: EntitiesDivision;
	/** @nullable */
	tables?: ManagerOrderViewTableBookingDTO[] | null;
	lastRefresh: string;
	pendingTables: number;
	pendingItems: number;
}

export interface MenuCreateRequest {
	outletId: number;
	name: string;
	position: number;
}

export interface MenuDeleteRequest {
	[key: string]: unknown;
}

export interface MenuGetRequest {
	[key: string]: unknown;
}

export interface MenuListRequest {
	[key: string]: unknown;
}

export interface MenuGetItemRequest {
	[key: string]: unknown;
}

export interface DTOMenuItemDTO {
	menuItemId: number;
	menuSectionId: number;
	name: string;
	description: string;
	price: number;
	position: number;
	/** @nullable */
	tags?: EntitiesTag[] | null;
	divisionId: number;
	menuItemOptionGroups: DTOMenuItemOptionGroupDTO[];
	menuItemExtraGroups: DTOMenuItemExtraGroupDTO[];
}

export interface MenuGetItemsRequest {
	[key: string]: unknown;
}

export interface DTOMenuSectionBasicDTO {
	menuSectionId: number;
	/** @nullable */
	name?: string | null;
}

export interface DTOMenuItemDTOBasic {
	menuItemId: number;
	menuSectionId: number;
	name: string;
	description: string;
	price: number;
	position: number;
	/** @nullable */
	tags?: EntitiesTag[] | null;
	menuSection: DTOMenuSectionBasicDTO;
	isAvailable: boolean;
	isEnabled: boolean;
}

export interface MenuGetOutletMenuRequest {
	[key: string]: unknown;
}

export interface MenuGetSectionsRequest {
	[key: string]: unknown;
}

export interface DTOMenuSectionParentDTO {
	menuSectionId: number;
	/** @nullable */
	name?: string | null;
	menuId: number;
	/** @nullable */
	parentId?: number | null;
}

/**
 * @nullable
 */
export type DTOMenuSectionDTOParent = DTOMenuSectionParentDTO | null;

export interface DTOMenuSectionDTO {
	menuSectionId: number;
	name: string;
	menuId: number;
	/** @nullable */
	parentId?: number | null;
	/** @nullable */
	parent?: DTOMenuSectionDTOParent;
	/** @nullable */
	positionId?: number | null;
}

export interface MenuGetSectionsResponse {
	/** @nullable */
	sections?: DTOMenuSectionDTO[] | null;
	/** @nullable */
	parents?: DTOMenuSectionDTO[] | null;
}

export interface MenuSectionsCreateRequest {
	name: string;
	menuId: number;
	/** @nullable */
	positionId?: number | null;
}

export interface MenuSectionsDeleteRequest {
	[key: string]: unknown;
}

export interface MenuSectionsUpdateRequest {
	id: number;
	name: string;
	/** @nullable */
	positionId?: number | null;
}

export interface MenuUpdateRequest {
	/**
	 * @minimum 0
	 * @exclusiveMinimum
	 */
	id: number;
	/**
	 * @minLength 1
	 */
	name: string;
	position: number;
}

export interface MenuItemCreateRequest {
	menuSectionId: number;
	name: string;
	description: string;
	price: number;
	positionId: number;
	/** @nullable */
	divisionId?: number | null;
	isAvailable: boolean;
	isEnabled: boolean;
	/** @nullable */
	extraGroupIds?: number[] | null;
	/** @nullable */
	optionGroupIds?: number[] | null;
}

export interface MenuItemDeleteRequest {
	[key: string]: unknown;
}

export type MenuItemGetAllRequestAllOf = { [key: string]: unknown };

export type MenuItemGetAllRequest = CommonModelsQueryModel & MenuItemGetAllRequestAllOf;

export interface DTOExtraGroupDTO {
	extraGroupId: number;
	name: string;
	extras: DTOExtraDTO[];
}

export interface DTOMenuItemExtraGroupDTO {
	menuItemId: number;
	extraGroupId: number;
	extraGroup: DTOExtraGroupDTO;
}

export interface DTOOptionGroupDTO {
	optionGroupId: number;
	name: string;
	minSelections: number;
	maxSelections: number;
	options: DTOOptionDTO[];
}

export interface DTOMenuItemOptionGroupDTO {
	menuItemId: number;
	optionGroupId: number;
	optionGroup: DTOOptionGroupDTO;
}

export interface MenuItemMenuAdminDTO {
	id: number;
	name: string;
	outletId: number;
	position: number;
}

export interface MenuItemMenuSectionAdminDTO {
	menuSectionId: number;
	/** @nullable */
	name?: string | null;
	menuId: number;
	menu: MenuItemMenuAdminDTO;
}

export interface MenuItemMenuItemAdminDTO {
	menuItemId: number;
	menuId: number;
	menuSectionId: number;
	menuSection: MenuItemMenuSectionAdminDTO;
	name: string;
	description: string;
	price: number;
	position: number;
	divisionId: number;
	menuItemOptionGroups: DTOMenuItemOptionGroupDTO[];
	menuItemExtraGroups: DTOMenuItemExtraGroupDTO[];
	isAvailable: boolean;
	isEnabled: boolean;
	stockPrice: number;
}

export interface CommonModelsPaginatedListOfMenuItemAdminDTO {
	items: MenuItemMenuItemAdminDTO[];
	pageNumber: number;
	totalPages: number;
	totalCount: number;
	hasPreviousPage: boolean;
	hasNextPage: boolean;
}

export interface MenuItemUpdateRequest {
	id: number;
	menuSectionId: number;
	name: string;
	description: string;
	price: number;
	positionId: number;
	/** @nullable */
	divisionId?: number | null;
	isAvailable: boolean;
	isEnabled: boolean;
	/** @nullable */
	extraGroupIds?: number[] | null;
	/** @nullable */
	optionGroupIds?: number[] | null;
}

export interface NotificationAddUserRequest {
	token: string;
}

export interface NotificationTestRequest {
	message: string;
}

export interface NotificationTestNewRequest {
	title: string;
	body: string;
	userId: string;
}

export interface NotificationUserRequest {
	message: string;
	userId: string;
}

export interface OptionCreateRequest {
	name: string;
	positionId: number;
	price: number;
	optionGroupId: number;
	outletId: number;
}

export interface OptionDeleteRequest {
	[key: string]: unknown;
}

export interface OptionGroupCreateRequest {
	name: string;
	minSelections: number;
	maxSelections: number;
	outletId: number;
}

export interface OptionGroupDeleteRequest {
	[key: string]: unknown;
}

export interface OptionGroupUpdateRequest {
	optionGroupId: number;
	name: string;
	minSelections: number;
	maxSelections: number;
}

export interface OptionItemsRequest {
	[key: string]: unknown;
}

export interface OptionUpdateRequest {
	optionId: number;
	name: string;
	positionId: number;
	price: number;
	optionGroupId: number;
}

export interface OutletCreateRequest {
	/**
	 * @minLength 1
	 */
	name: string;
	businessId: number;
}

export interface OutletGetRequest {
	[key: string]: unknown;
}

export interface OutletGetPaymentTypeRequest {
	[key: string]: unknown;
}

export interface OutletUpdateRequest {
	/**
	 * @minLength 1
	 */
	name: string;
	businessId: number;
}

export interface PayCheckRequest {
	tableBookingId: number;
}

export interface PayCheckResponse {
	checked: number;
}

export interface PayGetLinkRequest {
	[key: string]: unknown;
}

export interface PayGetLinkResponse {
	url: string;
	reference: string;
}

/**
 * @nullable
 */
export type CommonWrapperResultOfResponseAllOfValue = PayGetLinkResponse | null;

export type CommonWrapperResultOfResponseAllOf = {
	/** @nullable */
	value?: CommonWrapperResultOfResponseAllOfValue;
};

export type CommonWrapperResultOfResponse = CommonWrapperResult &
	CommonWrapperResultOfResponseAllOf;

export interface PayManualPaymentRequest {
	paymentTypeId: number;
	tableBookingId: number;
	amount: number;
}

export interface PayPayConfigCreateRequest {
	outletId: number;
	/**
	 * @minLength 1
	 */
	xApiKey: string;
	merchantId: string;
}

export interface PayPayConfigDeleteRequest {
	[key: string]: unknown;
}

export interface PayPayConfigGetRequest {
	[key: string]: unknown;
}

export type EntitiesHaloConfigAllOf = {
	id: number;
	outletId: number;
	xApiKey: string;
	merchantId: string;
	isEnabled: boolean;
	iv: string;
};

export type EntitiesHaloConfig = EntitiesAuditableEntity & EntitiesHaloConfigAllOf;

export interface PayPayConfigSetActiveRequest {
	/**
	 * @minimum 0
	 * @exclusiveMinimum
	 */
	id: number;
	outletId: number;
	isEnabled: boolean;
}

export interface PayPayConfigTestConfigRequest {
	id: number;
}

export interface PayStatusRequest {
	[key: string]: unknown;
}

export interface CommonWrapperResult {
	success: boolean;
	error: string;
	failure: boolean;
}

export interface PayDtoStatusResultDto {
	qrCodeState: string;
	transactionId: string;
	merchantTransactionReference: string;
	userId: string;
	status: string;
	disposition: string;
	amount: number;
	currency: string;
	type: string;
	responseCode: number;
	authorisationCode: string;
	createdAt: string;
	updatedAt: string;
	paymentReference: string;
	currencyCode: string;
}

/**
 * @nullable
 */
export type CommonWrapperResultOfStatusResultDtoAllOfValue = PayDtoStatusResultDto | null;

export type CommonWrapperResultOfStatusResultDtoAllOf = {
	/** @nullable */
	value?: CommonWrapperResultOfStatusResultDtoAllOfValue;
};

export type CommonWrapperResultOfStatusResultDto = CommonWrapperResult &
	CommonWrapperResultOfStatusResultDtoAllOf;

export interface PrinterCreateRequest {
	/**
	 * @minLength 1
	 */
	outletId: number;
	deviceId: number;
	printerName: string;
	ipAddress: string;
	port: number;
	lineCharacters: number;
}

export interface PrinterDeleteRequest {
	[key: string]: unknown;
}

export interface PrinterEditRequest {
	/**
	 * @minLength 1
	 */
	id: number;
	printerName: string;
	ipAddress: string;
	port: number;
	lineCharacters: number;
	isEnabled: boolean;
	deviceId: number;
}

export interface PrinterListRequest {
	[key: string]: unknown;
}

export interface DTOPrinterDTO {
	id: number;
	outletId: number;
	deviceId: number;
	printerName: string;
	ipAddress: string;
	port: number;
	lineCharacters: number;
	isEnabled: boolean;
}

export interface PrinterTestRequest {
	/**
	 * @minLength 1
	 */
	printerId: number;
}

export interface EntitiesRole {
	roleId: number;
	name: string;
	description: string;
	isFrontLine: boolean;
	isBackOffice: boolean;
	/** @nullable */
	outletId?: number | null;
}

export interface RoleCreateRequest {
	name: string;
	description: string;
}

export interface SalesPeriodCashUpRequest {
	[key: string]: unknown;
}

export interface SalesPeriodCashUpBillMenuItemDTO {
	menuItemId: number;
	name: string;
	price: number;
}

export interface SalesPeriodCashUpBillOrderItemDTO {
	orderItemId: number;
	tableBookingId: number;
	tableBooking: DTOTableBookingDTO;
	menuItemId: number;
	menuItem: SalesPeriodCashUpBillMenuItemDTO;
	/** @nullable */
	orderItemOptions?: DTOOrderItemOptionDTO[] | null;
	/** @nullable */
	orderItemExtras?: DTOOrderItemExtraDTO[] | null;
	userId: string;
	/** @nullable */
	note?: string | null;
}

/**
 * @nullable
 */
export type SalesPeriodCashUpTableCashUpUser = DTOUserDTO | null;

export interface SalesPeriodCashUpTableCashUp {
	orderItems: SalesPeriodCashUpBillOrderItemDTO[];
	total: number;
	paymentsReceived: EntitiesPayment[];
	tablePaymentTotal: number;
	balance: number;
	/** @nullable */
	userId?: string | null;
	/** @nullable */
	user?: SalesPeriodCashUpTableCashUpUser;
}

export interface SalesPeriodCashUpUserCashUp {
	tableCashUps: SalesPeriodCashUpTableCashUp[];
	userId: string;
	user: DTOUserDTO;
	userTotal: number;
	userBalance: number;
	userPaymentTotal: number;
	userTipTotal: number;
	tableTurnaroundTime: string;
}

export type SalesPeriodCashUpCashUpAllOf = {
	userCashUps: SalesPeriodCashUpUserCashUp[];
};

export type SalesPeriodCashUpCashUp = EntitiesCashUp & SalesPeriodCashUpCashUpAllOf;

export interface SalesPeriodCloseRequest {
	salesPeriodId: number;
}

export interface SalesPeriodCreateRequest {
	/**
	 * @minLength 1
	 */
	name: string;
	outletId: number;
}

export interface SalesPeriodCreateCashUpRequest {
	[key: string]: unknown;
}

export interface EntitiesCashUp {
	id: number;
	cashUpTotal: number;
	tableCount: number;
	openTableCount: number;
	cashUpBalance: number;
	cashUpTotalPayments: number;
	salesPeriodId: number;
	salesPeriod: EntitiesSalesPeriod;
	userId: string;
	signOffUserId: string;
	/** @nullable */
	signOffDate?: string | null;
}

export interface SalesPeriodGetRequest {
	[key: string]: unknown;
}

export interface SectionCreateRequest {
	/**
	 * @minLength 1
	 */
	name: string;
	outletId: number;
}

export interface SectionGetRequest {
	[key: string]: unknown;
}

export interface SectionListRequest {
	[key: string]: unknown;
}

export interface SectionUpdateRequest {
	/**
	 * @minimum 0
	 * @exclusiveMinimum
	 */
	id: number;
	/**
	 * @minLength 1
	 */
	name: string;
}

export type StockGetAllRequestAllOf = { [key: string]: unknown };

export type StockGetAllRequest = CommonModelsQueryModel & StockGetAllRequestAllOf;

export interface DTOStockLocationDTO {
	id: number;
	name: string;
	addressId: number;
	outletId: number;
}

export interface DTOStockItemDTO {
	stockLocation: DTOStockLocationDTO;
	threshold: number;
	actual: number;
}

export interface DTOUnitDTO {
	id: number;
	name: string;
}

export interface DTOStockDTO {
	id: number;
	outletId: number;
	name: string;
	unitId: number;
	unit: DTOUnitDTO;
	stockCategoryId: number;
	/** @nullable */
	stockItems?: DTOStockItemDTO[] | null;
	totalActual: number;
}

export interface CommonModelsPaginatedListOfStockDTO {
	items: DTOStockDTO[];
	pageNumber: number;
	totalPages: number;
	totalCount: number;
	hasPreviousPage: boolean;
	hasNextPage: boolean;
}

export interface StockLocationGetAllRequest {
	[key: string]: unknown;
}

export interface StockOrderCreateRequest {
	outletId: number;
	orderNumber: string;
	stockLocationId: number;
	supplierId: number;
}

export interface StockOrderDeleteRequest {
	[key: string]: unknown;
}

export type StockOrderGetAllRequestAllOf = { [key: string]: unknown };

export type StockOrderGetAllRequest = CommonModelsQueryModel & StockOrderGetAllRequestAllOf;

export interface CommonModelsPaginatedListOfStockOrder {
	items: EntitiesStockOrder[];
	pageNumber: number;
	totalPages: number;
	totalCount: number;
	hasPreviousPage: boolean;
	hasNextPage: boolean;
}

export interface StockOrderUpdateRequest {
	/**
	 * @minimum 0
	 * @exclusiveMinimum
	 */
	id: number;
	orderNumber: string;
	stockLocationId: number;
	supplierId: number;
}

export interface EntitiesStockCategory {
	id: number;
	name: string;
}

export interface EntitiesUnit {
	id: number;
	name: string;
}

export interface EntitiesStockItem {
	stockId: number;
	stock: EntitiesStock;
	stockLocationId: number;
	stockLocation: EntitiesStockLocation;
	threshold: number;
	actual: number;
}

export type EntitiesStockAllOf = {
	id: number;
	outletId: number;
	name: string;
	unitId: number;
	unit: EntitiesUnit;
	stockCategoryId: number;
	stockCategory: EntitiesStockCategory;
	/** @nullable */
	stockItems?: EntitiesStockItem[] | null;
};

export type EntitiesStock = EntitiesAuditableEntity & EntitiesStockAllOf;

export type EntitiesStockOrderItemAllOf = {
	stockOrderId: number;
	stockOrder: EntitiesStockOrder;
	stockItemId: number;
	stockItem: EntitiesStockItem;
	orderNumber: string;
	actual: number;
	price: number;
};

export type EntitiesStockOrderItem = EntitiesAuditableEntity & EntitiesStockOrderItemAllOf;

export type EntitiesStockOrderStatusAllOf = {
	id: number;
	name: string;
};

export type EntitiesStockOrderStatus = EntitiesAuditableEntity & EntitiesStockOrderStatusAllOf;

export type EntitiesStockOrder = EntitiesAuditableEntity & EntitiesStockOrderAllOf;

export interface SupplierGetAllRequest {
	[key: string]: unknown;
}

export interface EntitiesSupplierPlatform {
	id: number;
	name: string;
	/** @nullable */
	url?: string | null;
}

export interface EntitiesAddress {
	id: number;
	name: string;
	houseNr: string;
	streetName: string;
	suburb: string;
	province: string;
	postalCode: string;
}

export interface EntitiesStockLocation {
	id: number;
	name: string;
	addressId: number;
	address: EntitiesAddress;
	outletId: number;
	outlet: EntitiesOutlet;
}

/**
 * @nullable
 */
export type EntitiesSupplierSupplierPlatform = EntitiesSupplierPlatform | null;

export interface EntitiesSupplier {
	id: number;
	outletId: number;
	name: string;
	contactName: string;
	contactNumber: string;
	email: string;
	stockLocationId: number;
	stockLocation: EntitiesStockLocation;
	/** @nullable */
	supplierPlatformId?: number | null;
	/** @nullable */
	supplierPlatform?: EntitiesSupplierSupplierPlatform;
}

export type EntitiesStockOrderAllOf = {
	id: number;
	outletId: number;
	orderNumber: string;
	stockOrderStatusId: number;
	stockOrderStatus: EntitiesStockOrderStatus;
	stockLocationId: number;
	stockLocation: EntitiesStockLocation;
	orderDate: string;
	supplierId: number;
	supplier: EntitiesSupplier;
	/** @nullable */
	stockOrderItems?: EntitiesStockOrderItem[] | null;
};

export interface TableCreateRequest {
	/**
	 * @minLength 1
	 */
	name: string;
	sectionId: number;
	capacity: number;
}

export interface TableGetAvailableRequest {
	[key: string]: unknown;
}

export interface TableGetAvailableSectionDto {
	id: number;
	name: string;
}

export interface TableGetAvailableResponse {
	tableId: number;
	name: string;
	capacity: number;
	sectionId: number;
	section: TableGetAvailableSectionDto;
}

export interface TableGetMyBookedRequest {
	[key: string]: unknown;
}

export interface TableGetMyBookedSectionDto {
	id: number;
	name: string;
}

export interface TableGetMyBookedTableDto {
	tableId: number;
	name: string;
	section: TableGetMyBookedSectionDto;
}

export interface TableGetMyBookedResponse {
	id: number;
	tableId: number;
	bookingName: string;
	bookingDate: string;
	salesPeriodId: number;
	staffId: number;
	table: TableGetMyBookedTableDto;
	user: DTOUserDTO;
}

export interface TableUpdateRequest {
	/**
	 * @minLength 1
	 */
	name: string;
	sectionId: number;
	capacity: number;
}

export interface TableBookingCloseRequest {
	tableBookingId: number;
}

export interface TableBookingCreateRequest {
	/**
	 * @minimum 0
	 * @exclusiveMinimum
	 */
	tableId: number;
	/**
	 * @minLength 1
	 */
	bookingName: string;
	/**
	 * @minimum 0
	 * @exclusiveMinimum
	 */
	salesPeriodId: number;
}

export interface TableBookingGetRequest {
	[key: string]: unknown;
}

export interface TableBookingGetResponse {
	id: number;
	tableId: number;
	table: ManagerOrderViewTableDTO;
	bookingName: string;
	bookingDate: string;
	/** @nullable */
	closeDate?: string | null;
	salesPeriodId: number;
	userId: string;
	user: DTOUserDTO;
}

export interface TableBookingHistoryRequest {
	[key: string]: unknown;
}

export interface TableBookingHistoryUserRequest {
	[key: string]: unknown;
}

export interface TableBookingPaymentEditRequest {
	paymentId: number;
	paymentTypeId: number;
	amount: number;
}

export interface TableBookingPeriodHistoryRequest {
	[key: string]: unknown;
}

export interface ManagerOrderViewSectionDTO {
	name: string;
}

/**
 * @nullable
 */
export type ManagerOrderViewTableDTOSection = ManagerOrderViewSectionDTO | null;

export interface ManagerOrderViewTableDTO {
	tableId: number;
	name: string;
	outletId: number;
	/** @nullable */
	section?: ManagerOrderViewTableDTOSection;
}

export interface TableBookingHistoryResponse {
	id: number;
	tableId: number;
	table: ManagerOrderViewTableDTO;
	bookingName: string;
	bookingDate: string;
	/** @nullable */
	closeDate?: string | null;
	salesPeriodId: number;
	total: number;
	user: DTOUserDTO;
}

export interface OrderAddItemsOrder {
	menuItemId: number;
	/** @nullable */
	optionIds?: number[] | null;
	/** @nullable */
	extraIds?: number[] | null;
	note: string;
	quantity: number;
}

export interface OrderAddItemsRequest {
	orders: OrderAddItemsOrder[];
	tableBookingId: number;
}

export interface OrderClearBasketRequest {
	tableBookingId: number;
}

export interface TableOrderCopyItemRequest {
	orderItemId: number;
}

export interface TableOrderCopyItemResponse {
	isSuccess: boolean;
}

export interface TableOrderGetBasketRequest {
	[key: string]: unknown;
}

export interface TableOrderGetBasketBillMenuItemDTO {
	menuItemId: number;
	name: string;
	price: number;
}

export interface TableOrderGetBasketBillOrderItemDTO {
	orderItemId: number;
	tableBookingId: number;
	tableBooking: DTOTableBookingDTO;
	menuItemId: number;
	quantity: number;
	menuItem: TableOrderGetBasketBillMenuItemDTO;
	/** @nullable */
	orderItemOptions?: DTOOrderItemOptionDTO[] | null;
	/** @nullable */
	orderItemExtras?: DTOOrderItemExtraDTO[] | null;
	/** @nullable */
	note?: string | null;
}

export interface TableOrderGetBasketResponse {
	orderItems: TableOrderGetBasketBillOrderItemDTO[];
	total: number;
}

export interface TableOrderGetBillRequest {
	[key: string]: unknown;
}

export interface EntitiesCashUpConfig {
	id: number;
	/** @nullable */
	name?: string | null;
	outletId: number;
	value: number;
}

export type CommonEnumsCashUpUserItemRule =
	(typeof CommonEnumsCashUpUserItemRule)[keyof typeof CommonEnumsCashUpUserItemRule];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommonEnumsCashUpUserItemRule = {
	None: 0,
	PaymentTotal: 1,
	PaymentTip: 2,
	PaymentLevy: 3,
	Adjustment: 4,
	Config: 5,
	SalesRevenue: 6,
	CardPaymentTotal: 7,
	CardTips: 8,
} as const;

/**
 * @nullable
 */
export type EntitiesCashUpUserItemTypeCashupConfig = EntitiesCashUpConfig | null;

/**
 * @nullable
 */
export type EntitiesCashUpUserItemTypeAdjustmentType = EntitiesAdjustmentType | null;

/**
 * @nullable
 */
export type EntitiesCashUpUserItemTypePaymentType = EntitiesPaymentType | null;

export interface EntitiesCashUpUserItemType {
	id: number;
	itemType: string;
	isAuto: boolean;
	affectsGrossBalance: boolean;
	position: number;
	cashUpUserItemRule: CommonEnumsCashUpUserItemRule;
	/** @nullable */
	paymentTypeId?: number | null;
	/** @nullable */
	paymentType?: EntitiesCashUpUserItemTypePaymentType;
	/** @nullable */
	adjustmentTypeId?: number | null;
	/** @nullable */
	adjustmentType?: EntitiesCashUpUserItemTypeAdjustmentType;
	/** @nullable */
	cashupConfigId?: number | null;
	/** @nullable */
	cashupConfig?: EntitiesCashUpUserItemTypeCashupConfig;
}

export interface EntitiesCashUpUser {
	id: number;
	userId: string;
	outletId: number;
	openingBalance: number;
	/** @nullable */
	closingBalance?: number | null;
	completerUserId: string;
	/** @nullable */
	cashUpDate?: string | null;
	cashUpUserItems: EntitiesCashUpUserItem[];
	salesPeriodId: number;
	sales: number;
	tips: number;
	payments: number;
}

export interface EntitiesCashUpUserItem {
	id: number;
	cashUpUserId: number;
	cashUpUser: EntitiesCashUpUser;
	userId: string;
	outletId: number;
	cashUpUserItemTypeId: number;
	cashUpUserItemType: EntitiesCashUpUserItemType;
	value: number;
}

export interface EntitiesAdjustmentType {
	adjustmentTypeId: number;
	name: string;
	/** @nullable */
	description?: string | null;
}

export interface EntitiesAdjustment {
	adjustmentId: number;
	adjustmentType: EntitiesAdjustmentType;
	adjustmentTypeId: number;
	created: string;
	userId: string;
	amount: number;
	/** @nullable */
	note?: string | null;
}

export interface EntitiesOrderItemStatus {
	orderItemStatusId: number;
	status: string;
	assignGroup: boolean;
	isFrontLine: boolean;
	isBackOffice: boolean;
	isComplete: boolean;
	isCancelled: boolean;
	isBillable: boolean;
	isHistory: boolean;
	notify: boolean;
	priority: number;
}

export interface EntitiesMenuItemExtraGroup {
	menuItemId: number;
	extraGroupId: number;
	menuItem: EntitiesMenuItem;
	extraGroup: EntitiesExtraGroup;
}

export interface EntitiesExtraGroup {
	extraGroupId: number;
	name: string;
	extras: EntitiesExtra[];
	/** @nullable */
	menuItemExtraGroups?: EntitiesMenuItemExtraGroup[] | null;
	outletId: number;
}

export interface EntitiesExtra {
	extraId: number;
	name: string;
	positionId: number;
	price: number;
	extraGroupId: number;
	extraGroup: EntitiesExtraGroup;
	/** @nullable */
	orderItemExtras?: EntitiesOrderItemExtra[] | null;
	outletId: number;
}

export interface EntitiesOrderItemExtra {
	orderItemExtraId: number;
	orderItemId: number;
	orderItem: EntitiesOrderItem;
	extraId: number;
	extra: EntitiesExtra;
}

export interface EntitiesOrderItemOption {
	orderItemOptionId: number;
	orderItemId: number;
	orderItem: EntitiesOrderItem;
	optionId: number;
	option: EntitiesOption;
}

export interface EntitiesMenuItemOptionGroup {
	menuItemId: number;
	optionGroupId: number;
	menuItem: EntitiesMenuItem;
	optionGroup: EntitiesOptionGroup;
}

export interface EntitiesOptionGroup {
	optionGroupId: number;
	name: string;
	minSelections: number;
	maxSelections: number;
	options: EntitiesOption[];
	/** @nullable */
	menuItemOptionGroups?: EntitiesMenuItemOptionGroup[] | null;
	outletId: number;
}

export interface EntitiesOption {
	optionId: number;
	name: string;
	price: number;
	positionId: number;
	optionGroupId: number;
	optionGroup: EntitiesOptionGroup;
	/** @nullable */
	orderItemOptions?: EntitiesOrderItemOption[] | null;
	outletId: number;
}

export interface EntitiesDivision {
	divisionId: number;
	divisionName: string;
	outletId: number;
	divisionTypeId: number;
}

export interface EntitiesTag {
	tagId: number;
	name: string;
}

export interface NpgsqlTypesNpgsqlTsVectorLexeme {
	text: string;
	count: number;
}

export type EntitiesMenuSection = EntitiesAuditableEntity & EntitiesMenuSectionAllOf;

export type EntitiesMenuAllOf = {
	id: number;
	name: string;
	outletId: number;
	position: number;
	outlet: EntitiesOutlet;
	/** @nullable */
	menuSections?: EntitiesMenuSection[] | null;
};

export type EntitiesMenu = EntitiesAuditableEntity & EntitiesMenuAllOf;

/**
 * @nullable
 */
export type EntitiesMenuSectionAllOfParent = EntitiesMenuSection | null;

export type EntitiesMenuItem = EntitiesAuditableEntity & EntitiesMenuItemAllOf;

export type EntitiesMenuSectionAllOf = {
	menuSectionId: number;
	name: string;
	menu: EntitiesMenu;
	menuId: number;
	/** @nullable */
	parent?: EntitiesMenuSectionAllOfParent;
	/** @nullable */
	parentId?: number | null;
	/** @nullable */
	positionId?: number | null;
	/** @nullable */
	subMenuSections?: EntitiesMenuSection[] | null;
	/** @nullable */
	menuItems?: EntitiesMenuItem[] | null;
};

/**
 * @nullable
 */
export type EntitiesMenuItemAllOfDivision = EntitiesDivision | null;

export type EntitiesMenuItemAllOf = {
	menuItemId: number;
	menuSection: EntitiesMenuSection;
	menuSectionId: number;
	name: string;
	description: string;
	price: number;
	searchVector: NpgsqlTypesNpgsqlTsVectorLexeme[];
	position: number;
	/** @nullable */
	tags?: EntitiesTag[] | null;
	/** @nullable */
	divisionId?: number | null;
	/** @nullable */
	division?: EntitiesMenuItemAllOfDivision;
	/** @nullable */
	menuItemOptionGroups?: EntitiesMenuItemOptionGroup[] | null;
	/** @nullable */
	menuItemExtraGroups?: EntitiesMenuItemExtraGroup[] | null;
	isAvailable: boolean;
	isEnabled: boolean;
	stockPrice: number;
};

/**
 * @nullable
 */
export type EntitiesOrderItemOrderGroup = EntitiesOrderGroup | null;

export interface EntitiesOrderItem {
	orderItemId: number;
	/** @nullable */
	orderGroupId?: number | null;
	/** @nullable */
	orderGroup?: EntitiesOrderItemOrderGroup;
	tableBookingId: number;
	tableBooking: EntitiesTableBooking;
	menuItemId: number;
	menuItem: EntitiesMenuItem;
	orderReceived: string;
	orderUpdated: string;
	/** @nullable */
	orderCompleted?: string | null;
	orderItemStatusId: number;
	orderItemStatus: EntitiesOrderItemStatus;
	/** @nullable */
	orderItemOptions?: EntitiesOrderItemOption[] | null;
	/** @nullable */
	orderItemExtras?: EntitiesOrderItemExtra[] | null;
	/** @nullable */
	note?: string | null;
}

export interface EntitiesOrderGroup {
	orderGroupId: number;
	/** @nullable */
	orderItems?: EntitiesOrderItem[] | null;
}

export interface EntitiesAuditableEntity {
	created: string;
	/** @nullable */
	createdBy?: string | null;
	/** @nullable */
	lastModified?: string | null;
	/** @nullable */
	lastModifiedBy?: string | null;
}

export type EntitiesUserAllOf = {
	userId: string;
	email: string;
	image: string;
	name: string;
	isActive: boolean;
};

export type EntitiesUser = EntitiesAuditableEntity & EntitiesUserAllOf;

/**
 * @nullable
 */
export type EntitiesTableBookingCashUpUser = EntitiesCashUpUser | null;

export interface EntitiesPayment {
	id: number;
	paymentReference: string;
	tableBookingId: number;
	tableBooking: EntitiesTableBooking;
	amount: number;
	userId: string;
	/** @nullable */
	paymentTypeId?: number | null;
	paymentType: EntitiesPaymentType;
	dateReceived: string;
}

export interface EntitiesTableBooking {
	id: number;
	tableId: number;
	table: EntitiesTable;
	bookingName: string;
	bookingDate: string;
	/** @nullable */
	closeDate?: string | null;
	salesPeriodId: number;
	salesPeriod: EntitiesSalesPeriod;
	userId: string;
	user: EntitiesUser;
	/** @nullable */
	orderItems?: EntitiesOrderItem[] | null;
	/** @nullable */
	adjustments?: EntitiesAdjustment[] | null;
	/** @nullable */
	cashUpUserId?: number | null;
	/** @nullable */
	total?: number | null;
	/** @nullable */
	totalTips?: number | null;
	/** @nullable */
	totalPayments?: number | null;
	/** @nullable */
	cashUpUser?: EntitiesTableBookingCashUpUser;
	/** @nullable */
	payments?: EntitiesPayment[] | null;
}

export interface TableOrderGetBillBillMenuItemDTO {
	menuItemId: number;
	name: string;
	price: number;
}

export interface DTOTableBookingDTO {
	id: number;
	tableId: number;
	bookingName: string;
	bookingDate: string;
	/** @nullable */
	closeDate?: string | null;
	userId: string;
	user: DTOUserDTO;
}

export interface TableOrderGetBillBillOrderItemDTO {
	orderItemId: number;
	tableBookingId: number;
	tableBooking: DTOTableBookingDTO;
	menuItemId: number;
	menuItem: TableOrderGetBillBillMenuItemDTO;
	/** @nullable */
	orderItemOptions?: DTOOrderItemOptionDTO[] | null;
	/** @nullable */
	orderItemExtras?: DTOOrderItemExtraDTO[] | null;
	orderReceived: string;
	/** @nullable */
	note?: string | null;
}

export interface TableOrderGetBillResponse {
	orderItems: TableOrderGetBillBillOrderItemDTO[];
	total: number;
	totalExVAT: number;
	vat: number;
	paymentsReceived: EntitiesPayment[];
	balance: number;
	tipAmount: number;
	billDate: string;
	/** @nullable */
	adjustments?: EntitiesAdjustment[] | null;
	isCashedUp: boolean;
	/** @nullable */
	tableName?: string | null;
	/** @nullable */
	waiter?: string | null;
	isClosed: boolean;
}

export interface TableOrderOfficeOrderBasedBackRequest {
	[key: string]: unknown;
}

export interface TableOrderOfficeOrderBasedBackOrderItemStatusDTO {
	orderItemStatusId: number;
	status: string;
	priority: number;
}

export interface TableOrderOfficeOrderBasedBackMenuItemDTO {
	menuItemId: number;
	name: string;
	description: string;
	price: number;
	position: number;
	divisionId: number;
}

export interface TableOrderOfficeOrderBasedBackOrderItemDTO {
	orderItemId: number;
	/** @nullable */
	orderGroupId?: number | null;
	/** @nullable */
	tableBooking?: TableOrderOfficeOrderBasedBackOrderItemDTOTableBooking;
	tableBookingId: number;
	menuItem: TableOrderOfficeOrderBasedBackMenuItemDTO;
	divisionId: number;
	/** @nullable */
	note?: string | null;
	orderReceived: string;
	orderUpdated: string;
	orderReceivedFormatted: string;
	orderUpdatedFormatted: string;
	orderItemStatusId: number;
	orderItemStatus: TableOrderOfficeOrderBasedBackOrderItemStatusDTO;
	/** @nullable */
	orderItemOptions?: DTOOrderItemOptionDTO[] | null;
	/** @nullable */
	orderItemExtras?: DTOOrderItemExtraDTO[] | null;
}

export interface TableOrderOfficeOrderBasedBackSectionDTO {
	name: string;
}

/**
 * @nullable
 */
export type TableOrderOfficeOrderBasedBackTableDTOSection =
	TableOrderOfficeOrderBasedBackSectionDTO | null;

export interface TableOrderOfficeOrderBasedBackTableDTO {
	tableId: number;
	name: string;
	outletId: number;
	/** @nullable */
	section?: TableOrderOfficeOrderBasedBackTableDTOSection;
}

export interface TableOrderOfficeOrderBasedBackTableBookingDTO {
	id: number;
	tableId: number;
	table: TableOrderOfficeOrderBasedBackTableDTO;
	bookingName: string;
	bookingDate: string;
	/** @nullable */
	closeDate?: string | null;
	user: DTOUserDTO;
}

/**
 * @nullable
 */
export type TableOrderOfficeOrderBasedBackOrderItemDTOTableBooking =
	TableOrderOfficeOrderBasedBackTableBookingDTO | null;

/**
 * @nullable
 */
export type TableOrderOfficeOrderBasedBackOrderGroupDTOTableBooking =
	TableOrderOfficeOrderBasedBackTableBookingDTO | null;

export interface TableOrderOfficeOrderBasedBackOrderGroupDTO {
	orderGroupId: number;
	lastDate: string;
	priority: number;
	/** @nullable */
	tableBooking?: TableOrderOfficeOrderBasedBackOrderGroupDTOTableBooking;
	tableBookingId: number;
	/** @nullable */
	orderItems?: TableOrderOfficeOrderBasedBackOrderItemDTO[] | null;
}

export interface TableOrderOfficeOrderBasedBackResponse {
	/** @nullable */
	orderGroups?: TableOrderOfficeOrderBasedBackOrderGroupDTO[] | null;
	lastRefresh: string;
	pendingOrders: number;
	pendingItems: number;
}

export interface TableOrderBackOfficeRequest {
	[key: string]: unknown;
}

export interface TableOrderBackOfficeResponse {
	/** @nullable */
	tables?: TableOrderOfficeTableBookingDTO[] | null;
	lastRefresh: string;
	pendingTables: number;
	pendingItems: number;
}

export interface TableOrderFrontOfficeRequest {
	[key: string]: unknown;
}

export interface DTOUserDTO {
	userId: string;
	email: string;
	image: string;
	name: string;
	isActive: boolean;
}

export interface DTOExtraGroupBasicDTO {
	extraGroupId: number;
	name: string;
}

export interface DTOExtraDTO {
	extraId: number;
	name: string;
	positionId: number;
	price: number;
	extraGroupId: number;
	extraGroup: DTOExtraGroupBasicDTO;
}

export interface DTOOrderItemExtraDTO {
	orderItemExtraId: number;
	orderItemId: number;
	extraId: number;
	extra: DTOExtraDTO;
}

export interface DTOOptionGroupBasicDTO {
	optionGroupId: number;
	name: string;
	minSelections: number;
	maxSelections: number;
}

export interface DTOOptionDTO {
	optionId: number;
	name: string;
	price: number;
	positionId: number;
	optionGroupId: number;
	optionGroup: DTOOptionGroupBasicDTO;
}

export interface DTOOrderItemOptionDTO {
	orderItemOptionId: number;
	orderItemId: number;
	optionId: number;
	option: DTOOptionDTO;
}

export interface TableOrderOfficeOrderItemStatusDTO {
	orderItemStatusId: number;
	status: string;
}

export interface TableOrderOfficeMenuItemDTO {
	menuItemId: number;
	name: string;
	description: string;
	price: number;
	position: number;
	divisionId: number;
}

export interface TableOrderOfficeOrderItemDTO {
	orderItemId: number;
	tableBookingId: number;
	menuItem: TableOrderOfficeMenuItemDTO;
	divisionId: number;
	/** @nullable */
	note?: string | null;
	orderReceived: string;
	orderUpdated: string;
	orderReceivedFormatted: string;
	orderUpdatedFormatted: string;
	orderItemStatusId: number;
	orderItemStatus: TableOrderOfficeOrderItemStatusDTO;
	/** @nullable */
	orderItemOptions?: DTOOrderItemOptionDTO[] | null;
	/** @nullable */
	orderItemExtras?: DTOOrderItemExtraDTO[] | null;
}

export interface TableOrderOfficeSectionDTO {
	name: string;
}

/**
 * @nullable
 */
export type TableOrderOfficeTableDTOSection = TableOrderOfficeSectionDTO | null;

export interface TableOrderOfficeTableDTO {
	tableId: number;
	name: string;
	outletId: number;
	/** @nullable */
	section?: TableOrderOfficeTableDTOSection;
}

export interface TableOrderOfficeTableBookingDTO {
	id: number;
	tableId: number;
	table: TableOrderOfficeTableDTO;
	/** @nullable */
	orderItems?: TableOrderOfficeOrderItemDTO[] | null;
	bookingName: string;
	bookingDate: string;
	/** @nullable */
	closeDate?: string | null;
	user: DTOUserDTO;
}

export interface TableOrderFrontOfficeResponse {
	/** @nullable */
	tables?: TableOrderOfficeTableBookingDTO[] | null;
	lastRefresh: string;
	pendingTables: number;
	pendingItems: number;
}

export interface TableOrderRemoveItemRequest {
	orderItemId: number;
}

export interface TableOrderRemoveItemResponse {
	isSuccess: boolean;
}

export interface TableOrderSendToKitchenRequest {
	tableBookingId: number;
}

export interface TableOrderSendToKitchenResponse {
	isSuccess: boolean;
}

export interface TableOrderUpdateGroupOrderRequest {
	orderGroupId: number;
	orderItemStatusId: number;
	/** @nullable */
	roleIds?: string | null;
}

export interface TableOrderUpdateGroupOrderResponse {
	isSuccess: boolean;
}

export interface TableOrderUpdateOrderItemRequest {
	orderItemIds: number[];
	orderItemStatusId: number;
}

export interface TableOrderUpdateOrderItemResponse {
	isSuccess: boolean;
}

export interface TableOrderUpdateTableOrderRequest {
	tableBookingId: number;
	orderItemStatusId: number;
}

export interface TableOrderUpdateTableOrderResponse {
	isSuccess: boolean;
}

export interface BillTableTotal {
	total: number;
	totalPayments: number;
	tipTotal: number;
}

export interface UserAddUserOutletRoleRequest {
	userId: string;
	roleId: number;
}

export interface UserAssignOutletRequest {
	outletId: number;
}

export interface EntitiesUserOutlet {
	id: number;
	outletId: number;
	userId: string;
	isCurrent: boolean;
}

export interface UserGetRolesRequest {
	[key: string]: unknown;
}

export interface EntitiesOutletPaymentType {
	paymentTypeId: number;
	paymentType: EntitiesPaymentType;
	outletId: number;
	outlet: EntitiesOutlet;
	position: number;
}

export interface EntitiesPaymentType {
	paymentTypeId: number;
	paymentTypeName: string;
	tipLevyPercentage: number;
	discountPercentage: number;
	/** @nullable */
	outletPaymentTypes?: EntitiesOutletPaymentType[] | null;
	canEdit: boolean;
}

export type Order = (typeof Order)[keyof typeof Order];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Order = {
	Before: 0,
	After: 1,
} as const;

export interface EntitiesCustomer {
	customerId: number;
	name: string;
	orders: Order[];
}

export interface EntitiesOutlet {
	id: number;
	name: string;
	businessId: number;
	business: EntitiesBusiness;
	/** @nullable */
	sections?: EntitiesSection[] | null;
	vatNumber: string;
	/** @nullable */
	logo?: string | null;
	/** @nullable */
	outletPaymentTypes?: EntitiesOutletPaymentType[] | null;
	/** @nullable */
	address?: string | null;
	/** @nullable */
	company?: string | null;
	/** @nullable */
	registration?: string | null;
}

export interface EntitiesSection {
	id: number;
	name: string;
	outletId: number;
	outlet: EntitiesOutlet;
	/** @nullable */
	tables?: EntitiesTable[] | null;
}

export interface EntitiesTable {
	tableId: number;
	name: string;
	capacity: number;
	position: number;
	sectionId: number;
	section: EntitiesSection;
	customers: EntitiesCustomer[];
}

export interface EntitiesBusiness {
	id: number;
	name: string;
	/** @nullable */
	outlets?: EntitiesOutlet[] | null;
}

export interface EntitiesSalesPeriod {
	id: number;
	/** @nullable */
	name?: string | null;
	/** @nullable */
	startDate?: string | null;
	/** @nullable */
	endDate?: string | null;
	outlet: EntitiesOutlet;
	outletId: number;
}

/**
 * @nullable
 */
export type UserGetStatusResponseSalesPeriod = EntitiesSalesPeriod | null;

export interface UserGetStatusResponse {
	outletId: number;
	clockedIn: boolean;
	salesPeriodId: number;
	/** @nullable */
	salesPeriod?: UserGetStatusResponseSalesPeriod;
	roles: string[];
}

export interface UserRemoveUserOutletRequest {
	[key: string]: unknown;
}

export interface UserRemoveUserOutletRoleRequest {
	[key: string]: unknown;
}

export type ErrorResponseErrors = { [key: string]: string[] };

export interface ErrorResponse {
	statusCode: number;
	message: string;
	errors: ErrorResponseErrors;
}

export type UserUnassignedUsersRequestAllOf = { [key: string]: unknown };

export interface CommonModelsQueryModel {
	[key: string]: unknown;
}

export type UserUnassignedUsersRequest = CommonModelsQueryModel & UserUnassignedUsersRequestAllOf;

export type UserUsersRequestAllOf = { [key: string]: unknown };

export type UserUsersRequest = CommonModelsQueryModel & UserUsersRequestAllOf;

export interface UserUserResponse {
	isCurrent: boolean;
	userId: string;
	email: string;
	image: string;
	name: string;
	roles: string;
}

export interface CommonModelsPaginatedListOfUserResponse {
	items: UserUserResponse[];
	pageNumber: number;
	totalPages: number;
	totalCount: number;
	hasPreviousPage: boolean;
	hasNextPage: boolean;
}

export interface UserValidateRequest {
	userId: string;
	email: string;
	/** @nullable */
	image?: string | null;
	name: string;
}

export interface UserValidateResponse {
	userId: string;
}

export interface ServicesWhatsappQrResponse {
	success: boolean;
	qr: string;
}

export interface ServicesWhatsappResponse {
	success: boolean;
	message: string;
}

export interface InternalErrorResponse {
	status: string;
	code: number;
	reason: string;
	note: string;
}

export interface ServicesWhatsappStatus {
	success: boolean;
	state: string;
	message: string;
}
