// @ts-nocheck
/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateQueryOptions,
	CreateQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type { InternalErrorResponse, Request, Response, UserGetRolesParams } from "./api.schemas";
import { useCustomClient } from "../mutator/useCustomClient";
import type { ErrorType, BodyType } from "../mutator/useCustomClient";

export const useUserValidateHook = () => {
	const userValidate = useCustomClient<Response>();

	return (request: BodyType<Request>) => {
		return userValidate({
			url: `/user/validate`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: request,
		});
	};
};

export const useUserValidateMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useUserValidateHook>>>,
		TError,
		{ data: BodyType<Request> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useUserValidateHook>>>,
	TError,
	{ data: BodyType<Request> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const userValidate = useUserValidateHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useUserValidateHook>>>,
		{ data: BodyType<Request> }
	> = (props) => {
		const { data } = props ?? {};

		return userValidate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserValidateMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useUserValidateHook>>>
>;
export type UserValidateMutationBody = BodyType<Request>;
export type UserValidateMutationError = ErrorType<InternalErrorResponse>;

export const createUserValidate = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useUserValidateHook>>>,
		TError,
		{ data: BodyType<Request> },
		TContext
	>;
}) => {
	const mutationOptions = useUserValidateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const useUserGetRolesHook = () => {
	const userGetRoles = useCustomClient<string[]>();

	return (params: UserGetRolesParams) => {
		return userGetRoles({ url: `/user/getRoles`, method: "GET", params });
	};
};

export const getUserGetRolesQueryKey = (params: UserGetRolesParams) => {
	return [`/user/getRoles`, ...(params ? [params] : [])] as const;
};

export const useUserGetRolesQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useUserGetRolesHook>>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: UserGetRolesParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGetRolesHook>>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getUserGetRolesQueryKey(params);

	const userGetRoles = useUserGetRolesHook();

	const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUserGetRolesHook>>>> = () =>
		userGetRoles(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useUserGetRolesHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type UserGetRolesQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useUserGetRolesHook>>>
>;
export type UserGetRolesQueryError = ErrorType<InternalErrorResponse>;

export const createUserGetRoles = <
	TData = Awaited<ReturnType<ReturnType<typeof useUserGetRolesHook>>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: UserGetRolesParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGetRolesHook>>>, TError, TData>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useUserGetRolesQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};
