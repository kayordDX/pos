// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";

import type {
	CommonModelsPaginatedListOfResponse,
	CommonModelsPaginatedListOfUserResponse,
	EntitiesUserOutlet,
	ErrorResponse,
	InternalErrorResponse,
	UserAddUserOutletRoleRequest,
	UserApplyOutletRequest,
	UserAssignOutletRequest,
	UserGetCounterUsersParams,
	UserGetCounterUsersResponse,
	UserGetRolesParams,
	UserGetStatusResponse,
	UserLinkAccountRequest,
	UserLinkAccountResponse,
	UserPinCreateRequest,
	UserPinGetResponse,
	UserPinLoginRequest,
	UserPinLoginResponse,
	UserTasksParams,
	UserUnassignedUsersParams,
	UserUserResponse,
	UserUsersParams,
	UserUsersTypeParams,
	UserValidateRequest,
	UserValidateResponse,
} from "./api.schemas";

import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const userValidate = (userValidateRequest: BodyType<UserValidateRequest>) => {
	return customInstance<UserValidateResponse>({
		url: `/user/validate`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: userValidateRequest,
	});
};

export const getUserValidateMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof userValidate>>,
		TError,
		{ data: BodyType<UserValidateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof userValidate>>,
	TError,
	{ data: BodyType<UserValidateRequest> },
	TContext
> => {
	const mutationKey = ["userValidate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userValidate>>,
		{ data: BodyType<UserValidateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return userValidate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserValidateMutationResult = NonNullable<Awaited<ReturnType<typeof userValidate>>>;
export type UserValidateMutationBody = BodyType<UserValidateRequest>;
export type UserValidateMutationError = ErrorType<InternalErrorResponse>;

export const createUserValidate = <TError = ErrorType<InternalErrorResponse>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof userValidate>>,
			TError,
			{ data: BodyType<UserValidateRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof userValidate>>,
	TError,
	{ data: BodyType<UserValidateRequest> },
	TContext
> => {
	const mutationOptions = getUserValidateMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const userUsersType = (params: UserUsersTypeParams) => {
	return customInstance<UserUserResponse[]>({ url: `/user/typeList`, method: "GET", params });
};

export const getUserUsersTypeQueryKey = (params?: UserUsersTypeParams) => {
	return [`/user/typeList`, ...(params ? [params] : [])] as const;
};

export const getUserUsersTypeQueryOptions = <
	TData = Awaited<ReturnType<typeof userUsersType>>,
	TError = ErrorType<null | InternalErrorResponse>,
>(
	params: UserUsersTypeParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof userUsersType>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getUserUsersTypeQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof userUsersType>>> = () =>
		userUsersType(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof userUsersType>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserUsersTypeQueryResult = NonNullable<Awaited<ReturnType<typeof userUsersType>>>;
export type UserUsersTypeQueryError = ErrorType<null | InternalErrorResponse>;

export function createUserUsersType<
	TData = Awaited<ReturnType<typeof userUsersType>>,
	TError = ErrorType<null | InternalErrorResponse>,
>(
	params: UserUsersTypeParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof userUsersType>>, TError, TData>>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getUserUsersTypeQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const userUsers = (params?: UserUsersParams) => {
	return customInstance<CommonModelsPaginatedListOfUserResponse>({
		url: `/user/list`,
		method: "GET",
		params,
	});
};

export const getUserUsersQueryKey = (params?: UserUsersParams) => {
	return [`/user/list`, ...(params ? [params] : [])] as const;
};

export const getUserUsersQueryOptions = <
	TData = Awaited<ReturnType<typeof userUsers>>,
	TError = ErrorType<null | InternalErrorResponse>,
>(
	params?: UserUsersParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof userUsers>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getUserUsersQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof userUsers>>> = () => userUsers(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof userUsers>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserUsersQueryResult = NonNullable<Awaited<ReturnType<typeof userUsers>>>;
export type UserUsersQueryError = ErrorType<null | InternalErrorResponse>;

export function createUserUsers<
	TData = Awaited<ReturnType<typeof userUsers>>,
	TError = ErrorType<null | InternalErrorResponse>,
>(
	params?: UserUsersParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof userUsers>>, TError, TData>>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getUserUsersQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const userUnassignedUsers = (params?: UserUnassignedUsersParams) => {
	return customInstance<CommonModelsPaginatedListOfUserResponse>({
		url: `/user/unassigned`,
		method: "GET",
		params,
	});
};

export const getUserUnassignedUsersQueryKey = (params?: UserUnassignedUsersParams) => {
	return [`/user/unassigned`, ...(params ? [params] : [])] as const;
};

export const getUserUnassignedUsersQueryOptions = <
	TData = Awaited<ReturnType<typeof userUnassignedUsers>>,
	TError = ErrorType<null | InternalErrorResponse>,
>(
	params?: UserUnassignedUsersParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof userUnassignedUsers>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getUserUnassignedUsersQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof userUnassignedUsers>>> = () =>
		userUnassignedUsers(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof userUnassignedUsers>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserUnassignedUsersQueryResult = NonNullable<
	Awaited<ReturnType<typeof userUnassignedUsers>>
>;
export type UserUnassignedUsersQueryError = ErrorType<null | InternalErrorResponse>;

export function createUserUnassignedUsers<
	TData = Awaited<ReturnType<typeof userUnassignedUsers>>,
	TError = ErrorType<null | InternalErrorResponse>,
>(
	params?: UserUnassignedUsersParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof userUnassignedUsers>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getUserUnassignedUsersQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const userTasks = (params?: UserTasksParams) => {
	return customInstance<CommonModelsPaginatedListOfResponse>({
		url: `/user/tasks`,
		method: "GET",
		params,
	});
};

export const getUserTasksQueryKey = (params?: UserTasksParams) => {
	return [`/user/tasks`, ...(params ? [params] : [])] as const;
};

export const getUserTasksQueryOptions = <
	TData = Awaited<ReturnType<typeof userTasks>>,
	TError = ErrorType<null | InternalErrorResponse>,
>(
	params?: UserTasksParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof userTasks>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getUserTasksQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof userTasks>>> = () => userTasks(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof userTasks>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserTasksQueryResult = NonNullable<Awaited<ReturnType<typeof userTasks>>>;
export type UserTasksQueryError = ErrorType<null | InternalErrorResponse>;

export function createUserTasks<
	TData = Awaited<ReturnType<typeof userTasks>>,
	TError = ErrorType<null | InternalErrorResponse>,
>(
	params?: UserTasksParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof userTasks>>, TError, TData>>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getUserTasksQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const userRemoveUserOutletRole = (userId: string, role: string) => {
	return customInstance<null>({ url: `/user/role/${userId}/${role}`, method: "DELETE" });
};

export const getUserRemoveUserOutletRoleMutationOptions = <
	TError = ErrorType<ErrorResponse | null | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof userRemoveUserOutletRole>>,
		TError,
		{ userId: string; role: string },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof userRemoveUserOutletRole>>,
	TError,
	{ userId: string; role: string },
	TContext
> => {
	const mutationKey = ["userRemoveUserOutletRole"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userRemoveUserOutletRole>>,
		{ userId: string; role: string }
	> = (props) => {
		const { userId, role } = props ?? {};

		return userRemoveUserOutletRole(userId, role);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserRemoveUserOutletRoleMutationResult = NonNullable<
	Awaited<ReturnType<typeof userRemoveUserOutletRole>>
>;

export type UserRemoveUserOutletRoleMutationError = ErrorType<
	ErrorResponse | null | InternalErrorResponse
>;

export const createUserRemoveUserOutletRole = <
	TError = ErrorType<ErrorResponse | null | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof userRemoveUserOutletRole>>,
			TError,
			{ userId: string; role: string },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof userRemoveUserOutletRole>>,
	TError,
	{ userId: string; role: string },
	TContext
> => {
	const mutationOptions = getUserRemoveUserOutletRoleMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const userRemoveUserOutlet = (userId: string) => {
	return customInstance<null>({ url: `/user/outlet/${userId}`, method: "DELETE" });
};

export const getUserRemoveUserOutletMutationOptions = <
	TError = ErrorType<ErrorResponse | null | null | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof userRemoveUserOutlet>>,
		TError,
		{ userId: string },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof userRemoveUserOutlet>>,
	TError,
	{ userId: string },
	TContext
> => {
	const mutationKey = ["userRemoveUserOutlet"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userRemoveUserOutlet>>,
		{ userId: string }
	> = (props) => {
		const { userId } = props ?? {};

		return userRemoveUserOutlet(userId);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserRemoveUserOutletMutationResult = NonNullable<
	Awaited<ReturnType<typeof userRemoveUserOutlet>>
>;

export type UserRemoveUserOutletMutationError = ErrorType<
	ErrorResponse | null | null | InternalErrorResponse
>;

export const createUserRemoveUserOutlet = <
	TError = ErrorType<ErrorResponse | null | null | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof userRemoveUserOutlet>>,
			TError,
			{ userId: string },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof userRemoveUserOutlet>>,
	TError,
	{ userId: string },
	TContext
> => {
	const mutationOptions = getUserRemoveUserOutletMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const userPinLogin = (userPinLoginRequest: BodyType<UserPinLoginRequest>) => {
	return customInstance<UserPinLoginResponse>({
		url: `/user/pin/login`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: userPinLoginRequest,
	});
};

export const getUserPinLoginMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof userPinLogin>>,
		TError,
		{ data: BodyType<UserPinLoginRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof userPinLogin>>,
	TError,
	{ data: BodyType<UserPinLoginRequest> },
	TContext
> => {
	const mutationKey = ["userPinLogin"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userPinLogin>>,
		{ data: BodyType<UserPinLoginRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return userPinLogin(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserPinLoginMutationResult = NonNullable<Awaited<ReturnType<typeof userPinLogin>>>;
export type UserPinLoginMutationBody = BodyType<UserPinLoginRequest>;
export type UserPinLoginMutationError = ErrorType<InternalErrorResponse>;

export const createUserPinLogin = <TError = ErrorType<InternalErrorResponse>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof userPinLogin>>,
			TError,
			{ data: BodyType<UserPinLoginRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof userPinLogin>>,
	TError,
	{ data: BodyType<UserPinLoginRequest> },
	TContext
> => {
	const mutationOptions = getUserPinLoginMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const userPinGet = () => {
	return customInstance<UserPinGetResponse>({ url: `/user/pin`, method: "GET" });
};

export const getUserPinGetQueryKey = () => {
	return [`/user/pin`] as const;
};

export const getUserPinGetQueryOptions = <
	TData = Awaited<ReturnType<typeof userPinGet>>,
	TError = ErrorType<null | InternalErrorResponse>,
>(options?: {
	query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof userPinGet>>, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getUserPinGetQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof userPinGet>>> = () => userPinGet();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof userPinGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserPinGetQueryResult = NonNullable<Awaited<ReturnType<typeof userPinGet>>>;
export type UserPinGetQueryError = ErrorType<null | InternalErrorResponse>;

export function createUserPinGet<
	TData = Awaited<ReturnType<typeof userPinGet>>,
	TError = ErrorType<null | InternalErrorResponse>,
>(
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof userPinGet>>, TError, TData>>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getUserPinGetQueryOptions(options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const userPinCreate = (userPinCreateRequest: BodyType<UserPinCreateRequest>) => {
	return customInstance<null>({
		url: `/user/pin`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: userPinCreateRequest,
	});
};

export const getUserPinCreateMutationOptions = <
	TError = ErrorType<null | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof userPinCreate>>,
		TError,
		{ data: BodyType<UserPinCreateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof userPinCreate>>,
	TError,
	{ data: BodyType<UserPinCreateRequest> },
	TContext
> => {
	const mutationKey = ["userPinCreate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userPinCreate>>,
		{ data: BodyType<UserPinCreateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return userPinCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserPinCreateMutationResult = NonNullable<Awaited<ReturnType<typeof userPinCreate>>>;
export type UserPinCreateMutationBody = BodyType<UserPinCreateRequest>;
export type UserPinCreateMutationError = ErrorType<null | InternalErrorResponse>;

export const createUserPinCreate = <
	TError = ErrorType<null | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof userPinCreate>>,
			TError,
			{ data: BodyType<UserPinCreateRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof userPinCreate>>,
	TError,
	{ data: BodyType<UserPinCreateRequest> },
	TContext
> => {
	const mutationOptions = getUserPinCreateMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const userLinkAccount = (userLinkAccountRequest: BodyType<UserLinkAccountRequest>) => {
	return customInstance<UserLinkAccountResponse>({
		url: `/user/linkAccount`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: userLinkAccountRequest,
	});
};

export const getUserLinkAccountMutationOptions = <
	TError = ErrorType<ErrorResponse | null | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof userLinkAccount>>,
		TError,
		{ data: BodyType<UserLinkAccountRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof userLinkAccount>>,
	TError,
	{ data: BodyType<UserLinkAccountRequest> },
	TContext
> => {
	const mutationKey = ["userLinkAccount"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userLinkAccount>>,
		{ data: BodyType<UserLinkAccountRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return userLinkAccount(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserLinkAccountMutationResult = NonNullable<
	Awaited<ReturnType<typeof userLinkAccount>>
>;
export type UserLinkAccountMutationBody = BodyType<UserLinkAccountRequest>;
export type UserLinkAccountMutationError = ErrorType<ErrorResponse | null | InternalErrorResponse>;

export const createUserLinkAccount = <
	TError = ErrorType<ErrorResponse | null | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof userLinkAccount>>,
			TError,
			{ data: BodyType<UserLinkAccountRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof userLinkAccount>>,
	TError,
	{ data: BodyType<UserLinkAccountRequest> },
	TContext
> => {
	const mutationOptions = getUserLinkAccountMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const userGetStatus = () => {
	return customInstance<UserGetStatusResponse>({ url: `/user/getStatus`, method: "GET" });
};

export const getUserGetStatusQueryKey = () => {
	return [`/user/getStatus`] as const;
};

export const getUserGetStatusQueryOptions = <
	TData = Awaited<ReturnType<typeof userGetStatus>>,
	TError = ErrorType<InternalErrorResponse>,
>(options?: {
	query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof userGetStatus>>, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getUserGetStatusQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof userGetStatus>>> = () => userGetStatus();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof userGetStatus>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserGetStatusQueryResult = NonNullable<Awaited<ReturnType<typeof userGetStatus>>>;
export type UserGetStatusQueryError = ErrorType<InternalErrorResponse>;

export function createUserGetStatus<
	TData = Awaited<ReturnType<typeof userGetStatus>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof userGetStatus>>, TError, TData>>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getUserGetStatusQueryOptions(options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const userGetRoles = (params: UserGetRolesParams) => {
	return customInstance<string[]>({ url: `/user/getRoles`, method: "GET", params });
};

export const getUserGetRolesQueryKey = (params?: UserGetRolesParams) => {
	return [`/user/getRoles`, ...(params ? [params] : [])] as const;
};

export const getUserGetRolesQueryOptions = <
	TData = Awaited<ReturnType<typeof userGetRoles>>,
	TError = ErrorType<null | InternalErrorResponse>,
>(
	params: UserGetRolesParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof userGetRoles>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getUserGetRolesQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof userGetRoles>>> = () =>
		userGetRoles(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof userGetRoles>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserGetRolesQueryResult = NonNullable<Awaited<ReturnType<typeof userGetRoles>>>;
export type UserGetRolesQueryError = ErrorType<null | InternalErrorResponse>;

export function createUserGetRoles<
	TData = Awaited<ReturnType<typeof userGetRoles>>,
	TError = ErrorType<null | InternalErrorResponse>,
>(
	params: UserGetRolesParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof userGetRoles>>, TError, TData>>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getUserGetRolesQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const userGetCounterUsers = (params: UserGetCounterUsersParams) => {
	return customInstance<UserGetCounterUsersResponse[]>({
		url: `/user/counter`,
		method: "GET",
		params,
	});
};

export const getUserGetCounterUsersQueryKey = (params?: UserGetCounterUsersParams) => {
	return [`/user/counter`, ...(params ? [params] : [])] as const;
};

export const getUserGetCounterUsersQueryOptions = <
	TData = Awaited<ReturnType<typeof userGetCounterUsers>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: UserGetCounterUsersParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof userGetCounterUsers>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getUserGetCounterUsersQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof userGetCounterUsers>>> = () =>
		userGetCounterUsers(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof userGetCounterUsers>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserGetCounterUsersQueryResult = NonNullable<
	Awaited<ReturnType<typeof userGetCounterUsers>>
>;
export type UserGetCounterUsersQueryError = ErrorType<InternalErrorResponse>;

export function createUserGetCounterUsers<
	TData = Awaited<ReturnType<typeof userGetCounterUsers>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: UserGetCounterUsersParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof userGetCounterUsers>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getUserGetCounterUsersQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const userAssignOutlet = (userAssignOutletRequest: BodyType<UserAssignOutletRequest>) => {
	return customInstance<EntitiesUserOutlet>({
		url: `/user/assignOutlet`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: userAssignOutletRequest,
	});
};

export const getUserAssignOutletMutationOptions = <
	TError = ErrorType<null | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof userAssignOutlet>>,
		TError,
		{ data: BodyType<UserAssignOutletRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof userAssignOutlet>>,
	TError,
	{ data: BodyType<UserAssignOutletRequest> },
	TContext
> => {
	const mutationKey = ["userAssignOutlet"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userAssignOutlet>>,
		{ data: BodyType<UserAssignOutletRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return userAssignOutlet(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserAssignOutletMutationResult = NonNullable<
	Awaited<ReturnType<typeof userAssignOutlet>>
>;
export type UserAssignOutletMutationBody = BodyType<UserAssignOutletRequest>;
export type UserAssignOutletMutationError = ErrorType<null | InternalErrorResponse>;

export const createUserAssignOutlet = <
	TError = ErrorType<null | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof userAssignOutlet>>,
			TError,
			{ data: BodyType<UserAssignOutletRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof userAssignOutlet>>,
	TError,
	{ data: BodyType<UserAssignOutletRequest> },
	TContext
> => {
	const mutationOptions = getUserAssignOutletMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const userApplyOutlet = (userApplyOutletRequest: BodyType<UserApplyOutletRequest>) => {
	return customInstance<null>({
		url: `/user/applyOutlet`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: userApplyOutletRequest,
	});
};

export const getUserApplyOutletMutationOptions = <
	TError = ErrorType<null | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof userApplyOutlet>>,
		TError,
		{ data: BodyType<UserApplyOutletRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof userApplyOutlet>>,
	TError,
	{ data: BodyType<UserApplyOutletRequest> },
	TContext
> => {
	const mutationKey = ["userApplyOutlet"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userApplyOutlet>>,
		{ data: BodyType<UserApplyOutletRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return userApplyOutlet(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserApplyOutletMutationResult = NonNullable<
	Awaited<ReturnType<typeof userApplyOutlet>>
>;
export type UserApplyOutletMutationBody = BodyType<UserApplyOutletRequest>;
export type UserApplyOutletMutationError = ErrorType<null | InternalErrorResponse>;

export const createUserApplyOutlet = <
	TError = ErrorType<null | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof userApplyOutlet>>,
			TError,
			{ data: BodyType<UserApplyOutletRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof userApplyOutlet>>,
	TError,
	{ data: BodyType<UserApplyOutletRequest> },
	TContext
> => {
	const mutationOptions = getUserApplyOutletMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const userAddUserOutletRole = (
	userAddUserOutletRoleRequest: BodyType<UserAddUserOutletRoleRequest>
) => {
	return customInstance<null>({
		url: `/user/role`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: userAddUserOutletRoleRequest,
	});
};

export const getUserAddUserOutletRoleMutationOptions = <
	TError = ErrorType<null | null | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof userAddUserOutletRole>>,
		TError,
		{ data: BodyType<UserAddUserOutletRoleRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof userAddUserOutletRole>>,
	TError,
	{ data: BodyType<UserAddUserOutletRoleRequest> },
	TContext
> => {
	const mutationKey = ["userAddUserOutletRole"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userAddUserOutletRole>>,
		{ data: BodyType<UserAddUserOutletRoleRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return userAddUserOutletRole(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserAddUserOutletRoleMutationResult = NonNullable<
	Awaited<ReturnType<typeof userAddUserOutletRole>>
>;
export type UserAddUserOutletRoleMutationBody = BodyType<UserAddUserOutletRoleRequest>;
export type UserAddUserOutletRoleMutationError = ErrorType<null | null | InternalErrorResponse>;

export const createUserAddUserOutletRole = <
	TError = ErrorType<null | null | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof userAddUserOutletRole>>,
			TError,
			{ data: BodyType<UserAddUserOutletRoleRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof userAddUserOutletRole>>,
	TError,
	{ data: BodyType<UserAddUserOutletRoleRequest> },
	TContext
> => {
	const mutationOptions = getUserAddUserOutletRoleMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
