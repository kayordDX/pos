// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";

import type {
	DTOPrinterDTO,
	ErrorResponse,
	InternalErrorResponse,
	PrinterCreateRequest,
	PrinterEditRequest,
	PrinterTestRequest,
} from "./api.schemas";

import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const printerTest = (printerTestRequest: BodyType<PrinterTestRequest>) => {
	return customInstance<boolean>({
		url: `/printer/test`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: printerTestRequest,
	});
};

export const getPrinterTestMutationOptions = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof printerTest>>,
		TError,
		{ data: BodyType<PrinterTestRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof printerTest>>,
	TError,
	{ data: BodyType<PrinterTestRequest> },
	TContext
> => {
	const mutationKey = ["printerTest"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof printerTest>>,
		{ data: BodyType<PrinterTestRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return printerTest(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PrinterTestMutationResult = NonNullable<Awaited<ReturnType<typeof printerTest>>>;
export type PrinterTestMutationBody = BodyType<PrinterTestRequest>;
export type PrinterTestMutationError = ErrorType<ErrorResponse | void | InternalErrorResponse>;

export const createPrinterTest = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof printerTest>>,
			TError,
			{ data: BodyType<PrinterTestRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof printerTest>>,
	TError,
	{ data: BodyType<PrinterTestRequest> },
	TContext
> => {
	const mutationOptions = getPrinterTestMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const printerList = (outletId: number) => {
	return customInstance<DTOPrinterDTO[]>({ url: `/printer/${outletId}`, method: "GET" });
};

export const getPrinterListQueryKey = (outletId: number) => {
	return [`/printer/${outletId}`] as const;
};

export const getPrinterListQueryOptions = <
	TData = Awaited<ReturnType<typeof printerList>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	outletId: number,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof printerList>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getPrinterListQueryKey(outletId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof printerList>>> = () =>
		printerList(outletId);

	return { queryKey, queryFn, enabled: !!outletId, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof printerList>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PrinterListQueryResult = NonNullable<Awaited<ReturnType<typeof printerList>>>;
export type PrinterListQueryError = ErrorType<void | InternalErrorResponse>;

export function createPrinterList<
	TData = Awaited<ReturnType<typeof printerList>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	outletId: number,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof printerList>>, TError, TData>>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getPrinterListQueryOptions(outletId, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const printerEdit = (printerEditRequest: BodyType<PrinterEditRequest>) => {
	return customInstance<DTOPrinterDTO>({
		url: `/printer`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: printerEditRequest,
	});
};

export const getPrinterEditMutationOptions = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof printerEdit>>,
		TError,
		{ data: BodyType<PrinterEditRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof printerEdit>>,
	TError,
	{ data: BodyType<PrinterEditRequest> },
	TContext
> => {
	const mutationKey = ["printerEdit"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof printerEdit>>,
		{ data: BodyType<PrinterEditRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return printerEdit(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PrinterEditMutationResult = NonNullable<Awaited<ReturnType<typeof printerEdit>>>;
export type PrinterEditMutationBody = BodyType<PrinterEditRequest>;
export type PrinterEditMutationError = ErrorType<ErrorResponse | void | InternalErrorResponse>;

export const createPrinterEdit = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof printerEdit>>,
			TError,
			{ data: BodyType<PrinterEditRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof printerEdit>>,
	TError,
	{ data: BodyType<PrinterEditRequest> },
	TContext
> => {
	const mutationOptions = getPrinterEditMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const printerCreate = (printerCreateRequest: BodyType<PrinterCreateRequest>) => {
	return customInstance<DTOPrinterDTO>({
		url: `/printer`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: printerCreateRequest,
	});
};

export const getPrinterCreateMutationOptions = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof printerCreate>>,
		TError,
		{ data: BodyType<PrinterCreateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof printerCreate>>,
	TError,
	{ data: BodyType<PrinterCreateRequest> },
	TContext
> => {
	const mutationKey = ["printerCreate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof printerCreate>>,
		{ data: BodyType<PrinterCreateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return printerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PrinterCreateMutationResult = NonNullable<Awaited<ReturnType<typeof printerCreate>>>;
export type PrinterCreateMutationBody = BodyType<PrinterCreateRequest>;
export type PrinterCreateMutationError = ErrorType<ErrorResponse | void | InternalErrorResponse>;

export const createPrinterCreate = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof printerCreate>>,
			TError,
			{ data: BodyType<PrinterCreateRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof printerCreate>>,
	TError,
	{ data: BodyType<PrinterCreateRequest> },
	TContext
> => {
	const mutationOptions = getPrinterCreateMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const printerDelete = (id: number) => {
	return customInstance<void>({ url: `/printer/${id}`, method: "DELETE" });
};

export const getPrinterDeleteMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof printerDelete>>,
		TError,
		{ id: number },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof printerDelete>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationKey = ["printerDelete"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof printerDelete>>, { id: number }> = (
		props
	) => {
		const { id } = props ?? {};

		return printerDelete(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type PrinterDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof printerDelete>>>;

export type PrinterDeleteMutationError = ErrorType<void | InternalErrorResponse>;

export const createPrinterDelete = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof printerDelete>>,
			TError,
			{ id: number },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof printerDelete>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationOptions = getPrinterDeleteMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
