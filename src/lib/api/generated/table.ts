/**
 * Generated by orval v6.20.0 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation } from "@tanstack/svelte-query";
import type { CreateMutationOptions, MutationFunction } from "@tanstack/svelte-query";
import type {
	ErrorResponse,
	InternalErrorResponse,
	Request8,
	Request9,
	Table,
} from "./api.schemas";
import { useCustomClient } from "../mutator/useCustomClient";
import type { ErrorType, BodyType } from "../mutator/useCustomClient";

export const useTableCreateHook = () => {
	const tableCreate = useCustomClient<Table>();

	return (request9: BodyType<Request9>) => {
		return tableCreate({
			url: `/table`,
			method: "post",
			headers: { "Content-Type": "application/json" },
			data: request9,
		});
	};
};

export const useTableCreateMutationOptions = <
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useTableCreateHook>>>,
		TError,
		{ data: BodyType<Request9> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useTableCreateHook>>>,
	TError,
	{ data: BodyType<Request9> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const tableCreate = useTableCreateHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useTableCreateHook>>>,
		{ data: BodyType<Request9> }
	> = (props) => {
		const { data } = props ?? {};

		return tableCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type TableCreateMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useTableCreateHook>>>
>;
export type TableCreateMutationBody = BodyType<Request9>;
export type TableCreateMutationError = ErrorType<ErrorResponse | InternalErrorResponse>;

export const createTableCreate = <
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useTableCreateHook>>>,
		TError,
		{ data: BodyType<Request9> },
		TContext
	>;
}) => {
	const mutationOptions = useTableCreateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const useTableUpdateHook = () => {
	const tableUpdate = useCustomClient<Table>();

	return (tableId: number, request8: BodyType<Request8>) => {
		return tableUpdate({
			url: `/table/${tableId}`,
			method: "put",
			headers: { "Content-Type": "application/json" },
			data: request8,
		});
	};
};

export const useTableUpdateMutationOptions = <
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useTableUpdateHook>>>,
		TError,
		{ tableId: number; data: BodyType<Request8> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useTableUpdateHook>>>,
	TError,
	{ tableId: number; data: BodyType<Request8> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const tableUpdate = useTableUpdateHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useTableUpdateHook>>>,
		{ tableId: number; data: BodyType<Request8> }
	> = (props) => {
		const { tableId, data } = props ?? {};

		return tableUpdate(tableId, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type TableUpdateMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useTableUpdateHook>>>
>;
export type TableUpdateMutationBody = BodyType<Request8>;
export type TableUpdateMutationError = ErrorType<ErrorResponse | InternalErrorResponse>;

export const createTableUpdate = <
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useTableUpdateHook>>>,
		TError,
		{ tableId: number; data: BodyType<Request8> },
		TContext
	>;
}) => {
	const mutationOptions = useTableUpdateMutationOptions(options);

	return createMutation(mutationOptions);
};
