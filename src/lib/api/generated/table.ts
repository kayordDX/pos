/**
 * Generated by orval v6.21.0 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateQueryOptions,
	CreateQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type {
	ErrorResponse,
	InternalErrorResponse,
	Request7,
	Request9,
	Response,
	Table,
	TableGetAvailableParams,
} from "./api.schemas";
import { useCustomClient } from "../mutator/useCustomClient";
import type { ErrorType, BodyType } from "../mutator/useCustomClient";

export const useTableCreateHook = () => {
	const tableCreate = useCustomClient<Table>();

	return (request9: BodyType<Request9>) => {
		return tableCreate({
			url: `/table`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: request9,
		});
	};
};

export const useTableCreateMutationOptions = <
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useTableCreateHook>>>,
		TError,
		{ data: BodyType<Request9> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useTableCreateHook>>>,
	TError,
	{ data: BodyType<Request9> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const tableCreate = useTableCreateHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useTableCreateHook>>>,
		{ data: BodyType<Request9> }
	> = (props) => {
		const { data } = props ?? {};

		return tableCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type TableCreateMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useTableCreateHook>>>
>;
export type TableCreateMutationBody = BodyType<Request9>;
export type TableCreateMutationError = ErrorType<ErrorResponse | InternalErrorResponse>;

export const createTableCreate = <
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useTableCreateHook>>>,
		TError,
		{ data: BodyType<Request9> },
		TContext
	>;
}) => {
	const mutationOptions = useTableCreateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const useTableUpdateHook = () => {
	const tableUpdate = useCustomClient<Table>();

	return (tableId: number, request7: BodyType<Request7>) => {
		return tableUpdate({
			url: `/table/${tableId}`,
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			data: request7,
		});
	};
};

export const useTableUpdateMutationOptions = <
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useTableUpdateHook>>>,
		TError,
		{ tableId: number; data: BodyType<Request7> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useTableUpdateHook>>>,
	TError,
	{ tableId: number; data: BodyType<Request7> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const tableUpdate = useTableUpdateHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useTableUpdateHook>>>,
		{ tableId: number; data: BodyType<Request7> }
	> = (props) => {
		const { tableId, data } = props ?? {};

		return tableUpdate(tableId, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type TableUpdateMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useTableUpdateHook>>>
>;
export type TableUpdateMutationBody = BodyType<Request7>;
export type TableUpdateMutationError = ErrorType<ErrorResponse | InternalErrorResponse>;

export const createTableUpdate = <
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useTableUpdateHook>>>,
		TError,
		{ tableId: number; data: BodyType<Request7> },
		TContext
	>;
}) => {
	const mutationOptions = useTableUpdateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const useTableGetAvailableHook = () => {
	const tableGetAvailable = useCustomClient<Response[]>();

	return (params: TableGetAvailableParams) => {
		return tableGetAvailable({ url: `/table/available`, method: "GET", params });
	};
};

export const getTableGetAvailableQueryKey = (params: TableGetAvailableParams) => {
	return [`/table/available`, ...(params ? [params] : [])] as const;
};

export const useTableGetAvailableQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useTableGetAvailableHook>>>,
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
>(
	params: TableGetAvailableParams,
	options?: {
		query?: CreateQueryOptions<
			Awaited<ReturnType<ReturnType<typeof useTableGetAvailableHook>>>,
			TError,
			TData
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTableGetAvailableQueryKey(params);

	const tableGetAvailable = useTableGetAvailableHook();

	const queryFn: QueryFunction<
		Awaited<ReturnType<ReturnType<typeof useTableGetAvailableHook>>>
	> = () => tableGetAvailable(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useTableGetAvailableHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type TableGetAvailableQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useTableGetAvailableHook>>>
>;
export type TableGetAvailableQueryError = ErrorType<ErrorResponse | InternalErrorResponse>;

export const createTableGetAvailable = <
	TData = Awaited<ReturnType<ReturnType<typeof useTableGetAvailableHook>>>,
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
>(
	params: TableGetAvailableParams,
	options?: {
		query?: CreateQueryOptions<
			Awaited<ReturnType<ReturnType<typeof useTableGetAvailableHook>>>,
			TError,
			TData
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useTableGetAvailableQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};
