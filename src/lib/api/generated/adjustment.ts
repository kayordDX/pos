// @ts-nocheck
/**
 * Generated by orval v6.28.2 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type {
	AdjustmentCreateRequest,
	EntitiesAdjustmentType,
	InternalErrorResponse,
} from "./api.schemas";
import { useCustomClient } from "../mutator/useCustomClient";
import type { ErrorType, BodyType } from "../mutator/useCustomClient";

export const useAdjustmentGetAllHook = () => {
	const adjustmentGetAll = useCustomClient<EntitiesAdjustmentType[]>();

	return (outletId: number) => {
		return adjustmentGetAll({ url: `/adjustment/${outletId}`, method: "GET" });
	};
};

export const getAdjustmentGetAllQueryKey = (outletId: number) => {
	return [`/adjustment/${outletId}`] as const;
};

export const useAdjustmentGetAllQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useAdjustmentGetAllHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	outletId: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useAdjustmentGetAllHook>>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getAdjustmentGetAllQueryKey(outletId);

	const adjustmentGetAll = useAdjustmentGetAllHook();

	const queryFn: QueryFunction<
		Awaited<ReturnType<ReturnType<typeof useAdjustmentGetAllHook>>>
	> = () => adjustmentGetAll(outletId);

	return { queryKey, queryFn, enabled: !!outletId, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useAdjustmentGetAllHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type AdjustmentGetAllQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useAdjustmentGetAllHook>>>
>;
export type AdjustmentGetAllQueryError = ErrorType<void | InternalErrorResponse>;

export const createAdjustmentGetAll = <
	TData = Awaited<ReturnType<ReturnType<typeof useAdjustmentGetAllHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	outletId: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useAdjustmentGetAllHook>>>,
				TError,
				TData
			>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useAdjustmentGetAllQueryOptions(outletId, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const useAdjustmentCreateHook = () => {
	const adjustmentCreate = useCustomClient<unknown>();

	return (adjustmentCreateRequest: BodyType<AdjustmentCreateRequest>) => {
		return adjustmentCreate({
			url: `/adjustment`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: adjustmentCreateRequest,
		});
	};
};

export const useAdjustmentCreateMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useAdjustmentCreateHook>>>,
		TError,
		{ data: BodyType<AdjustmentCreateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useAdjustmentCreateHook>>>,
	TError,
	{ data: BodyType<AdjustmentCreateRequest> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const adjustmentCreate = useAdjustmentCreateHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useAdjustmentCreateHook>>>,
		{ data: BodyType<AdjustmentCreateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return adjustmentCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type AdjustmentCreateMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useAdjustmentCreateHook>>>
>;
export type AdjustmentCreateMutationBody = BodyType<AdjustmentCreateRequest>;
export type AdjustmentCreateMutationError = ErrorType<void | InternalErrorResponse>;

export const createAdjustmentCreate = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useAdjustmentCreateHook>>>,
		TError,
		{ data: BodyType<AdjustmentCreateRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<ReturnType<typeof useAdjustmentCreateHook>>>,
	TError,
	{ data: BodyType<AdjustmentCreateRequest> },
	TContext
> => {
	const mutationOptions = useAdjustmentCreateMutationOptions(options);

	return createMutation(mutationOptions);
};
