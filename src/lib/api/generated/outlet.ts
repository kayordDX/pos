// @ts-nocheck
/**
 * Generated by orval v6.28.2 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type {
	EntitiesOutlet,
	EntitiesPaymentType,
	ErrorResponse,
	InternalErrorResponse,
	OutletCreateRequest,
	OutletUpdateRequest,
} from "./api.schemas";
import { useCustomClient } from "../mutator/useCustomClient";
import type { ErrorType, BodyType } from "../mutator/useCustomClient";

export const useOutletUpdateHook = () => {
	const outletUpdate = useCustomClient<EntitiesOutlet>();

	return (id: number, outletUpdateRequest: BodyType<OutletUpdateRequest>) => {
		return outletUpdate({
			url: `/outlet/${id}`,
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			data: outletUpdateRequest,
		});
	};
};

export const useOutletUpdateMutationOptions = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useOutletUpdateHook>>>,
		TError,
		{ id: number; data: BodyType<OutletUpdateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useOutletUpdateHook>>>,
	TError,
	{ id: number; data: BodyType<OutletUpdateRequest> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const outletUpdate = useOutletUpdateHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useOutletUpdateHook>>>,
		{ id: number; data: BodyType<OutletUpdateRequest> }
	> = (props) => {
		const { id, data } = props ?? {};

		return outletUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type OutletUpdateMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useOutletUpdateHook>>>
>;
export type OutletUpdateMutationBody = BodyType<OutletUpdateRequest>;
export type OutletUpdateMutationError = ErrorType<ErrorResponse | void | InternalErrorResponse>;

export const createOutletUpdate = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useOutletUpdateHook>>>,
		TError,
		{ id: number; data: BodyType<OutletUpdateRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<ReturnType<typeof useOutletUpdateHook>>>,
	TError,
	{ id: number; data: BodyType<OutletUpdateRequest> },
	TContext
> => {
	const mutationOptions = useOutletUpdateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const useOutletGetHook = () => {
	const outletGet = useCustomClient<EntitiesOutlet>();

	return (id: number) => {
		return outletGet({ url: `/outlet/${id}`, method: "GET" });
	};
};

export const getOutletGetQueryKey = (id: number) => {
	return [`/outlet/${id}`] as const;
};

export const useOutletGetQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useOutletGetHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<ReturnType<typeof useOutletGetHook>>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getOutletGetQueryKey(id);

	const outletGet = useOutletGetHook();

	const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useOutletGetHook>>>> = () =>
		outletGet(id);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useOutletGetHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type OutletGetQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useOutletGetHook>>>
>;
export type OutletGetQueryError = ErrorType<void | InternalErrorResponse>;

export const createOutletGet = <
	TData = Awaited<ReturnType<ReturnType<typeof useOutletGetHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<ReturnType<typeof useOutletGetHook>>>, TError, TData>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useOutletGetQueryOptions(id, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const useOutletGetPaymentTypeHook = () => {
	const outletGetPaymentType = useCustomClient<EntitiesPaymentType[]>();

	return (id: number) => {
		return outletGetPaymentType({ url: `/outlet/paymentTypes/${id}`, method: "GET" });
	};
};

export const getOutletGetPaymentTypeQueryKey = (id: number) => {
	return [`/outlet/paymentTypes/${id}`] as const;
};

export const useOutletGetPaymentTypeQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useOutletGetPaymentTypeHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useOutletGetPaymentTypeHook>>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getOutletGetPaymentTypeQueryKey(id);

	const outletGetPaymentType = useOutletGetPaymentTypeHook();

	const queryFn: QueryFunction<
		Awaited<ReturnType<ReturnType<typeof useOutletGetPaymentTypeHook>>>
	> = () => outletGetPaymentType(id);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useOutletGetPaymentTypeHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type OutletGetPaymentTypeQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useOutletGetPaymentTypeHook>>>
>;
export type OutletGetPaymentTypeQueryError = ErrorType<void | InternalErrorResponse>;

export const createOutletGetPaymentType = <
	TData = Awaited<ReturnType<ReturnType<typeof useOutletGetPaymentTypeHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useOutletGetPaymentTypeHook>>>,
				TError,
				TData
			>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useOutletGetPaymentTypeQueryOptions(id, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const useOutletListHook = () => {
	const outletList = useCustomClient<EntitiesOutlet[]>();

	return () => {
		return outletList({ url: `/outlet`, method: "GET" });
	};
};

export const getOutletListQueryKey = () => {
	return [`/outlet`] as const;
};

export const useOutletListQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useOutletListHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(options?: {
	query?: Partial<
		CreateQueryOptions<Awaited<ReturnType<ReturnType<typeof useOutletListHook>>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getOutletListQueryKey();

	const outletList = useOutletListHook();

	const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useOutletListHook>>>> = () =>
		outletList();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useOutletListHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type OutletListQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useOutletListHook>>>
>;
export type OutletListQueryError = ErrorType<void | InternalErrorResponse>;

export const createOutletList = <
	TData = Awaited<ReturnType<ReturnType<typeof useOutletListHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(options?: {
	query?: Partial<
		CreateQueryOptions<Awaited<ReturnType<ReturnType<typeof useOutletListHook>>>, TError, TData>
	>;
}): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useOutletListQueryOptions(options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const useOutletCreateHook = () => {
	const outletCreate = useCustomClient<EntitiesOutlet>();

	return (outletCreateRequest: BodyType<OutletCreateRequest>) => {
		return outletCreate({
			url: `/outlet`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: outletCreateRequest,
		});
	};
};

export const useOutletCreateMutationOptions = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useOutletCreateHook>>>,
		TError,
		{ data: BodyType<OutletCreateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useOutletCreateHook>>>,
	TError,
	{ data: BodyType<OutletCreateRequest> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const outletCreate = useOutletCreateHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useOutletCreateHook>>>,
		{ data: BodyType<OutletCreateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return outletCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type OutletCreateMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useOutletCreateHook>>>
>;
export type OutletCreateMutationBody = BodyType<OutletCreateRequest>;
export type OutletCreateMutationError = ErrorType<ErrorResponse | void | InternalErrorResponse>;

export const createOutletCreate = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useOutletCreateHook>>>,
		TError,
		{ data: BodyType<OutletCreateRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<ReturnType<typeof useOutletCreateHook>>>,
	TError,
	{ data: BodyType<OutletCreateRequest> },
	TContext
> => {
	const mutationOptions = useOutletCreateMutationOptions(options);

	return createMutation(mutationOptions);
};
