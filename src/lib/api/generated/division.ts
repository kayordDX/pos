// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createQuery } from "@tanstack/svelte-query";
import type {
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	QueryClient,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";

import type {
	DivisionGetAllParams,
	DivisionGetUsersResponse,
	EntitiesDivision,
	InternalErrorResponse,
} from "./api.schemas";

import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType } from "../mutator/customInstance.svelte";

export const divisionGetUsers = (divisionId: number) => {
	return customInstance<DivisionGetUsersResponse[]>({
		url: `/division/users/${divisionId}`,
		method: "GET",
	});
};

export const getDivisionGetUsersQueryKey = (divisionId: number) => {
	return [`/division/users/${divisionId}`] as const;
};

export const getDivisionGetUsersQueryOptions = <
	TData = Awaited<ReturnType<typeof divisionGetUsers>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	divisionId: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof divisionGetUsers>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getDivisionGetUsersQueryKey(divisionId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof divisionGetUsers>>> = () =>
		divisionGetUsers(divisionId);

	return { queryKey, queryFn, enabled: !!divisionId, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof divisionGetUsers>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DivisionGetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof divisionGetUsers>>>;
export type DivisionGetUsersQueryError = ErrorType<void | InternalErrorResponse>;

export function createDivisionGetUsers<
	TData = Awaited<ReturnType<typeof divisionGetUsers>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	divisionId: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof divisionGetUsers>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getDivisionGetUsersQueryOptions(divisionId, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const divisionGetAll = (params: DivisionGetAllParams) => {
	return customInstance<EntitiesDivision[]>({ url: `/division`, method: "GET", params });
};

export const getDivisionGetAllQueryKey = (params: DivisionGetAllParams) => {
	return [`/division`, ...(params ? [params] : [])] as const;
};

export const getDivisionGetAllQueryOptions = <
	TData = Awaited<ReturnType<typeof divisionGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: DivisionGetAllParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof divisionGetAll>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getDivisionGetAllQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof divisionGetAll>>> = () =>
		divisionGetAll(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof divisionGetAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DivisionGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof divisionGetAll>>>;
export type DivisionGetAllQueryError = ErrorType<void | InternalErrorResponse>;

export function createDivisionGetAll<
	TData = Awaited<ReturnType<typeof divisionGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: DivisionGetAllParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof divisionGetAll>>, TError, TData>>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getDivisionGetAllQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
