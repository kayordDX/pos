// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";

import type {
	EntitiesStockCategory,
	ErrorResponse,
	InternalErrorResponse,
	StockCategoryCreateRequest,
	StockCategoryGetAllParams,
	StockCategoryUpdateRequest,
} from "./api.schemas";

import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const stockCategoryUpdate = (
	id: number,
	stockCategoryUpdateRequest: BodyType<StockCategoryUpdateRequest>
) => {
	return customInstance<EntitiesStockCategory>({
		url: `/stockCategory/${id}`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: stockCategoryUpdateRequest,
	});
};

export const getStockCategoryUpdateMutationOptions = <
	TError = ErrorType<ErrorResponse | null | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof stockCategoryUpdate>>,
		TError,
		{ id: number; data: BodyType<StockCategoryUpdateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof stockCategoryUpdate>>,
	TError,
	{ id: number; data: BodyType<StockCategoryUpdateRequest> },
	TContext
> => {
	const mutationKey = ["stockCategoryUpdate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof stockCategoryUpdate>>,
		{ id: number; data: BodyType<StockCategoryUpdateRequest> }
	> = (props) => {
		const { id, data } = props ?? {};

		return stockCategoryUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type StockCategoryUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof stockCategoryUpdate>>
>;
export type StockCategoryUpdateMutationBody = BodyType<StockCategoryUpdateRequest>;
export type StockCategoryUpdateMutationError = ErrorType<
	ErrorResponse | null | InternalErrorResponse
>;

export const createStockCategoryUpdate = <
	TError = ErrorType<ErrorResponse | null | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof stockCategoryUpdate>>,
			TError,
			{ id: number; data: BodyType<StockCategoryUpdateRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof stockCategoryUpdate>>,
	TError,
	{ id: number; data: BodyType<StockCategoryUpdateRequest> },
	TContext
> => {
	const mutationOptions = getStockCategoryUpdateMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const stockCategoryGetAll = (params: StockCategoryGetAllParams) => {
	return customInstance<EntitiesStockCategory[]>({ url: `/stockCategory`, method: "GET", params });
};

export const getStockCategoryGetAllQueryKey = (params?: StockCategoryGetAllParams) => {
	return [`/stockCategory`, ...(params ? [params] : [])] as const;
};

export const getStockCategoryGetAllQueryOptions = <
	TData = Awaited<ReturnType<typeof stockCategoryGetAll>>,
	TError = ErrorType<null | InternalErrorResponse>,
>(
	params: StockCategoryGetAllParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof stockCategoryGetAll>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getStockCategoryGetAllQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof stockCategoryGetAll>>> = () =>
		stockCategoryGetAll(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof stockCategoryGetAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StockCategoryGetAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof stockCategoryGetAll>>
>;
export type StockCategoryGetAllQueryError = ErrorType<null | InternalErrorResponse>;

export function createStockCategoryGetAll<
	TData = Awaited<ReturnType<typeof stockCategoryGetAll>>,
	TError = ErrorType<null | InternalErrorResponse>,
>(
	params: StockCategoryGetAllParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof stockCategoryGetAll>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getStockCategoryGetAllQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const stockCategoryCreate = (
	stockCategoryCreateRequest: BodyType<StockCategoryCreateRequest>
) => {
	return customInstance<EntitiesStockCategory>({
		url: `/stockCategory`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: stockCategoryCreateRequest,
	});
};

export const getStockCategoryCreateMutationOptions = <
	TError = ErrorType<ErrorResponse | null | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof stockCategoryCreate>>,
		TError,
		{ data: BodyType<StockCategoryCreateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof stockCategoryCreate>>,
	TError,
	{ data: BodyType<StockCategoryCreateRequest> },
	TContext
> => {
	const mutationKey = ["stockCategoryCreate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof stockCategoryCreate>>,
		{ data: BodyType<StockCategoryCreateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return stockCategoryCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type StockCategoryCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof stockCategoryCreate>>
>;
export type StockCategoryCreateMutationBody = BodyType<StockCategoryCreateRequest>;
export type StockCategoryCreateMutationError = ErrorType<
	ErrorResponse | null | InternalErrorResponse
>;

export const createStockCategoryCreate = <
	TError = ErrorType<ErrorResponse | null | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof stockCategoryCreate>>,
			TError,
			{ data: BodyType<StockCategoryCreateRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof stockCategoryCreate>>,
	TError,
	{ data: BodyType<StockCategoryCreateRequest> },
	TContext
> => {
	const mutationOptions = getStockCategoryCreateMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
