// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type {
	CommonWrapperResultOfResponse,
	CommonWrapperResultOfStatusResultDto,
	EntitiesPayment,
	InternalErrorResponse,
	PayCheckRequest,
	PayCheckResponse,
	PayGetLinkParams,
	PayManualPaymentRequest,
} from "./api.schemas";
import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const payStatus = (reference: string) => {
	return customInstance<CommonWrapperResultOfStatusResultDto>({
		url: `/pay/status/${reference}`,
		method: "GET",
	});
};

export const getPayStatusQueryKey = (reference: string) => {
	return [`/pay/status/${reference}`] as const;
};

export const getPayStatusQueryOptions = <
	TData = Awaited<ReturnType<typeof payStatus>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	reference: string,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof payStatus>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getPayStatusQueryKey(reference);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof payStatus>>> = () => payStatus(reference);

	return { queryKey, queryFn, enabled: !!reference, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof payStatus>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type PayStatusQueryResult = NonNullable<Awaited<ReturnType<typeof payStatus>>>;
export type PayStatusQueryError = ErrorType<void | InternalErrorResponse>;

export function createPayStatus<
	TData = Awaited<ReturnType<typeof payStatus>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	reference: string,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof payStatus>>, TError, TData>>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getPayStatusQueryOptions(reference, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const payManualPayment = (payManualPaymentRequest: BodyType<PayManualPaymentRequest>) => {
	return customInstance<EntitiesPayment>({
		url: `/pay/manual`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: payManualPaymentRequest,
	});
};

export const getPayManualPaymentMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof payManualPayment>>,
		TError,
		{ data: BodyType<PayManualPaymentRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof payManualPayment>>,
	TError,
	{ data: BodyType<PayManualPaymentRequest> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof payManualPayment>>,
		{ data: BodyType<PayManualPaymentRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return payManualPayment(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PayManualPaymentMutationResult = NonNullable<
	Awaited<ReturnType<typeof payManualPayment>>
>;
export type PayManualPaymentMutationBody = BodyType<PayManualPaymentRequest>;
export type PayManualPaymentMutationError = ErrorType<InternalErrorResponse>;

export const createPayManualPayment = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof payManualPayment>>,
		TError,
		{ data: BodyType<PayManualPaymentRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<typeof payManualPayment>>,
	TError,
	{ data: BodyType<PayManualPaymentRequest> },
	TContext
> => {
	const mutationOptions = getPayManualPaymentMutationOptions(options);

	return createMutation(mutationOptions);
};
export const payGetLink = (params: PayGetLinkParams) => {
	return customInstance<CommonWrapperResultOfResponse>({
		url: `/pay/getLink`,
		method: "GET",
		params,
	});
};

export const getPayGetLinkQueryKey = (params: PayGetLinkParams) => {
	return [`/pay/getLink`, ...(params ? [params] : [])] as const;
};

export const getPayGetLinkQueryOptions = <
	TData = Awaited<ReturnType<typeof payGetLink>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: PayGetLinkParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof payGetLink>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getPayGetLinkQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof payGetLink>>> = () => payGetLink(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof payGetLink>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type PayGetLinkQueryResult = NonNullable<Awaited<ReturnType<typeof payGetLink>>>;
export type PayGetLinkQueryError = ErrorType<InternalErrorResponse>;

export function createPayGetLink<
	TData = Awaited<ReturnType<typeof payGetLink>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: PayGetLinkParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof payGetLink>>, TError, TData>>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getPayGetLinkQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const payCheck = (payCheckRequest: BodyType<PayCheckRequest>) => {
	return customInstance<PayCheckResponse>({
		url: `/pay/check`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: payCheckRequest,
	});
};

export const getPayCheckMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof payCheck>>,
		TError,
		{ data: BodyType<PayCheckRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof payCheck>>,
	TError,
	{ data: BodyType<PayCheckRequest> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof payCheck>>,
		{ data: BodyType<PayCheckRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return payCheck(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PayCheckMutationResult = NonNullable<Awaited<ReturnType<typeof payCheck>>>;
export type PayCheckMutationBody = BodyType<PayCheckRequest>;
export type PayCheckMutationError = ErrorType<void | InternalErrorResponse>;

export const createPayCheck = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof payCheck>>,
		TError,
		{ data: BodyType<PayCheckRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<typeof payCheck>>,
	TError,
	{ data: BodyType<PayCheckRequest> },
	TContext
> => {
	const mutationOptions = getPayCheckMutationOptions(options);

	return createMutation(mutationOptions);
};
