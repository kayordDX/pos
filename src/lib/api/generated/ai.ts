// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	MutationFunction,
} from "@tanstack/svelte-query";
import type {
	GenerateRequest,
	InternalErrorResponse,
	ServicesAIGenerateResponse,
} from "./api.schemas";
import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const generate = (generateRequest: BodyType<GenerateRequest>) => {
	return customInstance<ServicesAIGenerateResponse>({
		url: `/ai/generate`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: generateRequest,
	});
};

export const getGenerateMutationOptions = <
	TData = Awaited<ReturnType<typeof generate>>,
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { data: BodyType<GenerateRequest> }, TContext>;
}) => {
	const mutationKey = ["generate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof generate>>,
		{ data: BodyType<GenerateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return generate(data);
	};

	return { mutationFn, ...mutationOptions } as CreateMutationOptions<
		TData,
		TError,
		{ data: BodyType<GenerateRequest> },
		TContext
	>;
};

export type GenerateMutationResult = NonNullable<Awaited<ReturnType<typeof generate>>>;
export type GenerateMutationBody = BodyType<GenerateRequest>;
export type GenerateMutationError = ErrorType<void | InternalErrorResponse>;

export const createGenerate = <
	TData = Awaited<ReturnType<typeof generate>>,
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { data: BodyType<GenerateRequest> }, TContext>;
}): CreateMutationResult<TData, TError, { data: BodyType<GenerateRequest> }, TContext> => {
	const mutationOptions = getGenerateMutationOptions(options);

	return createMutation(mutationOptions);
};
