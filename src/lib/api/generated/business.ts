/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";

import type {
	BusinessCreateRequest,
	BusinessDeleteRequest,
	BusinessEditRequest,
	EntitiesBusiness,
	EntitiesOutlet,
	ErrorResponse,
	InternalErrorResponse,
} from "./api.schemas";

import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const businessGetOutlets = (outletId: number) => {
	return customInstance<EntitiesOutlet[]>({ url: `/business/outlets/${outletId}`, method: "GET" });
};

export const getBusinessGetOutletsQueryKey = (outletId?: number) => {
	return [`/business/outlets/${outletId}`] as const;
};

export const getBusinessGetOutletsQueryOptions = <
	TData = Awaited<ReturnType<typeof businessGetOutlets>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	outletId: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof businessGetOutlets>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getBusinessGetOutletsQueryKey(outletId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof businessGetOutlets>>> = () =>
		businessGetOutlets(outletId);

	return { queryKey, queryFn, enabled: !!outletId, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof businessGetOutlets>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type BusinessGetOutletsQueryResult = NonNullable<
	Awaited<ReturnType<typeof businessGetOutlets>>
>;
export type BusinessGetOutletsQueryError = ErrorType<void | InternalErrorResponse>;

export function createBusinessGetOutlets<
	TData = Awaited<ReturnType<typeof businessGetOutlets>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	outletId: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof businessGetOutlets>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getBusinessGetOutletsQueryOptions(outletId, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const businessGetAll = () => {
	return customInstance<EntitiesBusiness[]>({ url: `/business`, method: "GET" });
};

export const getBusinessGetAllQueryKey = () => {
	return [`/business`] as const;
};

export const getBusinessGetAllQueryOptions = <
	TData = Awaited<ReturnType<typeof businessGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(options?: {
	query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof businessGetAll>>, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getBusinessGetAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof businessGetAll>>> = () => businessGetAll();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof businessGetAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type BusinessGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof businessGetAll>>>;
export type BusinessGetAllQueryError = ErrorType<void | InternalErrorResponse>;

export function createBusinessGetAll<
	TData = Awaited<ReturnType<typeof businessGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof businessGetAll>>, TError, TData>>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getBusinessGetAllQueryOptions(options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const businessEdit = (businessEditRequest: BodyType<BusinessEditRequest>) => {
	return customInstance<void>({
		url: `/business`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: businessEditRequest,
	});
};

export const getBusinessEditMutationOptions = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof businessEdit>>,
		TError,
		{ data: BodyType<BusinessEditRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof businessEdit>>,
	TError,
	{ data: BodyType<BusinessEditRequest> },
	TContext
> => {
	const mutationKey = ["businessEdit"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof businessEdit>>,
		{ data: BodyType<BusinessEditRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return businessEdit(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type BusinessEditMutationResult = NonNullable<Awaited<ReturnType<typeof businessEdit>>>;
export type BusinessEditMutationBody = BodyType<BusinessEditRequest>;
export type BusinessEditMutationError = ErrorType<ErrorResponse | void | InternalErrorResponse>;

export const createBusinessEdit = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof businessEdit>>,
			TError,
			{ data: BodyType<BusinessEditRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof businessEdit>>,
	TError,
	{ data: BodyType<BusinessEditRequest> },
	TContext
> => {
	const mutationOptions = getBusinessEditMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const businessDelete = (businessDeleteRequest: BodyType<BusinessDeleteRequest>) => {
	return customInstance<void>({
		url: `/business`,
		method: "DELETE",
		headers: { "Content-Type": "*/*" },
		data: businessDeleteRequest,
	});
};

export const getBusinessDeleteMutationOptions = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof businessDelete>>,
		TError,
		{ data: BodyType<BusinessDeleteRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof businessDelete>>,
	TError,
	{ data: BodyType<BusinessDeleteRequest> },
	TContext
> => {
	const mutationKey = ["businessDelete"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof businessDelete>>,
		{ data: BodyType<BusinessDeleteRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return businessDelete(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type BusinessDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof businessDelete>>>;
export type BusinessDeleteMutationBody = BodyType<BusinessDeleteRequest>;
export type BusinessDeleteMutationError = ErrorType<ErrorResponse | void | InternalErrorResponse>;

export const createBusinessDelete = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof businessDelete>>,
			TError,
			{ data: BodyType<BusinessDeleteRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof businessDelete>>,
	TError,
	{ data: BodyType<BusinessDeleteRequest> },
	TContext
> => {
	const mutationOptions = getBusinessDeleteMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const businessCreate = (businessCreateRequest: BodyType<BusinessCreateRequest>) => {
	return customInstance<EntitiesBusiness>({
		url: `/business`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: businessCreateRequest,
	});
};

export const getBusinessCreateMutationOptions = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof businessCreate>>,
		TError,
		{ data: BodyType<BusinessCreateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof businessCreate>>,
	TError,
	{ data: BodyType<BusinessCreateRequest> },
	TContext
> => {
	const mutationKey = ["businessCreate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof businessCreate>>,
		{ data: BodyType<BusinessCreateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return businessCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type BusinessCreateMutationResult = NonNullable<Awaited<ReturnType<typeof businessCreate>>>;
export type BusinessCreateMutationBody = BodyType<BusinessCreateRequest>;
export type BusinessCreateMutationError = ErrorType<ErrorResponse | void | InternalErrorResponse>;

export const createBusinessCreate = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof businessCreate>>,
			TError,
			{ data: BodyType<BusinessCreateRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof businessCreate>>,
	TError,
	{ data: BodyType<BusinessCreateRequest> },
	TContext
> => {
	const mutationOptions = getBusinessCreateMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const businessGet = (id: number) => {
	return customInstance<EntitiesBusiness>({ url: `/business/${id}`, method: "GET" });
};

export const getBusinessGetQueryKey = (id?: number) => {
	return [`/business/${id}`] as const;
};

export const getBusinessGetQueryOptions = <
	TData = Awaited<ReturnType<typeof businessGet>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof businessGet>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getBusinessGetQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof businessGet>>> = () => businessGet(id);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof businessGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type BusinessGetQueryResult = NonNullable<Awaited<ReturnType<typeof businessGet>>>;
export type BusinessGetQueryError = ErrorType<void | InternalErrorResponse>;

export function createBusinessGet<
	TData = Awaited<ReturnType<typeof businessGet>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof businessGet>>, TError, TData>>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getBusinessGetQueryOptions(id, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
