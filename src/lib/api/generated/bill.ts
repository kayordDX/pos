// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type { BillEmailBillRequest, InternalErrorResponse } from "./api.schemas";
import { customInstance } from "../mutator/customInstance";
import type { ErrorType, BodyType } from "../mutator/customInstance";

export const billEmailBill = (billEmailBillRequest: BodyType<BillEmailBillRequest>) => {
	return customInstance<boolean>({
		url: `/bill/email`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: billEmailBillRequest,
	});
};

export const getBillEmailBillMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof billEmailBill>>,
		TError,
		{ data: BodyType<BillEmailBillRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof billEmailBill>>,
	TError,
	{ data: BodyType<BillEmailBillRequest> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof billEmailBill>>,
		{ data: BodyType<BillEmailBillRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return billEmailBill(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type BillEmailBillMutationResult = NonNullable<Awaited<ReturnType<typeof billEmailBill>>>;
export type BillEmailBillMutationBody = BodyType<BillEmailBillRequest>;
export type BillEmailBillMutationError = ErrorType<void | InternalErrorResponse>;

export const createBillEmailBill = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof billEmailBill>>,
		TError,
		{ data: BodyType<BillEmailBillRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<typeof billEmailBill>>,
	TError,
	{ data: BodyType<BillEmailBillRequest> },
	TContext
> => {
	const mutationOptions = getBillEmailBillMutationOptions(options);

	return createMutation(mutationOptions);
};
export const billDownloadBill = (tableBookingId: number) => {
	return customInstance<unknown>({ url: `/bill/download/${tableBookingId}`, method: "GET" });
};

export const getBillDownloadBillQueryKey = (tableBookingId: number) => {
	return [`/bill/download/${tableBookingId}`] as const;
};

export const getBillDownloadBillQueryOptions = <
	TData = Awaited<ReturnType<typeof billDownloadBill>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	tableBookingId: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof billDownloadBill>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getBillDownloadBillQueryKey(tableBookingId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof billDownloadBill>>> = () =>
		billDownloadBill(tableBookingId);

	return { queryKey, queryFn, enabled: !!tableBookingId, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof billDownloadBill>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type BillDownloadBillQueryResult = NonNullable<Awaited<ReturnType<typeof billDownloadBill>>>;
export type BillDownloadBillQueryError = ErrorType<void | InternalErrorResponse>;

export function createBillDownloadBill<
	TData = Awaited<ReturnType<typeof billDownloadBill>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	tableBookingId: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof billDownloadBill>>, TError, TData>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getBillDownloadBillQueryOptions(tableBookingId, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
