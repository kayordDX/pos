// @ts-nocheck
/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation } from "@tanstack/svelte-query";
import type { CreateMutationOptions, MutationFunction } from "@tanstack/svelte-query";
import type { ErrorResponse, InternalErrorResponse, Request17, Response4 } from "./api.schemas";
import { useCustomClient } from "../mutator/useCustomClient";
import type { ErrorType, BodyType } from "../mutator/useCustomClient";

export const useSessionLoginHook = () => {
	const sessionLogin = useCustomClient<Response4>();

	return (request17: BodyType<Request17>) => {
		return sessionLogin({
			url: `/session/login`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: request17,
		});
	};
};

export const useSessionLoginMutationOptions = <
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useSessionLoginHook>>>,
		TError,
		{ data: BodyType<Request17> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useSessionLoginHook>>>,
	TError,
	{ data: BodyType<Request17> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const sessionLogin = useSessionLoginHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useSessionLoginHook>>>,
		{ data: BodyType<Request17> }
	> = (props) => {
		const { data } = props ?? {};

		return sessionLogin(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type SessionLoginMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useSessionLoginHook>>>
>;
export type SessionLoginMutationBody = BodyType<Request17>;
export type SessionLoginMutationError = ErrorType<ErrorResponse | InternalErrorResponse>;

export const createSessionLogin = <
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useSessionLoginHook>>>,
		TError,
		{ data: BodyType<Request17> },
		TContext
	>;
}) => {
	const mutationOptions = useSessionLoginMutationOptions(options);

	return createMutation(mutationOptions);
};
