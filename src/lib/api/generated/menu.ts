// @ts-nocheck
/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateQueryOptions,
	CreateQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type {
	ErrorResponse,
	InternalErrorResponse,
	Menu,
	MenuGetOutletMenuGetOutletMenusParams,
	MenuGetSectionsGetOutletMenusParams,
	MenuListParams,
	Request26,
	Request31,
	Response5,
} from "./api.schemas";
import { useCustomClient } from "../mutator/useCustomClient";
import type { ErrorType, BodyType } from "../mutator/useCustomClient";

export const useMenuUpdateHook = () => {
	const menuUpdate = useCustomClient<Menu>();

	return (menuId: string | null, request26: BodyType<Request26>) => {
		return menuUpdate({
			url: `/menu/${menuId}`,
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			data: request26,
		});
	};
};

export const useMenuUpdateMutationOptions = <
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useMenuUpdateHook>>>,
		TError,
		{ menuId: string | null; data: BodyType<Request26> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useMenuUpdateHook>>>,
	TError,
	{ menuId: string | null; data: BodyType<Request26> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const menuUpdate = useMenuUpdateHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useMenuUpdateHook>>>,
		{ menuId: string | null; data: BodyType<Request26> }
	> = (props) => {
		const { menuId, data } = props ?? {};

		return menuUpdate(menuId, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type MenuUpdateMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useMenuUpdateHook>>>
>;
export type MenuUpdateMutationBody = BodyType<Request26>;
export type MenuUpdateMutationError = ErrorType<ErrorResponse | InternalErrorResponse>;

export const createMenuUpdate = <
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useMenuUpdateHook>>>,
		TError,
		{ menuId: string | null; data: BodyType<Request26> },
		TContext
	>;
}) => {
	const mutationOptions = useMenuUpdateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const useMenuGetHook = () => {
	const menuGet = useCustomClient<Menu>();

	return (menuId: number) => {
		return menuGet({ url: `/menu/${menuId}`, method: "GET" });
	};
};

export const getMenuGetQueryKey = (menuId: number) => {
	return [`/menu/${menuId}`] as const;
};

export const useMenuGetQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuGetHook>>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	menuId: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<ReturnType<typeof useMenuGetHook>>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMenuGetQueryKey(menuId);

	const menuGet = useMenuGetHook();

	const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useMenuGetHook>>>> = () =>
		menuGet(menuId);

	return { queryKey, queryFn, enabled: !!menuId, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useMenuGetHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type MenuGetQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useMenuGetHook>>>
>;
export type MenuGetQueryError = ErrorType<InternalErrorResponse>;

export const createMenuGet = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuGetHook>>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	menuId: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<ReturnType<typeof useMenuGetHook>>>, TError, TData>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useMenuGetQueryOptions(menuId, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const useMenuGetSectionsGetOutletMenusHook = () => {
	const menuGetSectionsGetOutletMenus = useCustomClient<Response5>();

	return (params: MenuGetSectionsGetOutletMenusParams) => {
		return menuGetSectionsGetOutletMenus({ url: `/menu/sections`, method: "GET", params });
	};
};

export const getMenuGetSectionsGetOutletMenusQueryKey = (
	params: MenuGetSectionsGetOutletMenusParams
) => {
	return [`/menu/sections`, ...(params ? [params] : [])] as const;
};

export const useMenuGetSectionsGetOutletMenusQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuGetSectionsGetOutletMenusHook>>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: MenuGetSectionsGetOutletMenusParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useMenuGetSectionsGetOutletMenusHook>>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMenuGetSectionsGetOutletMenusQueryKey(params);

	const menuGetSectionsGetOutletMenus = useMenuGetSectionsGetOutletMenusHook();

	const queryFn: QueryFunction<
		Awaited<ReturnType<ReturnType<typeof useMenuGetSectionsGetOutletMenusHook>>>
	> = () => menuGetSectionsGetOutletMenus(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useMenuGetSectionsGetOutletMenusHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type MenuGetSectionsGetOutletMenusQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useMenuGetSectionsGetOutletMenusHook>>>
>;
export type MenuGetSectionsGetOutletMenusQueryError = ErrorType<InternalErrorResponse>;

export const createMenuGetSectionsGetOutletMenus = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuGetSectionsGetOutletMenusHook>>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: MenuGetSectionsGetOutletMenusParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useMenuGetSectionsGetOutletMenusHook>>>,
				TError,
				TData
			>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useMenuGetSectionsGetOutletMenusQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const useMenuGetOutletMenuGetOutletMenusHook = () => {
	const menuGetOutletMenuGetOutletMenus = useCustomClient<Menu[]>();

	return (params: MenuGetOutletMenuGetOutletMenusParams) => {
		return menuGetOutletMenuGetOutletMenus({ url: `/menu/outletMenus`, method: "GET", params });
	};
};

export const getMenuGetOutletMenuGetOutletMenusQueryKey = (
	params: MenuGetOutletMenuGetOutletMenusParams
) => {
	return [`/menu/outletMenus`, ...(params ? [params] : [])] as const;
};

export const useMenuGetOutletMenuGetOutletMenusQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuGetOutletMenuGetOutletMenusHook>>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: MenuGetOutletMenuGetOutletMenusParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useMenuGetOutletMenuGetOutletMenusHook>>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMenuGetOutletMenuGetOutletMenusQueryKey(params);

	const menuGetOutletMenuGetOutletMenus = useMenuGetOutletMenuGetOutletMenusHook();

	const queryFn: QueryFunction<
		Awaited<ReturnType<ReturnType<typeof useMenuGetOutletMenuGetOutletMenusHook>>>
	> = () => menuGetOutletMenuGetOutletMenus(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useMenuGetOutletMenuGetOutletMenusHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type MenuGetOutletMenuGetOutletMenusQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useMenuGetOutletMenuGetOutletMenusHook>>>
>;
export type MenuGetOutletMenuGetOutletMenusQueryError = ErrorType<InternalErrorResponse>;

export const createMenuGetOutletMenuGetOutletMenus = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuGetOutletMenuGetOutletMenusHook>>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: MenuGetOutletMenuGetOutletMenusParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useMenuGetOutletMenuGetOutletMenusHook>>>,
				TError,
				TData
			>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useMenuGetOutletMenuGetOutletMenusQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const useMenuListHook = () => {
	const menuList = useCustomClient<Menu[]>();

	return (params: MenuListParams) => {
		return menuList({ url: `/menu`, method: "GET", params });
	};
};

export const getMenuListQueryKey = (params: MenuListParams) => {
	return [`/menu`, ...(params ? [params] : [])] as const;
};

export const useMenuListQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuListHook>>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: MenuListParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<ReturnType<typeof useMenuListHook>>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMenuListQueryKey(params);

	const menuList = useMenuListHook();

	const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useMenuListHook>>>> = () =>
		menuList(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useMenuListHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type MenuListQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useMenuListHook>>>
>;
export type MenuListQueryError = ErrorType<InternalErrorResponse>;

export const createMenuList = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuListHook>>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: MenuListParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<ReturnType<typeof useMenuListHook>>>, TError, TData>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useMenuListQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const useMenuCreateHook = () => {
	const menuCreate = useCustomClient<Menu>();

	return (request31: BodyType<Request31>) => {
		return menuCreate({
			url: `/menu`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: request31,
		});
	};
};

export const useMenuCreateMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useMenuCreateHook>>>,
		TError,
		{ data: BodyType<Request31> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useMenuCreateHook>>>,
	TError,
	{ data: BodyType<Request31> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const menuCreate = useMenuCreateHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useMenuCreateHook>>>,
		{ data: BodyType<Request31> }
	> = (props) => {
		const { data } = props ?? {};

		return menuCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type MenuCreateMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useMenuCreateHook>>>
>;
export type MenuCreateMutationBody = BodyType<Request31>;
export type MenuCreateMutationError = ErrorType<InternalErrorResponse>;

export const createMenuCreate = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useMenuCreateHook>>>,
		TError,
		{ data: BodyType<Request31> },
		TContext
	>;
}) => {
	const mutationOptions = useMenuCreateMutationOptions(options);

	return createMutation(mutationOptions);
};
