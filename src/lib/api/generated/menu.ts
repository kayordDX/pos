// @ts-nocheck
/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type {
	DTOMenuItemDTO,
	DTOMenuItemDTOBasic,
	EntitiesMenu,
	ErrorResponse,
	InternalErrorResponse,
	MenuCreateRequest,
	MenuGetItemGetMenuItemsParams,
	MenuGetItemsGetMenuItemsParams,
	MenuGetOutletMenuGetOutletMenusParams,
	MenuGetSectionsGetMenusSectionsParams,
	MenuGetSectionsResponse,
	MenuListParams,
	MenuUpdateRequest,
} from "./api.schemas";
import { useCustomClient } from "../mutator/useCustomClient";
import type { ErrorType, BodyType } from "../mutator/useCustomClient";

export const useMenuUpdateHook = () => {
	const menuUpdate = useCustomClient<EntitiesMenu>();

	return (menuId: string, menuUpdateRequest: BodyType<MenuUpdateRequest>) => {
		return menuUpdate({
			url: `/menu/${menuId}`,
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			data: menuUpdateRequest,
		});
	};
};

export const useMenuUpdateMutationOptions = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useMenuUpdateHook>>>,
		TError,
		{ menuId: string; data: BodyType<MenuUpdateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useMenuUpdateHook>>>,
	TError,
	{ menuId: string; data: BodyType<MenuUpdateRequest> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const menuUpdate = useMenuUpdateHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useMenuUpdateHook>>>,
		{ menuId: string; data: BodyType<MenuUpdateRequest> }
	> = (props) => {
		const { menuId, data } = props ?? {};

		return menuUpdate(menuId, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type MenuUpdateMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useMenuUpdateHook>>>
>;
export type MenuUpdateMutationBody = BodyType<MenuUpdateRequest>;
export type MenuUpdateMutationError = ErrorType<ErrorResponse | void | InternalErrorResponse>;

export const createMenuUpdate = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useMenuUpdateHook>>>,
		TError,
		{ menuId: string; data: BodyType<MenuUpdateRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<ReturnType<typeof useMenuUpdateHook>>>,
	TError,
	{ menuId: string; data: BodyType<MenuUpdateRequest> },
	TContext
> => {
	const mutationOptions = useMenuUpdateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const useMenuGetHook = () => {
	const menuGet = useCustomClient<EntitiesMenu>();

	return (menuId: number) => {
		return menuGet({ url: `/menu/${menuId}`, method: "GET" });
	};
};

export const getMenuGetQueryKey = (menuId: number) => {
	return [`/menu/${menuId}`] as const;
};

export const useMenuGetQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuGetHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	menuId: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<ReturnType<typeof useMenuGetHook>>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMenuGetQueryKey(menuId);

	const menuGet = useMenuGetHook();

	const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useMenuGetHook>>>> = () =>
		menuGet(menuId);

	return { queryKey, queryFn, enabled: !!menuId, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useMenuGetHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type MenuGetQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useMenuGetHook>>>
>;
export type MenuGetQueryError = ErrorType<void | InternalErrorResponse>;

export const createMenuGet = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuGetHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	menuId: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<ReturnType<typeof useMenuGetHook>>>, TError, TData>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useMenuGetQueryOptions(menuId, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const useMenuGetSectionsGetMenusSectionsHook = () => {
	const menuGetSectionsGetMenusSections = useCustomClient<MenuGetSectionsResponse>();

	return (params: MenuGetSectionsGetMenusSectionsParams) => {
		return menuGetSectionsGetMenusSections({ url: `/menu/sections`, method: "GET", params });
	};
};

export const getMenuGetSectionsGetMenusSectionsQueryKey = (
	params: MenuGetSectionsGetMenusSectionsParams
) => {
	return [`/menu/sections`, ...(params ? [params] : [])] as const;
};

export const useMenuGetSectionsGetMenusSectionsQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuGetSectionsGetMenusSectionsHook>>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: MenuGetSectionsGetMenusSectionsParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useMenuGetSectionsGetMenusSectionsHook>>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMenuGetSectionsGetMenusSectionsQueryKey(params);

	const menuGetSectionsGetMenusSections = useMenuGetSectionsGetMenusSectionsHook();

	const queryFn: QueryFunction<
		Awaited<ReturnType<ReturnType<typeof useMenuGetSectionsGetMenusSectionsHook>>>
	> = () => menuGetSectionsGetMenusSections(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useMenuGetSectionsGetMenusSectionsHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type MenuGetSectionsGetMenusSectionsQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useMenuGetSectionsGetMenusSectionsHook>>>
>;
export type MenuGetSectionsGetMenusSectionsQueryError = ErrorType<InternalErrorResponse>;

export const createMenuGetSectionsGetMenusSections = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuGetSectionsGetMenusSectionsHook>>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: MenuGetSectionsGetMenusSectionsParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useMenuGetSectionsGetMenusSectionsHook>>>,
				TError,
				TData
			>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useMenuGetSectionsGetMenusSectionsQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const useMenuGetOutletMenuGetOutletMenusHook = () => {
	const menuGetOutletMenuGetOutletMenus = useCustomClient<EntitiesMenu[]>();

	return (params: MenuGetOutletMenuGetOutletMenusParams) => {
		return menuGetOutletMenuGetOutletMenus({ url: `/menu/outletMenus`, method: "GET", params });
	};
};

export const getMenuGetOutletMenuGetOutletMenusQueryKey = (
	params: MenuGetOutletMenuGetOutletMenusParams
) => {
	return [`/menu/outletMenus`, ...(params ? [params] : [])] as const;
};

export const useMenuGetOutletMenuGetOutletMenusQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuGetOutletMenuGetOutletMenusHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: MenuGetOutletMenuGetOutletMenusParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useMenuGetOutletMenuGetOutletMenusHook>>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMenuGetOutletMenuGetOutletMenusQueryKey(params);

	const menuGetOutletMenuGetOutletMenus = useMenuGetOutletMenuGetOutletMenusHook();

	const queryFn: QueryFunction<
		Awaited<ReturnType<ReturnType<typeof useMenuGetOutletMenuGetOutletMenusHook>>>
	> = () => menuGetOutletMenuGetOutletMenus(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useMenuGetOutletMenuGetOutletMenusHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type MenuGetOutletMenuGetOutletMenusQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useMenuGetOutletMenuGetOutletMenusHook>>>
>;
export type MenuGetOutletMenuGetOutletMenusQueryError = ErrorType<void | InternalErrorResponse>;

export const createMenuGetOutletMenuGetOutletMenus = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuGetOutletMenuGetOutletMenusHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: MenuGetOutletMenuGetOutletMenusParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useMenuGetOutletMenuGetOutletMenusHook>>>,
				TError,
				TData
			>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useMenuGetOutletMenuGetOutletMenusQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const useMenuGetItemsGetMenuItemsHook = () => {
	const menuGetItemsGetMenuItems = useCustomClient<DTOMenuItemDTOBasic[]>();

	return (params: MenuGetItemsGetMenuItemsParams) => {
		return menuGetItemsGetMenuItems({ url: `/menu/items`, method: "GET", params });
	};
};

export const getMenuGetItemsGetMenuItemsQueryKey = (params: MenuGetItemsGetMenuItemsParams) => {
	return [`/menu/items`, ...(params ? [params] : [])] as const;
};

export const useMenuGetItemsGetMenuItemsQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuGetItemsGetMenuItemsHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: MenuGetItemsGetMenuItemsParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useMenuGetItemsGetMenuItemsHook>>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMenuGetItemsGetMenuItemsQueryKey(params);

	const menuGetItemsGetMenuItems = useMenuGetItemsGetMenuItemsHook();

	const queryFn: QueryFunction<
		Awaited<ReturnType<ReturnType<typeof useMenuGetItemsGetMenuItemsHook>>>
	> = () => menuGetItemsGetMenuItems(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useMenuGetItemsGetMenuItemsHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type MenuGetItemsGetMenuItemsQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useMenuGetItemsGetMenuItemsHook>>>
>;
export type MenuGetItemsGetMenuItemsQueryError = ErrorType<void | InternalErrorResponse>;

export const createMenuGetItemsGetMenuItems = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuGetItemsGetMenuItemsHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: MenuGetItemsGetMenuItemsParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useMenuGetItemsGetMenuItemsHook>>>,
				TError,
				TData
			>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useMenuGetItemsGetMenuItemsQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const useMenuGetItemGetMenuItemsHook = () => {
	const menuGetItemGetMenuItems = useCustomClient<DTOMenuItemDTO>();

	return (params: MenuGetItemGetMenuItemsParams) => {
		return menuGetItemGetMenuItems({ url: `/menu/item`, method: "GET", params });
	};
};

export const getMenuGetItemGetMenuItemsQueryKey = (params: MenuGetItemGetMenuItemsParams) => {
	return [`/menu/item`, ...(params ? [params] : [])] as const;
};

export const useMenuGetItemGetMenuItemsQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuGetItemGetMenuItemsHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: MenuGetItemGetMenuItemsParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useMenuGetItemGetMenuItemsHook>>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMenuGetItemGetMenuItemsQueryKey(params);

	const menuGetItemGetMenuItems = useMenuGetItemGetMenuItemsHook();

	const queryFn: QueryFunction<
		Awaited<ReturnType<ReturnType<typeof useMenuGetItemGetMenuItemsHook>>>
	> = () => menuGetItemGetMenuItems(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useMenuGetItemGetMenuItemsHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type MenuGetItemGetMenuItemsQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useMenuGetItemGetMenuItemsHook>>>
>;
export type MenuGetItemGetMenuItemsQueryError = ErrorType<void | InternalErrorResponse>;

export const createMenuGetItemGetMenuItems = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuGetItemGetMenuItemsHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: MenuGetItemGetMenuItemsParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useMenuGetItemGetMenuItemsHook>>>,
				TError,
				TData
			>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useMenuGetItemGetMenuItemsQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const useMenuListHook = () => {
	const menuList = useCustomClient<EntitiesMenu[]>();

	return (params: MenuListParams) => {
		return menuList({ url: `/menu`, method: "GET", params });
	};
};

export const getMenuListQueryKey = (params: MenuListParams) => {
	return [`/menu`, ...(params ? [params] : [])] as const;
};

export const useMenuListQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuListHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: MenuListParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<ReturnType<typeof useMenuListHook>>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMenuListQueryKey(params);

	const menuList = useMenuListHook();

	const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useMenuListHook>>>> = () =>
		menuList(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useMenuListHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type MenuListQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useMenuListHook>>>
>;
export type MenuListQueryError = ErrorType<void | InternalErrorResponse>;

export const createMenuList = <
	TData = Awaited<ReturnType<ReturnType<typeof useMenuListHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: MenuListParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<ReturnType<typeof useMenuListHook>>>, TError, TData>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useMenuListQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const useMenuCreateHook = () => {
	const menuCreate = useCustomClient<EntitiesMenu>();

	return (menuCreateRequest: BodyType<MenuCreateRequest>) => {
		return menuCreate({
			url: `/menu`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: menuCreateRequest,
		});
	};
};

export const useMenuCreateMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useMenuCreateHook>>>,
		TError,
		{ data: BodyType<MenuCreateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useMenuCreateHook>>>,
	TError,
	{ data: BodyType<MenuCreateRequest> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const menuCreate = useMenuCreateHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useMenuCreateHook>>>,
		{ data: BodyType<MenuCreateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return menuCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type MenuCreateMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useMenuCreateHook>>>
>;
export type MenuCreateMutationBody = BodyType<MenuCreateRequest>;
export type MenuCreateMutationError = ErrorType<void | InternalErrorResponse>;

export const createMenuCreate = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useMenuCreateHook>>>,
		TError,
		{ data: BodyType<MenuCreateRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<ReturnType<typeof useMenuCreateHook>>>,
	TError,
	{ data: BodyType<MenuCreateRequest> },
	TContext
> => {
	const mutationOptions = useMenuCreateMutationOptions(options);

	return createMutation(mutationOptions);
};
