// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";

import type {
	BillCategoryCreateRequest,
	BillCategoryGetAllParams,
	BillCategoryUpdateRequest,
	EntitiesBillCategory,
	ErrorResponse,
	InternalErrorResponse,
} from "./api.schemas";

import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const billCategoryUpdate = (
	id: number,
	billCategoryUpdateRequest: BodyType<BillCategoryUpdateRequest>
) => {
	return customInstance<EntitiesBillCategory>({
		url: `/billCategory/${id}`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: billCategoryUpdateRequest,
	});
};

export const getBillCategoryUpdateMutationOptions = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof billCategoryUpdate>>,
		TError,
		{ id: number; data: BodyType<BillCategoryUpdateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof billCategoryUpdate>>,
	TError,
	{ id: number; data: BodyType<BillCategoryUpdateRequest> },
	TContext
> => {
	const mutationKey = ["billCategoryUpdate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof billCategoryUpdate>>,
		{ id: number; data: BodyType<BillCategoryUpdateRequest> }
	> = (props) => {
		const { id, data } = props ?? {};

		return billCategoryUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type BillCategoryUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof billCategoryUpdate>>
>;
export type BillCategoryUpdateMutationBody = BodyType<BillCategoryUpdateRequest>;
export type BillCategoryUpdateMutationError = ErrorType<
	ErrorResponse | void | InternalErrorResponse
>;

export const createBillCategoryUpdate = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof billCategoryUpdate>>,
			TError,
			{ id: number; data: BodyType<BillCategoryUpdateRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof billCategoryUpdate>>,
	TError,
	{ id: number; data: BodyType<BillCategoryUpdateRequest> },
	TContext
> => {
	const mutationOptions = getBillCategoryUpdateMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const billCategoryGetAll = (params: BillCategoryGetAllParams) => {
	return customInstance<EntitiesBillCategory[]>({ url: `/BillCategory`, method: "GET", params });
};

export const getBillCategoryGetAllQueryKey = (params: BillCategoryGetAllParams) => {
	return [`/BillCategory`, ...(params ? [params] : [])] as const;
};

export const getBillCategoryGetAllQueryOptions = <
	TData = Awaited<ReturnType<typeof billCategoryGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: BillCategoryGetAllParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof billCategoryGetAll>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getBillCategoryGetAllQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof billCategoryGetAll>>> = () =>
		billCategoryGetAll(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof billCategoryGetAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type BillCategoryGetAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof billCategoryGetAll>>
>;
export type BillCategoryGetAllQueryError = ErrorType<void | InternalErrorResponse>;

export function createBillCategoryGetAll<
	TData = Awaited<ReturnType<typeof billCategoryGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: BillCategoryGetAllParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof billCategoryGetAll>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getBillCategoryGetAllQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const billCategoryCreate = (
	billCategoryCreateRequest: BodyType<BillCategoryCreateRequest>
) => {
	return customInstance<EntitiesBillCategory>({
		url: `/billCategory`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: billCategoryCreateRequest,
	});
};

export const getBillCategoryCreateMutationOptions = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof billCategoryCreate>>,
		TError,
		{ data: BodyType<BillCategoryCreateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof billCategoryCreate>>,
	TError,
	{ data: BodyType<BillCategoryCreateRequest> },
	TContext
> => {
	const mutationKey = ["billCategoryCreate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof billCategoryCreate>>,
		{ data: BodyType<BillCategoryCreateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return billCategoryCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type BillCategoryCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof billCategoryCreate>>
>;
export type BillCategoryCreateMutationBody = BodyType<BillCategoryCreateRequest>;
export type BillCategoryCreateMutationError = ErrorType<
	ErrorResponse | void | InternalErrorResponse
>;

export const createBillCategoryCreate = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof billCategoryCreate>>,
			TError,
			{ data: BodyType<BillCategoryCreateRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof billCategoryCreate>>,
	TError,
	{ data: BodyType<BillCategoryCreateRequest> },
	TContext
> => {
	const mutationOptions = getBillCategoryCreateMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
