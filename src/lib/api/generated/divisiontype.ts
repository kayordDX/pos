/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";

import type {
	DivisionTypeCreateRequest,
	DivisionTypeEditRequest,
	DivisionTypeGetAllParams,
	EntitiesDivisionType,
	ErrorResponse,
	InternalErrorResponse,
} from "./api.schemas";

import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const divisionTypeGetAll = (params: DivisionTypeGetAllParams) => {
	return customInstance<EntitiesDivisionType[]>({ url: `/divisionType`, method: "GET", params });
};

export const getDivisionTypeGetAllQueryKey = (params?: DivisionTypeGetAllParams) => {
	return [`/divisionType`, ...(params ? [params] : [])] as const;
};

export const getDivisionTypeGetAllQueryOptions = <
	TData = Awaited<ReturnType<typeof divisionTypeGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: DivisionTypeGetAllParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof divisionTypeGetAll>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getDivisionTypeGetAllQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof divisionTypeGetAll>>> = () =>
		divisionTypeGetAll(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof divisionTypeGetAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DivisionTypeGetAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof divisionTypeGetAll>>
>;
export type DivisionTypeGetAllQueryError = ErrorType<void | InternalErrorResponse>;

export function createDivisionTypeGetAll<
	TData = Awaited<ReturnType<typeof divisionTypeGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: DivisionTypeGetAllParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof divisionTypeGetAll>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getDivisionTypeGetAllQueryOptions(params, options);

	const query = createQuery(() => ({ ...queryOptions, queryClient })) as CreateQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const divisionTypeEdit = (divisionTypeEditRequest: BodyType<DivisionTypeEditRequest>) => {
	return customInstance<void>({
		url: `/divisionType`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: divisionTypeEditRequest,
	});
};

export const getDivisionTypeEditMutationOptions = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof divisionTypeEdit>>,
		TError,
		{ data: BodyType<DivisionTypeEditRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof divisionTypeEdit>>,
	TError,
	{ data: BodyType<DivisionTypeEditRequest> },
	TContext
> => {
	const mutationKey = ["divisionTypeEdit"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof divisionTypeEdit>>,
		{ data: BodyType<DivisionTypeEditRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return divisionTypeEdit(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type DivisionTypeEditMutationResult = NonNullable<
	Awaited<ReturnType<typeof divisionTypeEdit>>
>;
export type DivisionTypeEditMutationBody = BodyType<DivisionTypeEditRequest>;
export type DivisionTypeEditMutationError = ErrorType<ErrorResponse | void | InternalErrorResponse>;

export const createDivisionTypeEdit = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof divisionTypeEdit>>,
			TError,
			{ data: BodyType<DivisionTypeEditRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof divisionTypeEdit>>,
	TError,
	{ data: BodyType<DivisionTypeEditRequest> },
	TContext
> => {
	const mutationOptions = getDivisionTypeEditMutationOptions(options);

	return createMutation(() => ({ ...mutationOptions, queryClient }));
};
export const divisionTypeCreate = (
	divisionTypeCreateRequest: BodyType<DivisionTypeCreateRequest>
) => {
	return customInstance<EntitiesDivisionType>({
		url: `/divisionType`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: divisionTypeCreateRequest,
	});
};

export const getDivisionTypeCreateMutationOptions = <
	TError = ErrorType<void | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof divisionTypeCreate>>,
		TError,
		{ data: BodyType<DivisionTypeCreateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof divisionTypeCreate>>,
	TError,
	{ data: BodyType<DivisionTypeCreateRequest> },
	TContext
> => {
	const mutationKey = ["divisionTypeCreate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof divisionTypeCreate>>,
		{ data: BodyType<DivisionTypeCreateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return divisionTypeCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type DivisionTypeCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof divisionTypeCreate>>
>;
export type DivisionTypeCreateMutationBody = BodyType<DivisionTypeCreateRequest>;
export type DivisionTypeCreateMutationError = ErrorType<void | void | InternalErrorResponse>;

export const createDivisionTypeCreate = <
	TError = ErrorType<void | void | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof divisionTypeCreate>>,
			TError,
			{ data: BodyType<DivisionTypeCreateRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof divisionTypeCreate>>,
	TError,
	{ data: BodyType<DivisionTypeCreateRequest> },
	TContext
> => {
	const mutationOptions = getDivisionTypeCreateMutationOptions(options);

	return createMutation(() => ({ ...mutationOptions, queryClient }));
};
