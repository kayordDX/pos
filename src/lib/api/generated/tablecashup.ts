// @ts-nocheck
/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateQueryOptions,
	CreateQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type { ErrorResponse, InternalErrorResponse, Request9, TableCashUp } from "./api.schemas";
import { useCustomClient } from "../mutator/useCustomClient";
import type { ErrorType, BodyType } from "../mutator/useCustomClient";

export const useTableCashUpViewTableCashUpsHook = () => {
	const tableCashUpViewTableCashUps = useCustomClient<TableCashUp[]>();

	return (tableBookingId: number) => {
		return tableCashUpViewTableCashUps({
			url: `/tablecashup/tablebooking/${tableBookingId}`,
			method: "GET",
		});
	};
};

export const getTableCashUpViewTableCashUpsQueryKey = (tableBookingId: number) => {
	return [`/tablecashup/tablebooking/${tableBookingId}`] as const;
};

export const useTableCashUpViewTableCashUpsQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useTableCashUpViewTableCashUpsHook>>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	tableBookingId: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useTableCashUpViewTableCashUpsHook>>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTableCashUpViewTableCashUpsQueryKey(tableBookingId);

	const tableCashUpViewTableCashUps = useTableCashUpViewTableCashUpsHook();

	const queryFn: QueryFunction<
		Awaited<ReturnType<ReturnType<typeof useTableCashUpViewTableCashUpsHook>>>
	> = () => tableCashUpViewTableCashUps(tableBookingId);

	return { queryKey, queryFn, enabled: !!tableBookingId, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useTableCashUpViewTableCashUpsHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type TableCashUpViewTableCashUpsQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useTableCashUpViewTableCashUpsHook>>>
>;
export type TableCashUpViewTableCashUpsQueryError = ErrorType<InternalErrorResponse>;

export const createTableCashUpViewTableCashUps = <
	TData = Awaited<ReturnType<ReturnType<typeof useTableCashUpViewTableCashUpsHook>>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	tableBookingId: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useTableCashUpViewTableCashUpsHook>>>,
				TError,
				TData
			>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useTableCashUpViewTableCashUpsQueryOptions(tableBookingId, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const useTableCashUpCreateHook = () => {
	const tableCashUpCreate = useCustomClient<TableCashUp>();

	return (request9: BodyType<Request9>) => {
		return tableCashUpCreate({
			url: `/tableCashup`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: request9,
		});
	};
};

export const useTableCashUpCreateMutationOptions = <
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useTableCashUpCreateHook>>>,
		TError,
		{ data: BodyType<Request9> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useTableCashUpCreateHook>>>,
	TError,
	{ data: BodyType<Request9> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const tableCashUpCreate = useTableCashUpCreateHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useTableCashUpCreateHook>>>,
		{ data: BodyType<Request9> }
	> = (props) => {
		const { data } = props ?? {};

		return tableCashUpCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type TableCashUpCreateMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useTableCashUpCreateHook>>>
>;
export type TableCashUpCreateMutationBody = BodyType<Request9>;
export type TableCashUpCreateMutationError = ErrorType<ErrorResponse | InternalErrorResponse>;

export const createTableCashUpCreate = <
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useTableCashUpCreateHook>>>,
		TError,
		{ data: BodyType<Request9> },
		TContext
	>;
}) => {
	const mutationOptions = useTableCashUpCreateMutationOptions(options);

	return createMutation(mutationOptions);
};
