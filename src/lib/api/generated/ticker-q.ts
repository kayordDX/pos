// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";

import type {
	TickerQCancelTickerByIdParams,
	TickerQDashboardRequestsSetBatchParentRequest,
	TickerQDashboardRequestsUnbatchTickerRequest,
	TickerQDeleteCronTickerOccurrenceParams,
	TickerQDeleteCronTickerParams,
	TickerQDeleteTimeTickerParams,
	TickerQGetCronTickerOccurrencesGraphDataParams,
	TickerQGetCronTickerOccurrencesParams,
	TickerQGetCronTickersByIdGraphDataByRangeParams,
	TickerQGetCronTickersGraphDataByRangeParams,
	TickerQGetTickerRequestByIdParams,
	TickerQGetTimeTickersGraphDataByRangeParams,
	TickerQRunCronTickerOnDemandParams,
	TickerQUpdateCronTickerParams,
	TickerQUpdateTimeTickerParams,
	TickerQUtilitiesDashboardDtosAddCronTickerRequest,
	TickerQUtilitiesDashboardDtosAddTimeTickerRequest,
	TickerQUtilitiesDashboardDtosUpdateCronTickerRequest,
	TickerQUtilitiesDashboardDtosUpdateTimeTickerRequest,
} from "./api.schemas";

import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const tickerQGetOptions = () => {
	return customInstance<Blob>({ url: `/api/options`, method: "GET", responseType: "blob" });
};

export const getTickerQGetOptionsQueryKey = () => {
	return [`/api/options`] as const;
};

export const getTickerQGetOptionsQueryOptions = <
	TData = Awaited<ReturnType<typeof tickerQGetOptions>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetOptions>>, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTickerQGetOptionsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof tickerQGetOptions>>> = () =>
		tickerQGetOptions();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof tickerQGetOptions>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TickerQGetOptionsQueryResult = NonNullable<
	Awaited<ReturnType<typeof tickerQGetOptions>>
>;
export type TickerQGetOptionsQueryError = ErrorType<unknown>;

export function createTickerQGetOptions<
	TData = Awaited<ReturnType<typeof tickerQGetOptions>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetOptions>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getTickerQGetOptionsQueryOptions(options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const tickerQGetCronTickers = () => {
	return customInstance<Blob>({ url: `/api/cron-tickers`, method: "GET", responseType: "blob" });
};

export const getTickerQGetCronTickersQueryKey = () => {
	return [`/api/cron-tickers`] as const;
};

export const getTickerQGetCronTickersQueryOptions = <
	TData = Awaited<ReturnType<typeof tickerQGetCronTickers>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetCronTickers>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTickerQGetCronTickersQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof tickerQGetCronTickers>>> = () =>
		tickerQGetCronTickers();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof tickerQGetCronTickers>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TickerQGetCronTickersQueryResult = NonNullable<
	Awaited<ReturnType<typeof tickerQGetCronTickers>>
>;
export type TickerQGetCronTickersQueryError = ErrorType<unknown>;

export function createTickerQGetCronTickers<
	TData = Awaited<ReturnType<typeof tickerQGetCronTickers>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetCronTickers>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getTickerQGetCronTickersQueryOptions(options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const tickerQGetTimeTickers = () => {
	return customInstance<Blob>({ url: `/api/time-tickers`, method: "GET", responseType: "blob" });
};

export const getTickerQGetTimeTickersQueryKey = () => {
	return [`/api/time-tickers`] as const;
};

export const getTickerQGetTimeTickersQueryOptions = <
	TData = Awaited<ReturnType<typeof tickerQGetTimeTickers>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetTimeTickers>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTickerQGetTimeTickersQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof tickerQGetTimeTickers>>> = () =>
		tickerQGetTimeTickers();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof tickerQGetTimeTickers>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TickerQGetTimeTickersQueryResult = NonNullable<
	Awaited<ReturnType<typeof tickerQGetTimeTickers>>
>;
export type TickerQGetTimeTickersQueryError = ErrorType<unknown>;

export function createTickerQGetTimeTickers<
	TData = Awaited<ReturnType<typeof tickerQGetTimeTickers>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetTimeTickers>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getTickerQGetTimeTickersQueryOptions(options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const tickerQGetTimeTickersGraphDataByRange = (
	params?: TickerQGetTimeTickersGraphDataByRangeParams
) => {
	return customInstance<Blob>({
		url: `/api/time-tickers/:graph-data-range`,
		method: "GET",
		params,
		responseType: "blob",
	});
};

export const getTickerQGetTimeTickersGraphDataByRangeQueryKey = (
	params?: TickerQGetTimeTickersGraphDataByRangeParams
) => {
	return [`/api/time-tickers/:graph-data-range`, ...(params ? [params] : [])] as const;
};

export const getTickerQGetTimeTickersGraphDataByRangeQueryOptions = <
	TData = Awaited<ReturnType<typeof tickerQGetTimeTickersGraphDataByRange>>,
	TError = ErrorType<unknown>,
>(
	params?: TickerQGetTimeTickersGraphDataByRangeParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<typeof tickerQGetTimeTickersGraphDataByRange>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getTickerQGetTimeTickersGraphDataByRangeQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof tickerQGetTimeTickersGraphDataByRange>>
	> = () => tickerQGetTimeTickersGraphDataByRange(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof tickerQGetTimeTickersGraphDataByRange>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TickerQGetTimeTickersGraphDataByRangeQueryResult = NonNullable<
	Awaited<ReturnType<typeof tickerQGetTimeTickersGraphDataByRange>>
>;
export type TickerQGetTimeTickersGraphDataByRangeQueryError = ErrorType<unknown>;

export function createTickerQGetTimeTickersGraphDataByRange<
	TData = Awaited<ReturnType<typeof tickerQGetTimeTickersGraphDataByRange>>,
	TError = ErrorType<unknown>,
>(
	params?: TickerQGetTimeTickersGraphDataByRangeParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<typeof tickerQGetTimeTickersGraphDataByRange>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getTickerQGetTimeTickersGraphDataByRangeQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const tickerQGetTimeTickersGraphData = () => {
	return customInstance<Blob>({
		url: `/api/time-tickers/:graph-data`,
		method: "GET",
		responseType: "blob",
	});
};

export const getTickerQGetTimeTickersGraphDataQueryKey = () => {
	return [`/api/time-tickers/:graph-data`] as const;
};

export const getTickerQGetTimeTickersGraphDataQueryOptions = <
	TData = Awaited<ReturnType<typeof tickerQGetTimeTickersGraphData>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetTimeTickersGraphData>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTickerQGetTimeTickersGraphDataQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof tickerQGetTimeTickersGraphData>>> = () =>
		tickerQGetTimeTickersGraphData();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof tickerQGetTimeTickersGraphData>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TickerQGetTimeTickersGraphDataQueryResult = NonNullable<
	Awaited<ReturnType<typeof tickerQGetTimeTickersGraphData>>
>;
export type TickerQGetTimeTickersGraphDataQueryError = ErrorType<unknown>;

export function createTickerQGetTimeTickersGraphData<
	TData = Awaited<ReturnType<typeof tickerQGetTimeTickersGraphData>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetTimeTickersGraphData>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getTickerQGetTimeTickersGraphDataQueryOptions(options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const tickerQSetBatchParent = (
	tickerQDashboardRequestsSetBatchParentRequest: BodyType<TickerQDashboardRequestsSetBatchParentRequest>
) => {
	return customInstance<Blob>({
		url: `/api/time-tickers/set-batch-parent`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: tickerQDashboardRequestsSetBatchParentRequest,
		responseType: "blob",
	});
};

export const getTickerQSetBatchParentMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof tickerQSetBatchParent>>,
		TError,
		{ data: BodyType<TickerQDashboardRequestsSetBatchParentRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof tickerQSetBatchParent>>,
	TError,
	{ data: BodyType<TickerQDashboardRequestsSetBatchParentRequest> },
	TContext
> => {
	const mutationKey = ["tickerQSetBatchParent"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof tickerQSetBatchParent>>,
		{ data: BodyType<TickerQDashboardRequestsSetBatchParentRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return tickerQSetBatchParent(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type TickerQSetBatchParentMutationResult = NonNullable<
	Awaited<ReturnType<typeof tickerQSetBatchParent>>
>;
export type TickerQSetBatchParentMutationBody =
	BodyType<TickerQDashboardRequestsSetBatchParentRequest>;
export type TickerQSetBatchParentMutationError = ErrorType<unknown>;

export const createTickerQSetBatchParent = <TError = ErrorType<unknown>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof tickerQSetBatchParent>>,
			TError,
			{ data: BodyType<TickerQDashboardRequestsSetBatchParentRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof tickerQSetBatchParent>>,
	TError,
	{ data: BodyType<TickerQDashboardRequestsSetBatchParentRequest> },
	TContext
> => {
	const mutationOptions = getTickerQSetBatchParentMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const tickerQUnbatchTimeTicker = (
	tickerQDashboardRequestsUnbatchTickerRequest: BodyType<TickerQDashboardRequestsUnbatchTickerRequest>
) => {
	return customInstance<Blob>({
		url: `/api/time-tickers/unbatch`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: tickerQDashboardRequestsUnbatchTickerRequest,
		responseType: "blob",
	});
};

export const getTickerQUnbatchTimeTickerMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof tickerQUnbatchTimeTicker>>,
		TError,
		{ data: BodyType<TickerQDashboardRequestsUnbatchTickerRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof tickerQUnbatchTimeTicker>>,
	TError,
	{ data: BodyType<TickerQDashboardRequestsUnbatchTickerRequest> },
	TContext
> => {
	const mutationKey = ["tickerQUnbatchTimeTicker"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof tickerQUnbatchTimeTicker>>,
		{ data: BodyType<TickerQDashboardRequestsUnbatchTickerRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return tickerQUnbatchTimeTicker(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type TickerQUnbatchTimeTickerMutationResult = NonNullable<
	Awaited<ReturnType<typeof tickerQUnbatchTimeTicker>>
>;
export type TickerQUnbatchTimeTickerMutationBody =
	BodyType<TickerQDashboardRequestsUnbatchTickerRequest>;
export type TickerQUnbatchTimeTickerMutationError = ErrorType<unknown>;

export const createTickerQUnbatchTimeTicker = <TError = ErrorType<unknown>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof tickerQUnbatchTimeTicker>>,
			TError,
			{ data: BodyType<TickerQDashboardRequestsUnbatchTickerRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof tickerQUnbatchTimeTicker>>,
	TError,
	{ data: BodyType<TickerQDashboardRequestsUnbatchTickerRequest> },
	TContext
> => {
	const mutationOptions = getTickerQUnbatchTimeTickerMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const tickerQGetCronTickersGraphDataByRange = (
	params?: TickerQGetCronTickersGraphDataByRangeParams
) => {
	return customInstance<Blob>({
		url: `/api/cron-tickers/:graph-data-range`,
		method: "GET",
		params,
		responseType: "blob",
	});
};

export const getTickerQGetCronTickersGraphDataByRangeQueryKey = (
	params?: TickerQGetCronTickersGraphDataByRangeParams
) => {
	return [`/api/cron-tickers/:graph-data-range`, ...(params ? [params] : [])] as const;
};

export const getTickerQGetCronTickersGraphDataByRangeQueryOptions = <
	TData = Awaited<ReturnType<typeof tickerQGetCronTickersGraphDataByRange>>,
	TError = ErrorType<unknown>,
>(
	params?: TickerQGetCronTickersGraphDataByRangeParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<typeof tickerQGetCronTickersGraphDataByRange>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getTickerQGetCronTickersGraphDataByRangeQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof tickerQGetCronTickersGraphDataByRange>>
	> = () => tickerQGetCronTickersGraphDataByRange(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof tickerQGetCronTickersGraphDataByRange>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TickerQGetCronTickersGraphDataByRangeQueryResult = NonNullable<
	Awaited<ReturnType<typeof tickerQGetCronTickersGraphDataByRange>>
>;
export type TickerQGetCronTickersGraphDataByRangeQueryError = ErrorType<unknown>;

export function createTickerQGetCronTickersGraphDataByRange<
	TData = Awaited<ReturnType<typeof tickerQGetCronTickersGraphDataByRange>>,
	TError = ErrorType<unknown>,
>(
	params?: TickerQGetCronTickersGraphDataByRangeParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<typeof tickerQGetCronTickersGraphDataByRange>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getTickerQGetCronTickersGraphDataByRangeQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const tickerQGetCronTickersByIdGraphDataByRange = (
	params?: TickerQGetCronTickersByIdGraphDataByRangeParams
) => {
	return customInstance<Blob>({
		url: `/api/cron-tickers/:graph-data-range-id`,
		method: "GET",
		params,
		responseType: "blob",
	});
};

export const getTickerQGetCronTickersByIdGraphDataByRangeQueryKey = (
	params?: TickerQGetCronTickersByIdGraphDataByRangeParams
) => {
	return [`/api/cron-tickers/:graph-data-range-id`, ...(params ? [params] : [])] as const;
};

export const getTickerQGetCronTickersByIdGraphDataByRangeQueryOptions = <
	TData = Awaited<ReturnType<typeof tickerQGetCronTickersByIdGraphDataByRange>>,
	TError = ErrorType<unknown>,
>(
	params?: TickerQGetCronTickersByIdGraphDataByRangeParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<typeof tickerQGetCronTickersByIdGraphDataByRange>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getTickerQGetCronTickersByIdGraphDataByRangeQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof tickerQGetCronTickersByIdGraphDataByRange>>
	> = () => tickerQGetCronTickersByIdGraphDataByRange(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof tickerQGetCronTickersByIdGraphDataByRange>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TickerQGetCronTickersByIdGraphDataByRangeQueryResult = NonNullable<
	Awaited<ReturnType<typeof tickerQGetCronTickersByIdGraphDataByRange>>
>;
export type TickerQGetCronTickersByIdGraphDataByRangeQueryError = ErrorType<unknown>;

export function createTickerQGetCronTickersByIdGraphDataByRange<
	TData = Awaited<ReturnType<typeof tickerQGetCronTickersByIdGraphDataByRange>>,
	TError = ErrorType<unknown>,
>(
	params?: TickerQGetCronTickersByIdGraphDataByRangeParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<typeof tickerQGetCronTickersByIdGraphDataByRange>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getTickerQGetCronTickersByIdGraphDataByRangeQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const tickerQGetCronTickersGraphData = () => {
	return customInstance<Blob>({
		url: `/api/cron-tickers/:graph-data`,
		method: "GET",
		responseType: "blob",
	});
};

export const getTickerQGetCronTickersGraphDataQueryKey = () => {
	return [`/api/cron-tickers/:graph-data`] as const;
};

export const getTickerQGetCronTickersGraphDataQueryOptions = <
	TData = Awaited<ReturnType<typeof tickerQGetCronTickersGraphData>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetCronTickersGraphData>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTickerQGetCronTickersGraphDataQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof tickerQGetCronTickersGraphData>>> = () =>
		tickerQGetCronTickersGraphData();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof tickerQGetCronTickersGraphData>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TickerQGetCronTickersGraphDataQueryResult = NonNullable<
	Awaited<ReturnType<typeof tickerQGetCronTickersGraphData>>
>;
export type TickerQGetCronTickersGraphDataQueryError = ErrorType<unknown>;

export function createTickerQGetCronTickersGraphData<
	TData = Awaited<ReturnType<typeof tickerQGetCronTickersGraphData>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetCronTickersGraphData>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getTickerQGetCronTickersGraphDataQueryOptions(options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const tickerQGetCronTickerOccurrences = (params?: TickerQGetCronTickerOccurrencesParams) => {
	return customInstance<Blob>({
		url: `/api/cron-ticker-occurrences/:cronTickerId`,
		method: "GET",
		params,
		responseType: "blob",
	});
};

export const getTickerQGetCronTickerOccurrencesQueryKey = (
	params?: TickerQGetCronTickerOccurrencesParams
) => {
	return [`/api/cron-ticker-occurrences/:cronTickerId`, ...(params ? [params] : [])] as const;
};

export const getTickerQGetCronTickerOccurrencesQueryOptions = <
	TData = Awaited<ReturnType<typeof tickerQGetCronTickerOccurrences>>,
	TError = ErrorType<unknown>,
>(
	params?: TickerQGetCronTickerOccurrencesParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetCronTickerOccurrences>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTickerQGetCronTickerOccurrencesQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof tickerQGetCronTickerOccurrences>>> = () =>
		tickerQGetCronTickerOccurrences(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof tickerQGetCronTickerOccurrences>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TickerQGetCronTickerOccurrencesQueryResult = NonNullable<
	Awaited<ReturnType<typeof tickerQGetCronTickerOccurrences>>
>;
export type TickerQGetCronTickerOccurrencesQueryError = ErrorType<unknown>;

export function createTickerQGetCronTickerOccurrences<
	TData = Awaited<ReturnType<typeof tickerQGetCronTickerOccurrences>>,
	TError = ErrorType<unknown>,
>(
	params?: TickerQGetCronTickerOccurrencesParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetCronTickerOccurrences>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getTickerQGetCronTickerOccurrencesQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const tickerQGetCronTickerOccurrencesGraphData = (
	params?: TickerQGetCronTickerOccurrencesGraphDataParams
) => {
	return customInstance<Blob>({
		url: `/api/cron-ticker-occurrences/:cronTickerId/:graph-data`,
		method: "GET",
		params,
		responseType: "blob",
	});
};

export const getTickerQGetCronTickerOccurrencesGraphDataQueryKey = (
	params?: TickerQGetCronTickerOccurrencesGraphDataParams
) => {
	return [
		`/api/cron-ticker-occurrences/:cronTickerId/:graph-data`,
		...(params ? [params] : []),
	] as const;
};

export const getTickerQGetCronTickerOccurrencesGraphDataQueryOptions = <
	TData = Awaited<ReturnType<typeof tickerQGetCronTickerOccurrencesGraphData>>,
	TError = ErrorType<unknown>,
>(
	params?: TickerQGetCronTickerOccurrencesGraphDataParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<typeof tickerQGetCronTickerOccurrencesGraphData>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getTickerQGetCronTickerOccurrencesGraphDataQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof tickerQGetCronTickerOccurrencesGraphData>>
	> = () => tickerQGetCronTickerOccurrencesGraphData(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof tickerQGetCronTickerOccurrencesGraphData>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TickerQGetCronTickerOccurrencesGraphDataQueryResult = NonNullable<
	Awaited<ReturnType<typeof tickerQGetCronTickerOccurrencesGraphData>>
>;
export type TickerQGetCronTickerOccurrencesGraphDataQueryError = ErrorType<unknown>;

export function createTickerQGetCronTickerOccurrencesGraphData<
	TData = Awaited<ReturnType<typeof tickerQGetCronTickerOccurrencesGraphData>>,
	TError = ErrorType<unknown>,
>(
	params?: TickerQGetCronTickerOccurrencesGraphDataParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<typeof tickerQGetCronTickerOccurrencesGraphData>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getTickerQGetCronTickerOccurrencesGraphDataQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const tickerQCancelTickerById = (params?: TickerQCancelTickerByIdParams) => {
	return customInstance<Blob>({
		url: `/api/ticker/:cancel`,
		method: "POST",
		params,
		responseType: "blob",
	});
};

export const getTickerQCancelTickerByIdMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof tickerQCancelTickerById>>,
		TError,
		{ params?: TickerQCancelTickerByIdParams },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof tickerQCancelTickerById>>,
	TError,
	{ params?: TickerQCancelTickerByIdParams },
	TContext
> => {
	const mutationKey = ["tickerQCancelTickerById"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof tickerQCancelTickerById>>,
		{ params?: TickerQCancelTickerByIdParams }
	> = (props) => {
		const { params } = props ?? {};

		return tickerQCancelTickerById(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type TickerQCancelTickerByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof tickerQCancelTickerById>>
>;

export type TickerQCancelTickerByIdMutationError = ErrorType<unknown>;

export const createTickerQCancelTickerById = <TError = ErrorType<unknown>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof tickerQCancelTickerById>>,
			TError,
			{ params?: TickerQCancelTickerByIdParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof tickerQCancelTickerById>>,
	TError,
	{ params?: TickerQCancelTickerByIdParams },
	TContext
> => {
	const mutationOptions = getTickerQCancelTickerByIdMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const tickerQDeleteTimeTicker = (params?: TickerQDeleteTimeTickerParams) => {
	return customInstance<Blob>({
		url: `/api/time-ticker/:delete`,
		method: "DELETE",
		params,
		responseType: "blob",
	});
};

export const getTickerQDeleteTimeTickerMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof tickerQDeleteTimeTicker>>,
		TError,
		{ params?: TickerQDeleteTimeTickerParams },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof tickerQDeleteTimeTicker>>,
	TError,
	{ params?: TickerQDeleteTimeTickerParams },
	TContext
> => {
	const mutationKey = ["tickerQDeleteTimeTicker"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof tickerQDeleteTimeTicker>>,
		{ params?: TickerQDeleteTimeTickerParams }
	> = (props) => {
		const { params } = props ?? {};

		return tickerQDeleteTimeTicker(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type TickerQDeleteTimeTickerMutationResult = NonNullable<
	Awaited<ReturnType<typeof tickerQDeleteTimeTicker>>
>;

export type TickerQDeleteTimeTickerMutationError = ErrorType<unknown>;

export const createTickerQDeleteTimeTicker = <TError = ErrorType<unknown>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof tickerQDeleteTimeTicker>>,
			TError,
			{ params?: TickerQDeleteTimeTickerParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof tickerQDeleteTimeTicker>>,
	TError,
	{ params?: TickerQDeleteTimeTickerParams },
	TContext
> => {
	const mutationOptions = getTickerQDeleteTimeTickerMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const tickerQDeleteCronTicker = (params?: TickerQDeleteCronTickerParams) => {
	return customInstance<Blob>({
		url: `/api/cron-ticker/:delete`,
		method: "DELETE",
		params,
		responseType: "blob",
	});
};

export const getTickerQDeleteCronTickerMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof tickerQDeleteCronTicker>>,
		TError,
		{ params?: TickerQDeleteCronTickerParams },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof tickerQDeleteCronTicker>>,
	TError,
	{ params?: TickerQDeleteCronTickerParams },
	TContext
> => {
	const mutationKey = ["tickerQDeleteCronTicker"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof tickerQDeleteCronTicker>>,
		{ params?: TickerQDeleteCronTickerParams }
	> = (props) => {
		const { params } = props ?? {};

		return tickerQDeleteCronTicker(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type TickerQDeleteCronTickerMutationResult = NonNullable<
	Awaited<ReturnType<typeof tickerQDeleteCronTicker>>
>;

export type TickerQDeleteCronTickerMutationError = ErrorType<unknown>;

export const createTickerQDeleteCronTicker = <TError = ErrorType<unknown>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof tickerQDeleteCronTicker>>,
			TError,
			{ params?: TickerQDeleteCronTickerParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof tickerQDeleteCronTicker>>,
	TError,
	{ params?: TickerQDeleteCronTickerParams },
	TContext
> => {
	const mutationOptions = getTickerQDeleteCronTickerMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const tickerQDeleteCronTickerOccurrence = (
	params?: TickerQDeleteCronTickerOccurrenceParams
) => {
	return customInstance<Blob>({
		url: `/api/cron-ticker-occurrence/:delete`,
		method: "DELETE",
		params,
		responseType: "blob",
	});
};

export const getTickerQDeleteCronTickerOccurrenceMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof tickerQDeleteCronTickerOccurrence>>,
		TError,
		{ params?: TickerQDeleteCronTickerOccurrenceParams },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof tickerQDeleteCronTickerOccurrence>>,
	TError,
	{ params?: TickerQDeleteCronTickerOccurrenceParams },
	TContext
> => {
	const mutationKey = ["tickerQDeleteCronTickerOccurrence"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof tickerQDeleteCronTickerOccurrence>>,
		{ params?: TickerQDeleteCronTickerOccurrenceParams }
	> = (props) => {
		const { params } = props ?? {};

		return tickerQDeleteCronTickerOccurrence(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type TickerQDeleteCronTickerOccurrenceMutationResult = NonNullable<
	Awaited<ReturnType<typeof tickerQDeleteCronTickerOccurrence>>
>;

export type TickerQDeleteCronTickerOccurrenceMutationError = ErrorType<unknown>;

export const createTickerQDeleteCronTickerOccurrence = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof tickerQDeleteCronTickerOccurrence>>,
			TError,
			{ params?: TickerQDeleteCronTickerOccurrenceParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof tickerQDeleteCronTickerOccurrence>>,
	TError,
	{ params?: TickerQDeleteCronTickerOccurrenceParams },
	TContext
> => {
	const mutationOptions = getTickerQDeleteCronTickerOccurrenceMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const tickerQGetTickerRequestById = (params?: TickerQGetTickerRequestByIdParams) => {
	return customInstance<Blob>({
		url: `/api/ticker-request/:id`,
		method: "GET",
		params,
		responseType: "blob",
	});
};

export const getTickerQGetTickerRequestByIdQueryKey = (
	params?: TickerQGetTickerRequestByIdParams
) => {
	return [`/api/ticker-request/:id`, ...(params ? [params] : [])] as const;
};

export const getTickerQGetTickerRequestByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof tickerQGetTickerRequestById>>,
	TError = ErrorType<unknown>,
>(
	params?: TickerQGetTickerRequestByIdParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetTickerRequestById>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTickerQGetTickerRequestByIdQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof tickerQGetTickerRequestById>>> = () =>
		tickerQGetTickerRequestById(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof tickerQGetTickerRequestById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TickerQGetTickerRequestByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof tickerQGetTickerRequestById>>
>;
export type TickerQGetTickerRequestByIdQueryError = ErrorType<unknown>;

export function createTickerQGetTickerRequestById<
	TData = Awaited<ReturnType<typeof tickerQGetTickerRequestById>>,
	TError = ErrorType<unknown>,
>(
	params?: TickerQGetTickerRequestByIdParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetTickerRequestById>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getTickerQGetTickerRequestByIdQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const tickerQGetTickerFunctions = () => {
	return customInstance<Blob>({
		url: `/api/ticker-functions`,
		method: "GET",
		responseType: "blob",
	});
};

export const getTickerQGetTickerFunctionsQueryKey = () => {
	return [`/api/ticker-functions`] as const;
};

export const getTickerQGetTickerFunctionsQueryOptions = <
	TData = Awaited<ReturnType<typeof tickerQGetTickerFunctions>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetTickerFunctions>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTickerQGetTickerFunctionsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof tickerQGetTickerFunctions>>> = () =>
		tickerQGetTickerFunctions();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof tickerQGetTickerFunctions>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TickerQGetTickerFunctionsQueryResult = NonNullable<
	Awaited<ReturnType<typeof tickerQGetTickerFunctions>>
>;
export type TickerQGetTickerFunctionsQueryError = ErrorType<unknown>;

export function createTickerQGetTickerFunctions<
	TData = Awaited<ReturnType<typeof tickerQGetTickerFunctions>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetTickerFunctions>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getTickerQGetTickerFunctionsQueryOptions(options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const tickerQUpdateTimeTicker = (
	tickerQUtilitiesDashboardDtosUpdateTimeTickerRequest: BodyType<TickerQUtilitiesDashboardDtosUpdateTimeTickerRequest>,
	params?: TickerQUpdateTimeTickerParams
) => {
	return customInstance<Blob>({
		url: `/api/time-ticker/:update`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: tickerQUtilitiesDashboardDtosUpdateTimeTickerRequest,
		params,
		responseType: "blob",
	});
};

export const getTickerQUpdateTimeTickerMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof tickerQUpdateTimeTicker>>,
		TError,
		{
			data: BodyType<TickerQUtilitiesDashboardDtosUpdateTimeTickerRequest>;
			params?: TickerQUpdateTimeTickerParams;
		},
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof tickerQUpdateTimeTicker>>,
	TError,
	{
		data: BodyType<TickerQUtilitiesDashboardDtosUpdateTimeTickerRequest>;
		params?: TickerQUpdateTimeTickerParams;
	},
	TContext
> => {
	const mutationKey = ["tickerQUpdateTimeTicker"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof tickerQUpdateTimeTicker>>,
		{
			data: BodyType<TickerQUtilitiesDashboardDtosUpdateTimeTickerRequest>;
			params?: TickerQUpdateTimeTickerParams;
		}
	> = (props) => {
		const { data, params } = props ?? {};

		return tickerQUpdateTimeTicker(data, params);
	};

	return { mutationFn, ...mutationOptions };
};

export type TickerQUpdateTimeTickerMutationResult = NonNullable<
	Awaited<ReturnType<typeof tickerQUpdateTimeTicker>>
>;
export type TickerQUpdateTimeTickerMutationBody =
	BodyType<TickerQUtilitiesDashboardDtosUpdateTimeTickerRequest>;
export type TickerQUpdateTimeTickerMutationError = ErrorType<unknown>;

export const createTickerQUpdateTimeTicker = <TError = ErrorType<unknown>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof tickerQUpdateTimeTicker>>,
			TError,
			{
				data: BodyType<TickerQUtilitiesDashboardDtosUpdateTimeTickerRequest>;
				params?: TickerQUpdateTimeTickerParams;
			},
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof tickerQUpdateTimeTicker>>,
	TError,
	{
		data: BodyType<TickerQUtilitiesDashboardDtosUpdateTimeTickerRequest>;
		params?: TickerQUpdateTimeTickerParams;
	},
	TContext
> => {
	const mutationOptions = getTickerQUpdateTimeTickerMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const tickerQAddTimeTicker = (
	tickerQUtilitiesDashboardDtosAddTimeTickerRequest: BodyType<TickerQUtilitiesDashboardDtosAddTimeTickerRequest>
) => {
	return customInstance<Blob>({
		url: `/api/time-ticker/:add`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: tickerQUtilitiesDashboardDtosAddTimeTickerRequest,
		responseType: "blob",
	});
};

export const getTickerQAddTimeTickerMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof tickerQAddTimeTicker>>,
		TError,
		{ data: BodyType<TickerQUtilitiesDashboardDtosAddTimeTickerRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof tickerQAddTimeTicker>>,
	TError,
	{ data: BodyType<TickerQUtilitiesDashboardDtosAddTimeTickerRequest> },
	TContext
> => {
	const mutationKey = ["tickerQAddTimeTicker"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof tickerQAddTimeTicker>>,
		{ data: BodyType<TickerQUtilitiesDashboardDtosAddTimeTickerRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return tickerQAddTimeTicker(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type TickerQAddTimeTickerMutationResult = NonNullable<
	Awaited<ReturnType<typeof tickerQAddTimeTicker>>
>;
export type TickerQAddTimeTickerMutationBody =
	BodyType<TickerQUtilitiesDashboardDtosAddTimeTickerRequest>;
export type TickerQAddTimeTickerMutationError = ErrorType<unknown>;

export const createTickerQAddTimeTicker = <TError = ErrorType<unknown>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof tickerQAddTimeTicker>>,
			TError,
			{ data: BodyType<TickerQUtilitiesDashboardDtosAddTimeTickerRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof tickerQAddTimeTicker>>,
	TError,
	{ data: BodyType<TickerQUtilitiesDashboardDtosAddTimeTickerRequest> },
	TContext
> => {
	const mutationOptions = getTickerQAddTimeTickerMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const tickerQAddCronTicker = (
	tickerQUtilitiesDashboardDtosAddCronTickerRequest: BodyType<TickerQUtilitiesDashboardDtosAddCronTickerRequest>
) => {
	return customInstance<Blob>({
		url: `/api/cron-ticker/:add`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: tickerQUtilitiesDashboardDtosAddCronTickerRequest,
		responseType: "blob",
	});
};

export const getTickerQAddCronTickerMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof tickerQAddCronTicker>>,
		TError,
		{ data: BodyType<TickerQUtilitiesDashboardDtosAddCronTickerRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof tickerQAddCronTicker>>,
	TError,
	{ data: BodyType<TickerQUtilitiesDashboardDtosAddCronTickerRequest> },
	TContext
> => {
	const mutationKey = ["tickerQAddCronTicker"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof tickerQAddCronTicker>>,
		{ data: BodyType<TickerQUtilitiesDashboardDtosAddCronTickerRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return tickerQAddCronTicker(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type TickerQAddCronTickerMutationResult = NonNullable<
	Awaited<ReturnType<typeof tickerQAddCronTicker>>
>;
export type TickerQAddCronTickerMutationBody =
	BodyType<TickerQUtilitiesDashboardDtosAddCronTickerRequest>;
export type TickerQAddCronTickerMutationError = ErrorType<unknown>;

export const createTickerQAddCronTicker = <TError = ErrorType<unknown>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof tickerQAddCronTicker>>,
			TError,
			{ data: BodyType<TickerQUtilitiesDashboardDtosAddCronTickerRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof tickerQAddCronTicker>>,
	TError,
	{ data: BodyType<TickerQUtilitiesDashboardDtosAddCronTickerRequest> },
	TContext
> => {
	const mutationOptions = getTickerQAddCronTickerMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const tickerQUpdateCronTicker = (
	tickerQUtilitiesDashboardDtosUpdateCronTickerRequest: BodyType<TickerQUtilitiesDashboardDtosUpdateCronTickerRequest>,
	params?: TickerQUpdateCronTickerParams
) => {
	return customInstance<Blob>({
		url: `/api/cron-ticker/:update`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: tickerQUtilitiesDashboardDtosUpdateCronTickerRequest,
		params,
		responseType: "blob",
	});
};

export const getTickerQUpdateCronTickerMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof tickerQUpdateCronTicker>>,
		TError,
		{
			data: BodyType<TickerQUtilitiesDashboardDtosUpdateCronTickerRequest>;
			params?: TickerQUpdateCronTickerParams;
		},
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof tickerQUpdateCronTicker>>,
	TError,
	{
		data: BodyType<TickerQUtilitiesDashboardDtosUpdateCronTickerRequest>;
		params?: TickerQUpdateCronTickerParams;
	},
	TContext
> => {
	const mutationKey = ["tickerQUpdateCronTicker"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof tickerQUpdateCronTicker>>,
		{
			data: BodyType<TickerQUtilitiesDashboardDtosUpdateCronTickerRequest>;
			params?: TickerQUpdateCronTickerParams;
		}
	> = (props) => {
		const { data, params } = props ?? {};

		return tickerQUpdateCronTicker(data, params);
	};

	return { mutationFn, ...mutationOptions };
};

export type TickerQUpdateCronTickerMutationResult = NonNullable<
	Awaited<ReturnType<typeof tickerQUpdateCronTicker>>
>;
export type TickerQUpdateCronTickerMutationBody =
	BodyType<TickerQUtilitiesDashboardDtosUpdateCronTickerRequest>;
export type TickerQUpdateCronTickerMutationError = ErrorType<unknown>;

export const createTickerQUpdateCronTicker = <TError = ErrorType<unknown>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof tickerQUpdateCronTicker>>,
			TError,
			{
				data: BodyType<TickerQUtilitiesDashboardDtosUpdateCronTickerRequest>;
				params?: TickerQUpdateCronTickerParams;
			},
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof tickerQUpdateCronTicker>>,
	TError,
	{
		data: BodyType<TickerQUtilitiesDashboardDtosUpdateCronTickerRequest>;
		params?: TickerQUpdateCronTickerParams;
	},
	TContext
> => {
	const mutationOptions = getTickerQUpdateCronTickerMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const tickerQRunCronTickerOnDemand = (params?: TickerQRunCronTickerOnDemandParams) => {
	return customInstance<Blob>({
		url: `/api/cron-ticker/:run`,
		method: "POST",
		params,
		responseType: "blob",
	});
};

export const getTickerQRunCronTickerOnDemandMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof tickerQRunCronTickerOnDemand>>,
		TError,
		{ params?: TickerQRunCronTickerOnDemandParams },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof tickerQRunCronTickerOnDemand>>,
	TError,
	{ params?: TickerQRunCronTickerOnDemandParams },
	TContext
> => {
	const mutationKey = ["tickerQRunCronTickerOnDemand"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof tickerQRunCronTickerOnDemand>>,
		{ params?: TickerQRunCronTickerOnDemandParams }
	> = (props) => {
		const { params } = props ?? {};

		return tickerQRunCronTickerOnDemand(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type TickerQRunCronTickerOnDemandMutationResult = NonNullable<
	Awaited<ReturnType<typeof tickerQRunCronTickerOnDemand>>
>;

export type TickerQRunCronTickerOnDemandMutationError = ErrorType<unknown>;

export const createTickerQRunCronTickerOnDemand = <TError = ErrorType<unknown>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof tickerQRunCronTickerOnDemand>>,
			TError,
			{ params?: TickerQRunCronTickerOnDemandParams },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof tickerQRunCronTickerOnDemand>>,
	TError,
	{ params?: TickerQRunCronTickerOnDemandParams },
	TContext
> => {
	const mutationOptions = getTickerQRunCronTickerOnDemandMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const tickerQGetNextTicker = () => {
	return customInstance<Blob>({
		url: `/api/ticker-host/:next-ticker`,
		method: "GET",
		responseType: "blob",
	});
};

export const getTickerQGetNextTickerQueryKey = () => {
	return [`/api/ticker-host/:next-ticker`] as const;
};

export const getTickerQGetNextTickerQueryOptions = <
	TData = Awaited<ReturnType<typeof tickerQGetNextTicker>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetNextTicker>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTickerQGetNextTickerQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof tickerQGetNextTicker>>> = () =>
		tickerQGetNextTicker();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof tickerQGetNextTicker>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TickerQGetNextTickerQueryResult = NonNullable<
	Awaited<ReturnType<typeof tickerQGetNextTicker>>
>;
export type TickerQGetNextTickerQueryError = ErrorType<unknown>;

export function createTickerQGetNextTicker<
	TData = Awaited<ReturnType<typeof tickerQGetNextTicker>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetNextTicker>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getTickerQGetNextTickerQueryOptions(options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const tickerQStopTickerHost = () => {
	return customInstance<Blob>({
		url: `/api/ticker-host/:stop`,
		method: "POST",
		responseType: "blob",
	});
};

export const getTickerQStopTickerHostMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof tickerQStopTickerHost>>,
		TError,
		void,
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof tickerQStopTickerHost>>,
	TError,
	void,
	TContext
> => {
	const mutationKey = ["tickerQStopTickerHost"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof tickerQStopTickerHost>>,
		void
	> = () => {
		return tickerQStopTickerHost();
	};

	return { mutationFn, ...mutationOptions };
};

export type TickerQStopTickerHostMutationResult = NonNullable<
	Awaited<ReturnType<typeof tickerQStopTickerHost>>
>;

export type TickerQStopTickerHostMutationError = ErrorType<unknown>;

export const createTickerQStopTickerHost = <TError = ErrorType<unknown>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof tickerQStopTickerHost>>,
			TError,
			void,
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof tickerQStopTickerHost>>,
	TError,
	void,
	TContext
> => {
	const mutationOptions = getTickerQStopTickerHostMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const tickerQStartTickerHost = () => {
	return customInstance<Blob>({
		url: `/api/ticker-host/:start`,
		method: "POST",
		responseType: "blob",
	});
};

export const getTickerQStartTickerHostMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof tickerQStartTickerHost>>,
		TError,
		void,
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof tickerQStartTickerHost>>,
	TError,
	void,
	TContext
> => {
	const mutationKey = ["tickerQStartTickerHost"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof tickerQStartTickerHost>>,
		void
	> = () => {
		return tickerQStartTickerHost();
	};

	return { mutationFn, ...mutationOptions };
};

export type TickerQStartTickerHostMutationResult = NonNullable<
	Awaited<ReturnType<typeof tickerQStartTickerHost>>
>;

export type TickerQStartTickerHostMutationError = ErrorType<unknown>;

export const createTickerQStartTickerHost = <TError = ErrorType<unknown>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof tickerQStartTickerHost>>,
			TError,
			void,
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof tickerQStartTickerHost>>,
	TError,
	void,
	TContext
> => {
	const mutationOptions = getTickerQStartTickerHostMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const tickerQRestartTickerHost = () => {
	return customInstance<Blob>({
		url: `/api/ticker-host/:restart`,
		method: "POST",
		responseType: "blob",
	});
};

export const getTickerQRestartTickerHostMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof tickerQRestartTickerHost>>,
		TError,
		void,
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof tickerQRestartTickerHost>>,
	TError,
	void,
	TContext
> => {
	const mutationKey = ["tickerQRestartTickerHost"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof tickerQRestartTickerHost>>,
		void
	> = () => {
		return tickerQRestartTickerHost();
	};

	return { mutationFn, ...mutationOptions };
};

export type TickerQRestartTickerHostMutationResult = NonNullable<
	Awaited<ReturnType<typeof tickerQRestartTickerHost>>
>;

export type TickerQRestartTickerHostMutationError = ErrorType<unknown>;

export const createTickerQRestartTickerHost = <TError = ErrorType<unknown>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof tickerQRestartTickerHost>>,
			TError,
			void,
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof tickerQRestartTickerHost>>,
	TError,
	void,
	TContext
> => {
	const mutationOptions = getTickerQRestartTickerHostMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const tickerQGetTickerHostStatus = () => {
	return customInstance<Blob>({
		url: `/api/ticker-host/:status`,
		method: "GET",
		responseType: "blob",
	});
};

export const getTickerQGetTickerHostStatusQueryKey = () => {
	return [`/api/ticker-host/:status`] as const;
};

export const getTickerQGetTickerHostStatusQueryOptions = <
	TData = Awaited<ReturnType<typeof tickerQGetTickerHostStatus>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetTickerHostStatus>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTickerQGetTickerHostStatusQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof tickerQGetTickerHostStatus>>> = () =>
		tickerQGetTickerHostStatus();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof tickerQGetTickerHostStatus>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TickerQGetTickerHostStatusQueryResult = NonNullable<
	Awaited<ReturnType<typeof tickerQGetTickerHostStatus>>
>;
export type TickerQGetTickerHostStatusQueryError = ErrorType<unknown>;

export function createTickerQGetTickerHostStatus<
	TData = Awaited<ReturnType<typeof tickerQGetTickerHostStatus>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetTickerHostStatus>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getTickerQGetTickerHostStatusQueryOptions(options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const tickerQGetLastWeekJobStatus = () => {
	return customInstance<Blob>({
		url: `/api/ticker/statuses/:get-last-week`,
		method: "GET",
		responseType: "blob",
	});
};

export const getTickerQGetLastWeekJobStatusQueryKey = () => {
	return [`/api/ticker/statuses/:get-last-week`] as const;
};

export const getTickerQGetLastWeekJobStatusQueryOptions = <
	TData = Awaited<ReturnType<typeof tickerQGetLastWeekJobStatus>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetLastWeekJobStatus>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTickerQGetLastWeekJobStatusQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof tickerQGetLastWeekJobStatus>>> = () =>
		tickerQGetLastWeekJobStatus();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof tickerQGetLastWeekJobStatus>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TickerQGetLastWeekJobStatusQueryResult = NonNullable<
	Awaited<ReturnType<typeof tickerQGetLastWeekJobStatus>>
>;
export type TickerQGetLastWeekJobStatusQueryError = ErrorType<unknown>;

export function createTickerQGetLastWeekJobStatus<
	TData = Awaited<ReturnType<typeof tickerQGetLastWeekJobStatus>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetLastWeekJobStatus>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getTickerQGetLastWeekJobStatusQueryOptions(options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const tickerQGetJobStatuses = () => {
	return customInstance<Blob>({
		url: `/api/ticker/statuses/:get`,
		method: "GET",
		responseType: "blob",
	});
};

export const getTickerQGetJobStatusesQueryKey = () => {
	return [`/api/ticker/statuses/:get`] as const;
};

export const getTickerQGetJobStatusesQueryOptions = <
	TData = Awaited<ReturnType<typeof tickerQGetJobStatuses>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetJobStatuses>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTickerQGetJobStatusesQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof tickerQGetJobStatuses>>> = () =>
		tickerQGetJobStatuses();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof tickerQGetJobStatuses>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TickerQGetJobStatusesQueryResult = NonNullable<
	Awaited<ReturnType<typeof tickerQGetJobStatuses>>
>;
export type TickerQGetJobStatusesQueryError = ErrorType<unknown>;

export function createTickerQGetJobStatuses<
	TData = Awaited<ReturnType<typeof tickerQGetJobStatuses>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetJobStatuses>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getTickerQGetJobStatusesQueryOptions(options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const tickerQGetMachineJobs = () => {
	return customInstance<Blob>({
		url: `/api/ticker/machine/:jobs`,
		method: "GET",
		responseType: "blob",
	});
};

export const getTickerQGetMachineJobsQueryKey = () => {
	return [`/api/ticker/machine/:jobs`] as const;
};

export const getTickerQGetMachineJobsQueryOptions = <
	TData = Awaited<ReturnType<typeof tickerQGetMachineJobs>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetMachineJobs>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTickerQGetMachineJobsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof tickerQGetMachineJobs>>> = () =>
		tickerQGetMachineJobs();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof tickerQGetMachineJobs>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TickerQGetMachineJobsQueryResult = NonNullable<
	Awaited<ReturnType<typeof tickerQGetMachineJobs>>
>;
export type TickerQGetMachineJobsQueryError = ErrorType<unknown>;

export function createTickerQGetMachineJobs<
	TData = Awaited<ReturnType<typeof tickerQGetMachineJobs>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof tickerQGetMachineJobs>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getTickerQGetMachineJobsQueryOptions(options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
