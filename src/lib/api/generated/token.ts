/**
 * Generated by orval v6.20.0 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation } from "@tanstack/svelte-query";
import type { CreateMutationOptions, MutationFunction } from "@tanstack/svelte-query";
import type { InternalErrorResponse, Request, Response } from "./api.schemas";
import { useCustomClient } from "../mutator/useCustomClient";
import type { ErrorType, BodyType } from "../mutator/useCustomClient";

export const useTokenHook = () => {
	const token = useCustomClient<Response>();

	return (request: BodyType<Request>) => {
		return token({
			url: `/token`,
			method: "post",
			headers: { "Content-Type": "application/json" },
			data: request,
		});
	};
};

export const useTokenMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useTokenHook>>>,
		TError,
		{ data: BodyType<Request> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useTokenHook>>>,
	TError,
	{ data: BodyType<Request> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const token = useTokenHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useTokenHook>>>,
		{ data: BodyType<Request> }
	> = (props) => {
		const { data } = props ?? {};

		return token(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type TokenMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTokenHook>>>>;
export type TokenMutationBody = BodyType<Request>;
export type TokenMutationError = ErrorType<InternalErrorResponse>;

export const createToken = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useTokenHook>>>,
		TError,
		{ data: BodyType<Request> },
		TContext
	>;
}) => {
	const mutationOptions = useTokenMutationOptions(options);

	return createMutation(mutationOptions);
};
