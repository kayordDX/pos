// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	MutationFunction,
} from "@tanstack/svelte-query";
import type {
	EntitiesMenuSection,
	ErrorResponse,
	InternalErrorResponse,
	MenuSectionsCreateRequest,
	MenuSectionsUpdateRequest,
} from "./api.schemas";
import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const menuSectionsUpdate = (
	menuSectionsUpdateRequest: BodyType<MenuSectionsUpdateRequest>
) => {
	return customInstance<EntitiesMenuSection>({
		url: `/menuSection`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: menuSectionsUpdateRequest,
	});
};

export const getMenuSectionsUpdateMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof menuSectionsUpdate>>,
		TError,
		{ data: BodyType<MenuSectionsUpdateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof menuSectionsUpdate>>,
	TError,
	{ data: BodyType<MenuSectionsUpdateRequest> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof menuSectionsUpdate>>,
		{ data: BodyType<MenuSectionsUpdateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return menuSectionsUpdate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type MenuSectionsUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof menuSectionsUpdate>>
>;
export type MenuSectionsUpdateMutationBody = BodyType<MenuSectionsUpdateRequest>;
export type MenuSectionsUpdateMutationError = ErrorType<void | InternalErrorResponse>;

export const createMenuSectionsUpdate = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof menuSectionsUpdate>>,
		TError,
		{ data: BodyType<MenuSectionsUpdateRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<typeof menuSectionsUpdate>>,
	TError,
	{ data: BodyType<MenuSectionsUpdateRequest> },
	TContext
> => {
	const mutationOptions = getMenuSectionsUpdateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const menuSectionsCreate = (
	menuSectionsCreateRequest: BodyType<MenuSectionsCreateRequest>
) => {
	return customInstance<EntitiesMenuSection>({
		url: `/menuSection`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: menuSectionsCreateRequest,
	});
};

export const getMenuSectionsCreateMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof menuSectionsCreate>>,
		TError,
		{ data: BodyType<MenuSectionsCreateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof menuSectionsCreate>>,
	TError,
	{ data: BodyType<MenuSectionsCreateRequest> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof menuSectionsCreate>>,
		{ data: BodyType<MenuSectionsCreateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return menuSectionsCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type MenuSectionsCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof menuSectionsCreate>>
>;
export type MenuSectionsCreateMutationBody = BodyType<MenuSectionsCreateRequest>;
export type MenuSectionsCreateMutationError = ErrorType<void | InternalErrorResponse>;

export const createMenuSectionsCreate = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof menuSectionsCreate>>,
		TError,
		{ data: BodyType<MenuSectionsCreateRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<typeof menuSectionsCreate>>,
	TError,
	{ data: BodyType<MenuSectionsCreateRequest> },
	TContext
> => {
	const mutationOptions = getMenuSectionsCreateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const menuSectionsDelete = (id: number) => {
	return customInstance<EntitiesMenuSection>({ url: `/menuSection/${id}`, method: "DELETE" });
};

export const getMenuSectionsDeleteMutationOptions = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof menuSectionsDelete>>,
		TError,
		{ id: number },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof menuSectionsDelete>>,
	TError,
	{ id: number },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof menuSectionsDelete>>,
		{ id: number }
	> = (props) => {
		const { id } = props ?? {};

		return menuSectionsDelete(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type MenuSectionsDeleteMutationResult = NonNullable<
	Awaited<ReturnType<typeof menuSectionsDelete>>
>;

export type MenuSectionsDeleteMutationError = ErrorType<
	ErrorResponse | void | InternalErrorResponse
>;

export const createMenuSectionsDelete = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof menuSectionsDelete>>,
		TError,
		{ id: number },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<typeof menuSectionsDelete>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationOptions = getMenuSectionsDeleteMutationOptions(options);

	return createMutation(mutationOptions);
};
