// @ts-nocheck
/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateQueryOptions,
	CreateQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type {
	ErrorResponse,
	InternalErrorResponse,
	Request21,
	Request22,
	SalesPeriod,
} from "./api.schemas";
import { useCustomClient } from "../mutator/useCustomClient";
import type { ErrorType, BodyType } from "../mutator/useCustomClient";

export const useSalesPeriodGetHook = () => {
	const salesPeriodGet = useCustomClient<SalesPeriod>();

	return (outletId: number) => {
		return salesPeriodGet({ url: `/salesPeriod/${outletId}`, method: "GET" });
	};
};

export const getSalesPeriodGetQueryKey = (outletId: number) => {
	return [`/salesPeriod/${outletId}`] as const;
};

export const useSalesPeriodGetQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useSalesPeriodGetHook>>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	outletId: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useSalesPeriodGetHook>>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getSalesPeriodGetQueryKey(outletId);

	const salesPeriodGet = useSalesPeriodGetHook();

	const queryFn: QueryFunction<
		Awaited<ReturnType<ReturnType<typeof useSalesPeriodGetHook>>>
	> = () => salesPeriodGet(outletId);

	return { queryKey, queryFn, enabled: !!outletId, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useSalesPeriodGetHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type SalesPeriodGetQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useSalesPeriodGetHook>>>
>;
export type SalesPeriodGetQueryError = ErrorType<InternalErrorResponse>;

export const createSalesPeriodGet = <
	TData = Awaited<ReturnType<ReturnType<typeof useSalesPeriodGetHook>>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	outletId: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useSalesPeriodGetHook>>>,
				TError,
				TData
			>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useSalesPeriodGetQueryOptions(outletId, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const useSalesPeriodCreateHook = () => {
	const salesPeriodCreate = useCustomClient<SalesPeriod>();

	return (request21: BodyType<Request21>) => {
		return salesPeriodCreate({
			url: `/salesPeriod`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: request21,
		});
	};
};

export const useSalesPeriodCreateMutationOptions = <
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useSalesPeriodCreateHook>>>,
		TError,
		{ data: BodyType<Request21> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useSalesPeriodCreateHook>>>,
	TError,
	{ data: BodyType<Request21> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const salesPeriodCreate = useSalesPeriodCreateHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useSalesPeriodCreateHook>>>,
		{ data: BodyType<Request21> }
	> = (props) => {
		const { data } = props ?? {};

		return salesPeriodCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type SalesPeriodCreateMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useSalesPeriodCreateHook>>>
>;
export type SalesPeriodCreateMutationBody = BodyType<Request21>;
export type SalesPeriodCreateMutationError = ErrorType<ErrorResponse | InternalErrorResponse>;

export const createSalesPeriodCreate = <
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useSalesPeriodCreateHook>>>,
		TError,
		{ data: BodyType<Request21> },
		TContext
	>;
}) => {
	const mutationOptions = useSalesPeriodCreateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const useSalesPeriodCloseHook = () => {
	const salesPeriodClose = useCustomClient<SalesPeriod>();

	return (request22: BodyType<Request22>) => {
		return salesPeriodClose({
			url: `/salesPeriod/close`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: request22,
		});
	};
};

export const useSalesPeriodCloseMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useSalesPeriodCloseHook>>>,
		TError,
		{ data: BodyType<Request22> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useSalesPeriodCloseHook>>>,
	TError,
	{ data: BodyType<Request22> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const salesPeriodClose = useSalesPeriodCloseHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useSalesPeriodCloseHook>>>,
		{ data: BodyType<Request22> }
	> = (props) => {
		const { data } = props ?? {};

		return salesPeriodClose(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type SalesPeriodCloseMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useSalesPeriodCloseHook>>>
>;
export type SalesPeriodCloseMutationBody = BodyType<Request22>;
export type SalesPeriodCloseMutationError = ErrorType<InternalErrorResponse>;

export const createSalesPeriodClose = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useSalesPeriodCloseHook>>>,
		TError,
		{ data: BodyType<Request22> },
		TContext
	>;
}) => {
	const mutationOptions = useSalesPeriodCloseMutationOptions(options);

	return createMutation(mutationOptions);
};
