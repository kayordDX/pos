// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createQuery } from "@tanstack/svelte-query";
import type {
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	QueryClient,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";

import type {
	InternalErrorResponse,
	StatsCashUpParams,
	StatsCashUpResponse,
	StatsPaymentTypesParams,
	StatsPaymentTypesResponse,
	StatsTopSalesPeriodParams,
	StatsTopSalesPeriodResponse,
} from "./api.schemas";

import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType } from "../mutator/customInstance.svelte";

export const statsTopSalesPeriod = (params: StatsTopSalesPeriodParams) => {
	return customInstance<StatsTopSalesPeriodResponse[]>({
		url: `/stats/salesPeriod`,
		method: "GET",
		params,
	});
};

export const getStatsTopSalesPeriodQueryKey = (params: StatsTopSalesPeriodParams) => {
	return [`/stats/salesPeriod`, ...(params ? [params] : [])] as const;
};

export const getStatsTopSalesPeriodQueryOptions = <
	TData = Awaited<ReturnType<typeof statsTopSalesPeriod>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: StatsTopSalesPeriodParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof statsTopSalesPeriod>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getStatsTopSalesPeriodQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof statsTopSalesPeriod>>> = () =>
		statsTopSalesPeriod(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof statsTopSalesPeriod>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StatsTopSalesPeriodQueryResult = NonNullable<
	Awaited<ReturnType<typeof statsTopSalesPeriod>>
>;
export type StatsTopSalesPeriodQueryError = ErrorType<void | InternalErrorResponse>;

export function createStatsTopSalesPeriod<
	TData = Awaited<ReturnType<typeof statsTopSalesPeriod>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: StatsTopSalesPeriodParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof statsTopSalesPeriod>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getStatsTopSalesPeriodQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const statsPaymentTypes = (params: StatsPaymentTypesParams) => {
	return customInstance<StatsPaymentTypesResponse[]>({
		url: `/stats/paymentTypes`,
		method: "GET",
		params,
	});
};

export const getStatsPaymentTypesQueryKey = (params: StatsPaymentTypesParams) => {
	return [`/stats/paymentTypes`, ...(params ? [params] : [])] as const;
};

export const getStatsPaymentTypesQueryOptions = <
	TData = Awaited<ReturnType<typeof statsPaymentTypes>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: StatsPaymentTypesParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof statsPaymentTypes>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getStatsPaymentTypesQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof statsPaymentTypes>>> = () =>
		statsPaymentTypes(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof statsPaymentTypes>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StatsPaymentTypesQueryResult = NonNullable<
	Awaited<ReturnType<typeof statsPaymentTypes>>
>;
export type StatsPaymentTypesQueryError = ErrorType<void | InternalErrorResponse>;

export function createStatsPaymentTypes<
	TData = Awaited<ReturnType<typeof statsPaymentTypes>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: StatsPaymentTypesParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof statsPaymentTypes>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getStatsPaymentTypesQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const statsCashUp = (params: StatsCashUpParams) => {
	return customInstance<StatsCashUpResponse[]>({ url: `/stats/cashUp`, method: "GET", params });
};

export const getStatsCashUpQueryKey = (params: StatsCashUpParams) => {
	return [`/stats/cashUp`, ...(params ? [params] : [])] as const;
};

export const getStatsCashUpQueryOptions = <
	TData = Awaited<ReturnType<typeof statsCashUp>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: StatsCashUpParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof statsCashUp>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getStatsCashUpQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof statsCashUp>>> = () => statsCashUp(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof statsCashUp>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StatsCashUpQueryResult = NonNullable<Awaited<ReturnType<typeof statsCashUp>>>;
export type StatsCashUpQueryError = ErrorType<void | InternalErrorResponse>;

export function createStatsCashUp<
	TData = Awaited<ReturnType<typeof statsCashUp>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: StatsCashUpParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof statsCashUp>>, TError, TData>>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getStatsCashUpQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
