// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	MutationFunction,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type {
	CommonModelsPaginatedListOfStockDTO,
	CommonModelsPaginatedListOfStockOrder,
	DTOStockOrderDTO,
	DTOStockOrderItemStatusDTO,
	EntitiesDivision,
	EntitiesStockOrder,
	EntitiesStockOrderItem,
	ErrorResponse,
	InternalErrorResponse,
	StockDivisionGetAllParams,
	StockGetAllParams,
	StockOrderCreateRequest,
	StockOrderGetAllParams,
	StockOrderItemCreateRequest,
	StockOrderItemUpdateBulkRequest,
	StockOrderItemUpdateRequest,
	StockOrderUpdateRequest,
} from "./api.schemas";
import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const stockOrderItemUpdateBulk = (
	stockOrderItemUpdateBulkRequest: BodyType<StockOrderItemUpdateBulkRequest>
) => {
	return customInstance<unknown>({
		url: `/stock/orderItem/bulk`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: stockOrderItemUpdateBulkRequest,
	});
};

export const getStockOrderItemUpdateBulkMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof stockOrderItemUpdateBulk>>,
		TError,
		{ data: BodyType<StockOrderItemUpdateBulkRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof stockOrderItemUpdateBulk>>,
	TError,
	{ data: BodyType<StockOrderItemUpdateBulkRequest> },
	TContext
> => {
	const mutationKey = ["stockOrderItemUpdateBulk"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof stockOrderItemUpdateBulk>>,
		{ data: BodyType<StockOrderItemUpdateBulkRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return stockOrderItemUpdateBulk(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type StockOrderItemUpdateBulkMutationResult = NonNullable<
	Awaited<ReturnType<typeof stockOrderItemUpdateBulk>>
>;
export type StockOrderItemUpdateBulkMutationBody = BodyType<StockOrderItemUpdateBulkRequest>;
export type StockOrderItemUpdateBulkMutationError = ErrorType<void | InternalErrorResponse>;

export const createStockOrderItemUpdateBulk = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof stockOrderItemUpdateBulk>>,
		TError,
		{ data: BodyType<StockOrderItemUpdateBulkRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<typeof stockOrderItemUpdateBulk>>,
	TError,
	{ data: BodyType<StockOrderItemUpdateBulkRequest> },
	TContext
> => {
	const mutationOptions = getStockOrderItemUpdateBulkMutationOptions(options);

	return createMutation(mutationOptions);
};
export const stockOrderItemUpdate = (
	stockOrderItemUpdateRequest: BodyType<StockOrderItemUpdateRequest>
) => {
	return customInstance<EntitiesStockOrderItem>({
		url: `/stock/orderItem`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: stockOrderItemUpdateRequest,
	});
};

export const getStockOrderItemUpdateMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof stockOrderItemUpdate>>,
		TError,
		{ data: BodyType<StockOrderItemUpdateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof stockOrderItemUpdate>>,
	TError,
	{ data: BodyType<StockOrderItemUpdateRequest> },
	TContext
> => {
	const mutationKey = ["stockOrderItemUpdate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof stockOrderItemUpdate>>,
		{ data: BodyType<StockOrderItemUpdateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return stockOrderItemUpdate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type StockOrderItemUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof stockOrderItemUpdate>>
>;
export type StockOrderItemUpdateMutationBody = BodyType<StockOrderItemUpdateRequest>;
export type StockOrderItemUpdateMutationError = ErrorType<void | InternalErrorResponse>;

export const createStockOrderItemUpdate = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof stockOrderItemUpdate>>,
		TError,
		{ data: BodyType<StockOrderItemUpdateRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<typeof stockOrderItemUpdate>>,
	TError,
	{ data: BodyType<StockOrderItemUpdateRequest> },
	TContext
> => {
	const mutationOptions = getStockOrderItemUpdateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const stockOrderItemCreate = (
	stockOrderItemCreateRequest: BodyType<StockOrderItemCreateRequest>
) => {
	return customInstance<EntitiesStockOrder>({
		url: `/stock/orderItem`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: stockOrderItemCreateRequest,
	});
};

export const getStockOrderItemCreateMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof stockOrderItemCreate>>,
		TError,
		{ data: BodyType<StockOrderItemCreateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof stockOrderItemCreate>>,
	TError,
	{ data: BodyType<StockOrderItemCreateRequest> },
	TContext
> => {
	const mutationKey = ["stockOrderItemCreate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof stockOrderItemCreate>>,
		{ data: BodyType<StockOrderItemCreateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return stockOrderItemCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type StockOrderItemCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof stockOrderItemCreate>>
>;
export type StockOrderItemCreateMutationBody = BodyType<StockOrderItemCreateRequest>;
export type StockOrderItemCreateMutationError = ErrorType<void | InternalErrorResponse>;

export const createStockOrderItemCreate = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof stockOrderItemCreate>>,
		TError,
		{ data: BodyType<StockOrderItemCreateRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<typeof stockOrderItemCreate>>,
	TError,
	{ data: BodyType<StockOrderItemCreateRequest> },
	TContext
> => {
	const mutationOptions = getStockOrderItemCreateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const stockOrderItemStatus = () => {
	return customInstance<DTOStockOrderItemStatusDTO[]>({
		url: `/stock/orderItem/status`,
		method: "GET",
	});
};

export const getStockOrderItemStatusQueryKey = () => {
	return [`/stock/orderItem/status`] as const;
};

export const getStockOrderItemStatusQueryOptions = <
	TData = Awaited<ReturnType<typeof stockOrderItemStatus>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(options?: {
	query?: Partial<
		CreateQueryOptions<Awaited<ReturnType<typeof stockOrderItemStatus>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getStockOrderItemStatusQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof stockOrderItemStatus>>> = () =>
		stockOrderItemStatus();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof stockOrderItemStatus>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StockOrderItemStatusQueryResult = NonNullable<
	Awaited<ReturnType<typeof stockOrderItemStatus>>
>;
export type StockOrderItemStatusQueryError = ErrorType<void | InternalErrorResponse>;

export function createStockOrderItemStatus<
	TData = Awaited<ReturnType<typeof stockOrderItemStatus>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(options?: {
	query?: Partial<
		CreateQueryOptions<Awaited<ReturnType<typeof stockOrderItemStatus>>, TError, TData>
	>;
}): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getStockOrderItemStatusQueryOptions(options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const stockOrderItemDelete = (stockId: number, stockOrderId: number) => {
	return customInstance<unknown>({
		url: `/stock/orderItem/${stockId}/${stockOrderId}`,
		method: "DELETE",
	});
};

export const getStockOrderItemDeleteMutationOptions = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof stockOrderItemDelete>>,
		TError,
		{ stockId: number; stockOrderId: number },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof stockOrderItemDelete>>,
	TError,
	{ stockId: number; stockOrderId: number },
	TContext
> => {
	const mutationKey = ["stockOrderItemDelete"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof stockOrderItemDelete>>,
		{ stockId: number; stockOrderId: number }
	> = (props) => {
		const { stockId, stockOrderId } = props ?? {};

		return stockOrderItemDelete(stockId, stockOrderId);
	};

	return { mutationFn, ...mutationOptions };
};

export type StockOrderItemDeleteMutationResult = NonNullable<
	Awaited<ReturnType<typeof stockOrderItemDelete>>
>;

export type StockOrderItemDeleteMutationError = ErrorType<
	ErrorResponse | void | InternalErrorResponse
>;

export const createStockOrderItemDelete = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof stockOrderItemDelete>>,
		TError,
		{ stockId: number; stockOrderId: number },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<typeof stockOrderItemDelete>>,
	TError,
	{ stockId: number; stockOrderId: number },
	TContext
> => {
	const mutationOptions = getStockOrderItemDeleteMutationOptions(options);

	return createMutation(mutationOptions);
};
export const stockOrderUpdate = (stockOrderUpdateRequest: BodyType<StockOrderUpdateRequest>) => {
	return customInstance<EntitiesStockOrder>({
		url: `/stock/order`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: stockOrderUpdateRequest,
	});
};

export const getStockOrderUpdateMutationOptions = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof stockOrderUpdate>>,
		TError,
		{ data: BodyType<StockOrderUpdateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof stockOrderUpdate>>,
	TError,
	{ data: BodyType<StockOrderUpdateRequest> },
	TContext
> => {
	const mutationKey = ["stockOrderUpdate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof stockOrderUpdate>>,
		{ data: BodyType<StockOrderUpdateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return stockOrderUpdate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type StockOrderUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof stockOrderUpdate>>
>;
export type StockOrderUpdateMutationBody = BodyType<StockOrderUpdateRequest>;
export type StockOrderUpdateMutationError = ErrorType<ErrorResponse | void | InternalErrorResponse>;

export const createStockOrderUpdate = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof stockOrderUpdate>>,
		TError,
		{ data: BodyType<StockOrderUpdateRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<typeof stockOrderUpdate>>,
	TError,
	{ data: BodyType<StockOrderUpdateRequest> },
	TContext
> => {
	const mutationOptions = getStockOrderUpdateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const stockOrderGetAll = (params: StockOrderGetAllParams) => {
	return customInstance<CommonModelsPaginatedListOfStockOrder>({
		url: `/stock/order`,
		method: "GET",
		params,
	});
};

export const getStockOrderGetAllQueryKey = (params: StockOrderGetAllParams) => {
	return [`/stock/order`, ...(params ? [params] : [])] as const;
};

export const getStockOrderGetAllQueryOptions = <
	TData = Awaited<ReturnType<typeof stockOrderGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: StockOrderGetAllParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof stockOrderGetAll>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getStockOrderGetAllQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof stockOrderGetAll>>> = () =>
		stockOrderGetAll(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof stockOrderGetAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StockOrderGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof stockOrderGetAll>>>;
export type StockOrderGetAllQueryError = ErrorType<void | InternalErrorResponse>;

export function createStockOrderGetAll<
	TData = Awaited<ReturnType<typeof stockOrderGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: StockOrderGetAllParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof stockOrderGetAll>>, TError, TData>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getStockOrderGetAllQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const stockOrderCreate = (stockOrderCreateRequest: BodyType<StockOrderCreateRequest>) => {
	return customInstance<EntitiesStockOrder>({
		url: `/stock/order`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: stockOrderCreateRequest,
	});
};

export const getStockOrderCreateMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof stockOrderCreate>>,
		TError,
		{ data: BodyType<StockOrderCreateRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof stockOrderCreate>>,
	TError,
	{ data: BodyType<StockOrderCreateRequest> },
	TContext
> => {
	const mutationKey = ["stockOrderCreate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof stockOrderCreate>>,
		{ data: BodyType<StockOrderCreateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return stockOrderCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type StockOrderCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof stockOrderCreate>>
>;
export type StockOrderCreateMutationBody = BodyType<StockOrderCreateRequest>;
export type StockOrderCreateMutationError = ErrorType<void | InternalErrorResponse>;

export const createStockOrderCreate = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof stockOrderCreate>>,
		TError,
		{ data: BodyType<StockOrderCreateRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<typeof stockOrderCreate>>,
	TError,
	{ data: BodyType<StockOrderCreateRequest> },
	TContext
> => {
	const mutationOptions = getStockOrderCreateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const stockOrderGet = (id: number) => {
	return customInstance<DTOStockOrderDTO>({ url: `/stock/order/${id}`, method: "GET" });
};

export const getStockOrderGetQueryKey = (id: number) => {
	return [`/stock/order/${id}`] as const;
};

export const getStockOrderGetQueryOptions = <
	TData = Awaited<ReturnType<typeof stockOrderGet>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof stockOrderGet>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getStockOrderGetQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof stockOrderGet>>> = () => stockOrderGet(id);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof stockOrderGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StockOrderGetQueryResult = NonNullable<Awaited<ReturnType<typeof stockOrderGet>>>;
export type StockOrderGetQueryError = ErrorType<void | InternalErrorResponse>;

export function createStockOrderGet<
	TData = Awaited<ReturnType<typeof stockOrderGet>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof stockOrderGet>>, TError, TData>>;
	}
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getStockOrderGetQueryOptions(id, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const stockOrderDelete = (id: number) => {
	return customInstance<unknown>({ url: `/stock/order/${id}`, method: "DELETE" });
};

export const getStockOrderDeleteMutationOptions = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof stockOrderDelete>>,
		TError,
		{ id: number },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof stockOrderDelete>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationKey = ["stockOrderDelete"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof stockOrderDelete>>,
		{ id: number }
	> = (props) => {
		const { id } = props ?? {};

		return stockOrderDelete(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type StockOrderDeleteMutationResult = NonNullable<
	Awaited<ReturnType<typeof stockOrderDelete>>
>;

export type StockOrderDeleteMutationError = ErrorType<ErrorResponse | void | InternalErrorResponse>;

export const createStockOrderDelete = <
	TError = ErrorType<ErrorResponse | void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof stockOrderDelete>>,
		TError,
		{ id: number },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<typeof stockOrderDelete>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationOptions = getStockOrderDeleteMutationOptions(options);

	return createMutation(mutationOptions);
};
export const stockGetAll = (params: StockGetAllParams) => {
	return customInstance<CommonModelsPaginatedListOfStockDTO>({
		url: `/stock`,
		method: "GET",
		params,
	});
};

export const getStockGetAllQueryKey = (params: StockGetAllParams) => {
	return [`/stock`, ...(params ? [params] : [])] as const;
};

export const getStockGetAllQueryOptions = <
	TData = Awaited<ReturnType<typeof stockGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: StockGetAllParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof stockGetAll>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getStockGetAllQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof stockGetAll>>> = () => stockGetAll(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof stockGetAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StockGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof stockGetAll>>>;
export type StockGetAllQueryError = ErrorType<void | InternalErrorResponse>;

export function createStockGetAll<
	TData = Awaited<ReturnType<typeof stockGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: StockGetAllParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof stockGetAll>>, TError, TData>>;
	}
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getStockGetAllQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const stockDivisionGetAll = (params: StockDivisionGetAllParams) => {
	return customInstance<EntitiesDivision[]>({ url: `/stock/division`, method: "GET", params });
};

export const getStockDivisionGetAllQueryKey = (params: StockDivisionGetAllParams) => {
	return [`/stock/division`, ...(params ? [params] : [])] as const;
};

export const getStockDivisionGetAllQueryOptions = <
	TData = Awaited<ReturnType<typeof stockDivisionGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: StockDivisionGetAllParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof stockDivisionGetAll>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getStockDivisionGetAllQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof stockDivisionGetAll>>> = () =>
		stockDivisionGetAll(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof stockDivisionGetAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StockDivisionGetAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof stockDivisionGetAll>>
>;
export type StockDivisionGetAllQueryError = ErrorType<void | InternalErrorResponse>;

export function createStockDivisionGetAll<
	TData = Awaited<ReturnType<typeof stockDivisionGetAll>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: StockDivisionGetAllParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof stockDivisionGetAll>>, TError, TData>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getStockDivisionGetAllQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
