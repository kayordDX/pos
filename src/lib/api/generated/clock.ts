// @ts-nocheck
/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateQueryOptions,
	CreateQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type {
	Clock,
	ClockListParams,
	ErrorResponse,
	InternalErrorResponse,
	Request34,
	Request35,
	User,
} from "./api.schemas";
import { useCustomClient } from "../mutator/useCustomClient";
import type { ErrorType, BodyType } from "../mutator/useCustomClient";

export const useClockListHook = () => {
	const clockList = useCustomClient<User[]>();

	return (params: ClockListParams) => {
		return clockList({ url: `/clock/list`, method: "GET", params });
	};
};

export const getClockListQueryKey = (params: ClockListParams) => {
	return [`/clock/list`, ...(params ? [params] : [])] as const;
};

export const useClockListQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useClockListHook>>>,
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
>(
	params: ClockListParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<ReturnType<typeof useClockListHook>>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getClockListQueryKey(params);

	const clockList = useClockListHook();

	const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useClockListHook>>>> = () =>
		clockList(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useClockListHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type ClockListQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useClockListHook>>>
>;
export type ClockListQueryError = ErrorType<ErrorResponse | InternalErrorResponse>;

export const createClockList = <
	TData = Awaited<ReturnType<ReturnType<typeof useClockListHook>>>,
	TError = ErrorType<ErrorResponse | InternalErrorResponse>,
>(
	params: ClockListParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<ReturnType<typeof useClockListHook>>>, TError, TData>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useClockListQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const useClockClockOutHook = () => {
	const clockClockOut = useCustomClient<Clock>();

	return (request34: BodyType<Request34>) => {
		return clockClockOut({
			url: `/clock/out`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: request34,
		});
	};
};

export const useClockClockOutMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useClockClockOutHook>>>,
		TError,
		{ data: BodyType<Request34> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useClockClockOutHook>>>,
	TError,
	{ data: BodyType<Request34> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const clockClockOut = useClockClockOutHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useClockClockOutHook>>>,
		{ data: BodyType<Request34> }
	> = (props) => {
		const { data } = props ?? {};

		return clockClockOut(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type ClockClockOutMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useClockClockOutHook>>>
>;
export type ClockClockOutMutationBody = BodyType<Request34>;
export type ClockClockOutMutationError = ErrorType<InternalErrorResponse>;

export const createClockClockOut = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useClockClockOutHook>>>,
		TError,
		{ data: BodyType<Request34> },
		TContext
	>;
}) => {
	const mutationOptions = useClockClockOutMutationOptions(options);

	return createMutation(mutationOptions);
};
export const useClockClockInHook = () => {
	const clockClockIn = useCustomClient<Clock>();

	return (request35: BodyType<Request35>) => {
		return clockClockIn({
			url: `/clock/in`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: request35,
		});
	};
};

export const useClockClockInMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useClockClockInHook>>>,
		TError,
		{ data: BodyType<Request35> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<ReturnType<typeof useClockClockInHook>>>,
	TError,
	{ data: BodyType<Request35> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const clockClockIn = useClockClockInHook();

	const mutationFn: MutationFunction<
		Awaited<ReturnType<ReturnType<typeof useClockClockInHook>>>,
		{ data: BodyType<Request35> }
	> = (props) => {
		const { data } = props ?? {};

		return clockClockIn(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type ClockClockInMutationResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useClockClockInHook>>>
>;
export type ClockClockInMutationBody = BodyType<Request35>;
export type ClockClockInMutationError = ErrorType<InternalErrorResponse>;

export const createClockClockIn = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<ReturnType<typeof useClockClockInHook>>>,
		TError,
		{ data: BodyType<Request35> },
		TContext
	>;
}) => {
	const mutationOptions = useClockClockInMutationOptions(options);

	return createMutation(mutationOptions);
};
