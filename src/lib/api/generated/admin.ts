// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createMutation } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	MutationFunction,
	QueryClient,
} from "@tanstack/svelte-query";

import type { AdminTokenRequest, AdminTokenResponse, InternalErrorResponse } from "./api.schemas";

import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const adminToken = (adminTokenRequest: BodyType<AdminTokenRequest>) => {
	return customInstance<AdminTokenResponse>({
		url: `/admin/token`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: adminTokenRequest,
	});
};

export const getAdminTokenMutationOptions = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof adminToken>>,
		TError,
		{ data: BodyType<AdminTokenRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof adminToken>>,
	TError,
	{ data: BodyType<AdminTokenRequest> },
	TContext
> => {
	const mutationKey = ["adminToken"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof adminToken>>,
		{ data: BodyType<AdminTokenRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return adminToken(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type AdminTokenMutationResult = NonNullable<Awaited<ReturnType<typeof adminToken>>>;
export type AdminTokenMutationBody = BodyType<AdminTokenRequest>;
export type AdminTokenMutationError = ErrorType<void | InternalErrorResponse>;

export const createAdminToken = <
	TError = ErrorType<void | InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof adminToken>>,
			TError,
			{ data: BodyType<AdminTokenRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof adminToken>>,
	TError,
	{ data: BodyType<AdminTokenRequest> },
	TContext
> => {
	const mutationOptions = getAdminTokenMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
