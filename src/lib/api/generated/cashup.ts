// @ts-nocheck
/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createQuery } from "@tanstack/svelte-query";
import type {
	CreateQueryOptions,
	CreateQueryResult,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type {
	CashUpUserDetailResponse,
	CashUpUserGetParams,
	CashUpUserGetResponse,
	InternalErrorResponse,
} from "./api.schemas";
import { customInstance } from "../mutator/customInstance";
import type { ErrorType } from "../mutator/customInstance";

export const cashUpUserGet = (params: CashUpUserGetParams) => {
	return customInstance<CashUpUserGetResponse[]>({ url: `/cashUp/user`, method: "GET", params });
};

export const getCashUpUserGetQueryKey = (params: CashUpUserGetParams) => {
	return [`/cashUp/user`, ...(params ? [params] : [])] as const;
};

export const getCashUpUserGetQueryOptions = <
	TData = Awaited<ReturnType<typeof cashUpUserGet>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: CashUpUserGetParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof cashUpUserGet>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getCashUpUserGetQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof cashUpUserGet>>> = () =>
		cashUpUserGet(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof cashUpUserGet>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type CashUpUserGetQueryResult = NonNullable<Awaited<ReturnType<typeof cashUpUserGet>>>;
export type CashUpUserGetQueryError = ErrorType<void | InternalErrorResponse>;

export const createCashUpUserGet = <
	TData = Awaited<ReturnType<typeof cashUpUserGet>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params: CashUpUserGetParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof cashUpUserGet>>, TError, TData>>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getCashUpUserGetQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const cashUpUserDetail = (userId: string, outletId: number, salesPeriodId: number) => {
	return customInstance<CashUpUserDetailResponse>({
		url: `/cashUp/user/detail/${userId}/${outletId}/${salesPeriodId}`,
		method: "GET",
	});
};

export const getCashUpUserDetailQueryKey = (
	userId: string,
	outletId: number,
	salesPeriodId: number
) => {
	return [`/cashUp/user/detail/${userId}/${outletId}/${salesPeriodId}`] as const;
};

export const getCashUpUserDetailQueryOptions = <
	TData = Awaited<ReturnType<typeof cashUpUserDetail>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	userId: string,
	outletId: number,
	salesPeriodId: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof cashUpUserDetail>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getCashUpUserDetailQueryKey(userId, outletId, salesPeriodId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof cashUpUserDetail>>> = () =>
		cashUpUserDetail(userId, outletId, salesPeriodId);

	return {
		queryKey,
		queryFn,
		enabled: !!(userId && outletId && salesPeriodId),
		...queryOptions,
	} as CreateQueryOptions<Awaited<ReturnType<typeof cashUpUserDetail>>, TError, TData> & {
		queryKey: QueryKey;
	};
};

export type CashUpUserDetailQueryResult = NonNullable<Awaited<ReturnType<typeof cashUpUserDetail>>>;
export type CashUpUserDetailQueryError = ErrorType<void | InternalErrorResponse>;

export const createCashUpUserDetail = <
	TData = Awaited<ReturnType<typeof cashUpUserDetail>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	userId: string,
	outletId: number,
	salesPeriodId: number,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof cashUpUserDetail>>, TError, TData>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getCashUpUserDetailQueryOptions(userId, outletId, salesPeriodId, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};
