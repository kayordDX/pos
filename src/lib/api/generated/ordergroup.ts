// @ts-nocheck
/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * Kayord.Pos
 * OpenAPI spec version: v1
 */
import { createQuery } from "@tanstack/svelte-query";
import type {
	CreateQueryOptions,
	CreateQueryResult,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";
import type {
	InternalErrorResponse,
	TableOrderOfficeOrderBasedBackParams,
	TableOrderOfficeOrderBasedBackResponse,
} from "./api.schemas";
import { useCustomClient } from "../mutator/useCustomClient";
import type { ErrorType } from "../mutator/useCustomClient";

export const useTableOrderOfficeOrderBasedBackHook = () => {
	const tableOrderOfficeOrderBasedBack = useCustomClient<TableOrderOfficeOrderBasedBackResponse>();

	return (params?: TableOrderOfficeOrderBasedBackParams) => {
		return tableOrderOfficeOrderBasedBack({ url: `/orderGroup/getOrders`, method: "GET", params });
	};
};

export const getTableOrderOfficeOrderBasedBackQueryKey = (
	params?: TableOrderOfficeOrderBasedBackParams
) => {
	return [`/orderGroup/getOrders`, ...(params ? [params] : [])] as const;
};

export const useTableOrderOfficeOrderBasedBackQueryOptions = <
	TData = Awaited<ReturnType<ReturnType<typeof useTableOrderOfficeOrderBasedBackHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params?: TableOrderOfficeOrderBasedBackParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useTableOrderOfficeOrderBasedBackHook>>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTableOrderOfficeOrderBasedBackQueryKey(params);

	const tableOrderOfficeOrderBasedBack = useTableOrderOfficeOrderBasedBackHook();

	const queryFn: QueryFunction<
		Awaited<ReturnType<ReturnType<typeof useTableOrderOfficeOrderBasedBackHook>>>
	> = () => tableOrderOfficeOrderBasedBack(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<ReturnType<typeof useTableOrderOfficeOrderBasedBackHook>>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type TableOrderOfficeOrderBasedBackQueryResult = NonNullable<
	Awaited<ReturnType<ReturnType<typeof useTableOrderOfficeOrderBasedBackHook>>>
>;
export type TableOrderOfficeOrderBasedBackQueryError = ErrorType<void | InternalErrorResponse>;

export const createTableOrderOfficeOrderBasedBack = <
	TData = Awaited<ReturnType<ReturnType<typeof useTableOrderOfficeOrderBasedBackHook>>>,
	TError = ErrorType<void | InternalErrorResponse>,
>(
	params?: TableOrderOfficeOrderBasedBackParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<ReturnType<typeof useTableOrderOfficeOrderBasedBackHook>>>,
				TError,
				TData
			>
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = useTableOrderOfficeOrderBasedBackQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};
